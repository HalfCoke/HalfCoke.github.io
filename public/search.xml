<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Nginx同时代理Web服务与Trojan（或其他TCP/UDP服务）</title>
      <link href="/2023/6b488705/"/>
      <url>/2023/6b488705/</url>
      
        <content type="html"><![CDATA[<p>整体部署可以分为三个部分：Nginx+Web服务+Trojan</p><p>其中web服务可以是任意自定义的服务，在本文最后给出我的web服务的配置，但不做过多说明。</p><p>另外，Trojan使用docker部署，Nginx使用宿主机部署的服务</p><h1 id="一些前提条件"><a href="#一些前提条件" class="headerlink" title="一些前提条件"></a>一些前提条件</h1><ol><li><p>需要有自己的域名，可以考虑申请使用免费的域名（eu.org），但是需要有一段时间的审核，申请的教程参考<a href="https://iweec.com/363.html">https://iweec.com/363.html</a></p></li><li><p>需要申请ssl证书，建议使用certbot，安装教程有很多，安装完成后可以使用如下命令申请自定义证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅申请，不进行安装</span></span><br><span class="line">certbot certonly --nginx -d test.example.org</span><br><span class="line"><span class="comment"># 可以通过crontab配置renew</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 在打开的编辑器中放入以下内容</span></span><br><span class="line">0 12 * * * /usr/bin/certbot renew --quiet</span><br></pre></td></tr></table></figure></li></ol><h1 id="Trojan代理服务部署"><a href="#Trojan代理服务部署" class="headerlink" title="Trojan代理服务部署"></a>Trojan代理服务部署</h1><p>来自ChatGPT的说明：</p><blockquote><p>Trojan代理服务是一种基于Trojan协议的网络代理工具，它可以在用户与互联网之间建立一个加密的通信隧道，以保护用户的网络通信安全和隐私。通过使用Trojan代理服务，用户可以隐藏其真实IP地址和位置，以避免被追踪或监视，同时还可以绕过地理限制和网络封锁，访问被屏蔽的内容和服务。</p><p>与其他传统的代理服务不同，Trojan代理服务使用了一种更加安全和高效的加密方式，可以在传输过程中对数据进行加密和解密，保证数据传输的安全性和可靠性。此外，Trojan代理服务还支持多种协议和代理模式，包括HTTP、SOCKS5等，可以满足不同用户的需求和应用场景。</p><p>然而，由于Trojan代理服务可以被用于绕过封锁和访问被屏蔽的内容，也可能被用于非法活动，因此在使用Trojan代理服务时，用户应该注意合法使用，不要用于违法行为，同时也需要选择可靠和安全的服务提供商，以保证使用的安全和隐私。</p></blockquote><p>Tronjan代理服务使用docker部署，docker-compose文件如下：</p><p>将其中的<code>test.example.org</code>换成你自己的域名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">trojan:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">trojangfw/trojan</span></span><br><span class="line">    <span class="comment">#restart: always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">trojan</span> <span class="string">/etc/trojan/config.json</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6443:443/tcp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6443:443/udp&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.json:/etc/trojan/config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/letsencrypt/live/test.example.org/fullchain.pem:/etc/fullchain.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/letsencrypt/live/test.example.org/privkey.pem:/etc/privkey.pem</span></span><br></pre></td></tr></table></figure><p>trojan的配置文件如下：</p><p>注意修改文件注释的部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;run_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;local_addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;remote_addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span> <span class="comment">// 一般情况填写本机的地址，当请求不匹配trojan协议时，会自动向这里发送http请求</span></span><br><span class="line">    <span class="attr">&quot;remote_port&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;11111&quot;</span> <span class="comment">// 换成你的密码</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;log_level&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tcp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;fastopen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no_delay&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;keepalive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;reuse_port&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefer_gro&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;buffer_size&quot;</span><span class="punctuation">:</span> <span class="number">6291456</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;reuse_port&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ssl&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;cert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/fullchain.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/privkey.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alpn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;verify&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;verify_hostname&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cipher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;session_ticket&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;reuse_session&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prefer_server_cipher&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sni&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test.example.org&quot;</span> <span class="comment">// 换成你自己的域名</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>直接<code>docker-compose up -d </code>就可以启动了，可以先访问测试一下行不行，然后再配置通过nginx代理。</p><p>可以直接在clash的<code>setting -&gt; parsers</code>处增加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parsers:</span> <span class="comment"># array</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://....</span> <span class="comment"># 你自己的订阅链接</span></span><br><span class="line">    <span class="attr">yaml:</span></span><br><span class="line">      <span class="attr">prepend-rules:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,openai.com,CHATGPT_PERSONAL&#x27;</span> <span class="comment"># 想要自己定义的一些规则，如果不需要直接删掉</span></span><br><span class="line">      <span class="attr">append-proxies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test.example.org</span>  <span class="comment"># 名字随便起</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">          <span class="attr">server:</span> <span class="string">test.example.org</span> <span class="comment"># 你自己的服务器域名</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">11111</span>  <span class="comment"># trojan配置文件中的密码</span></span><br><span class="line">          <span class="attr">udp:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">sni:</span> <span class="string">test.example.org</span>  <span class="comment"># 你自己服务器的域名</span></span><br><span class="line">      <span class="attr">append-proxy-groups:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CHATGPT_PERSONAL</span> <span class="comment"># 名字随便起，别和上面一样就行</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">          <span class="attr">proxies:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;test.example.org&quot;</span> <span class="comment"># 上面proxies的name</span></span><br></pre></td></tr></table></figure><p>或者直接编辑clash的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (HTTP and SOCKS5 in one port)</span></span><br><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="comment"># RESTful API for clash</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:58767</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">warning</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proxies:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proxy-groups:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rules:</span></span><br><span class="line"><span class="comment">#   - DOMAIN-SUFFIX,google.com,DIRECT</span></span><br><span class="line"><span class="comment">#   - DOMAIN-KEYWORD,google,DIRECT</span></span><br><span class="line"><span class="comment">#   - DOMAIN,google.com,DIRECT</span></span><br><span class="line"><span class="comment">#   - DOMAIN-SUFFIX,ad.com,REJECT</span></span><br><span class="line"><span class="comment">#   - GEOIP,CN,DIRECT</span></span><br><span class="line"><span class="comment">#   - MATCH,DIRECT</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TEST_TROJAN</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">test.example.org</span> <span class="comment"># 你自己的服务器域名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span> <span class="comment"># 注意端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1111</span> <span class="comment"># trojan配置文件中的密码</span></span><br><span class="line">    <span class="attr">udp:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sni:</span> <span class="string">test.example.org</span> <span class="comment"># 你自己的服务器域名</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">🎯</span> <span class="string">全球直连</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TEST_TROJAN</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,CN,🎯</span> <span class="string">全球直连</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到现在，应该可以通过trojan进行代理了，接下来看下如何通过nginx在前面进行反向代理，实现端口复用。</p><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p>一般情况我们直接使用nginx进行http的反向代理，但是trojan不是标准http协议，直接用nginx的http模块无法使用，此时需要使用nginx的stream模块，最新版nginx可以直接使用。</p><p>stream模块与http模块同级，可以进行tcp&#x2F;udp流量的反向代理，下面给出nginx不同部分的配置文件，在配置文件中进行说明。</p><h2 id="代理Trojan服务配置"><a href="#代理Trojan服务配置" class="headerlink" title="代理Trojan服务配置"></a>代理Trojan服务配置</h2><p><code>/etc/nginx/nginx.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line">error_log  /var/log/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    <span class="comment"># 日志格式增加了一个$proxy_protocol_addr，后面会说明</span></span><br><span class="line">    log_format  main  <span class="string">&#x27;$proxy_protocol_addr - $remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>; </span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 前面其余配置均是nginx默认配置，没有做改动</span></span><br><span class="line"><span class="comment"># 新增stream模块</span></span><br><span class="line">stream &#123;</span><br><span class="line">    log_format steam_main <span class="string">&#x27;$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received&#x27;</span>;</span><br><span class="line">    <span class="comment"># map的作用时将sni中的主机名，进行映射</span></span><br><span class="line">    <span class="comment"># 下面这个，当内部变量$ssl_preread_server_name匹配到任意一个域名的时候，会将第二个值赋值给$backend_name</span></span><br><span class="line">    <span class="comment"># 具体来说，当sni为test.example.org时，变量$backend_name的值为trojan_proxy</span></span><br><span class="line">    map <span class="variable">$ssl_preread_server_name</span> <span class="variable">$backend_name</span> &#123;</span><br><span class="line">        test.example.org trojan_proxy;</span><br><span class="line">        default web;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># upstream模块作用与http模块中的相同</span></span><br><span class="line">    upstream web &#123;</span><br><span class="line">        server 127.0.0.1:80;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream chat &#123;</span><br><span class="line">       server 127.0.0.1:1443;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream trojan &#123;</span><br><span class="line">       server 127.0.0.1:6443;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        access_log /var/log/nginx/stream.access.log steam_main;</span><br><span class="line">        error_log /var/log/nginx/stream.error.log debug;</span><br><span class="line">        listen 443 reuseport; <span class="comment"># 这里server监听443端口，http模块中的server就不能监听443端口了，需要通过proxy_pass代理</span></span><br><span class="line">        listen [::]:443 reuseport;</span><br><span class="line">        proxy_protocol on; <span class="comment"># 开启代理协议，会将4层访问的真实地址传递给后端服务，当然后端服务也需要支持代理协议</span></span><br><span class="line">        ssl_preread on; <span class="comment"># 开启预读sni的功能，使得map模块正常工作</span></span><br><span class="line">        proxy_pass <span class="variable">$backend_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 由于trojan本身不支持proxy_protocol代理协议，需要通过nginx做下转化</span></span><br><span class="line">    upstream trojan_proxy &#123;</span><br><span class="line">      server 127.0.0.1:6234;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">      listen 127.0.0.1:6234 proxy_protocol;</span><br><span class="line">      proxy_pass trojan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx文件做了如上配置后，就应该可以正常代理到后端的trojan服务了。</p><h2 id="代理其他web服务配置"><a href="#代理其他web服务配置" class="headerlink" title="代理其他web服务配置"></a>代理其他web服务配置</h2><p>其他http服务中的server在进行监听时，就不能使用443端口了，需要指定其他端口，下面给出服务配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name test.example.org;</span><br><span class="line">        <span class="comment"># logging</span></span><br><span class="line">        access_log /var/log/nginx/access.log main;</span><br><span class="line">        error_log /var/log/nginx/error.log warn;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># reverse proxy</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:3002;</span><br><span class="line">                <span class="comment">#proxy_http_version      1.1;</span></span><br><span class="line">                proxy_cache_bypass      <span class="variable">$http_upgrade</span>;</span><br><span class="line">                proxy_set_header Upgrade                        <span class="variable">$http_upgrade</span>;</span><br><span class="line">                proxy_set_header Connection             <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">                proxy_set_header Host                           <span class="variable">$host</span>;</span><br><span class="line">                <span class="comment"># 这里应该换成$proxy_protocol_addr，由于我的后端服务不需要ip，就没修改</span></span><br><span class="line">                proxy_set_header X-Real-IP                      <span class="variable">$remote_addr</span>; </span><br><span class="line">                proxy_set_header X-Forwarded-For        <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto      <span class="variable">$scheme</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-Host       <span class="variable">$host</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-Port       <span class="variable">$server_port</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># additional config</span></span><br><span class="line">        <span class="comment"># favicon.ico</span></span><br><span class="line">        location = /favicon.ico &#123;</span><br><span class="line">                log_not_found off;</span><br><span class="line">                access_log off;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># robots.txt</span></span><br><span class="line">        location = /robots.txt &#123;</span><br><span class="line">                log_not_found off;</span><br><span class="line">                access_log off;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># gzip</span></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_proxied any;</span><br><span class="line">        gzip_comp_level 6;</span><br><span class="line">        gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意端口，并且需要proxy_protocol这个参数</span></span><br><span class="line">    listen [::]:1443 ssl ipv6only=on proxy_protocol; <span class="comment"># managed by Certbot</span></span><br><span class="line">    listen 1443 ssl proxy_protocol; <span class="comment"># managed by Certbot</span></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/&lt;你的web服务域名&gt;/fullchain.pems; <span class="comment"># managed by Certbot</span></span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/&lt;你的web服务域名&gt;/privkey.pem; <span class="comment"># managed by Certbot</span></span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf; <span class="comment"># managed by Certbot</span></span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; <span class="comment"># managed by Certbot</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$host</span> = &lt;你的web服务域名&gt;) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125; <span class="comment"># managed by Certbot</span></span><br><span class="line">    server_name &lt;你的web服务域名&gt;;</span><br><span class="line">    <span class="comment"># 注意这里没有proxy_protocol参数，为了实现自动跳转至https</span></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    <span class="built_in">return</span> 404; <span class="comment"># managed by Certbot</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是nginx的http块默认的配置文件，我修改为，非指定域名均无返回的设置了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server; </span><br><span class="line">        listen       1443 ssl http2 default_server proxy_protocol;</span><br><span class="line">        listen       [::]:1443 ssl http2 default_server proxy_protocol;</span><br><span class="line">        server_name  _;</span><br><span class="line">        ssl_reject_handshake on ;</span><br><span class="line">        <span class="built_in">return</span> 444;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a></li><li><a href="https://razeen.me/posts/nginx-tcp-stream-proxy-keep-real-client-ip/">https://razeen.me/posts/nginx-tcp-stream-proxy-keep-real-client-ip/</a></li><li><a href="https://www.huangyuexiang.com/2020/05/09/Nginx%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86%E5%A4%9A%E7%A7%8D%E5%8D%8F%E8%AE%AE/">https://www.huangyuexiang.com/2020/05/09/Nginx%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86%E5%A4%9A%E7%A7%8D%E5%8D%8F%E8%AE%AE/</a></li><li><a href="https://www.chengxiaobai.com/trouble-maker/trojan-shared-443-port-scheme">https://www.chengxiaobai.com/trouble-maker/trojan-shared-443-port-scheme</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 折腾 </category>
          
          <category> 科学工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Trojan </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖系列-基于GitHub Action和国内公网服务器构建免费科学工具</title>
      <link href="/2022/a2e7677e/"/>
      <url>/2022/a2e7677e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>重要说明：这篇文章仅用于技术探讨，请遵守相关法律法规</p></blockquote><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h2><p>Github Action是一种持续集成和部署（CI&#x2F;CD）平台，可用于自动生成、测试和部署。详细介绍请参考<a href="https://docs.github.com/en/actions">官网</a></p><p>由于Github本身是在外网，在本文中便是借助这个临时环境部署了WS+VMESS环境来进行科学上网。（关于VMESS是什么请谷哥或度娘）。</p><p>Github Action可以在公开的仓库中免费使用，下面主要介绍与本文相关的主要功能和概念。</p><h3 id="Github-Action基本介绍"><a href="#Github-Action基本介绍" class="headerlink" title="Github Action基本介绍"></a>Github Action基本介绍</h3><p>Action的功能在这里可以直接看到</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221030163949452.png"></p><p>Action主要通过写yaml文件进行定义，yaml文件需要定义在<code>.github/workflows</code>路径下</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221030164124222.png"></p><p>下面给出一个简单的action文件的组成部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">action</span> <span class="string">name</span> <span class="comment"># 这里是描述这个action的名字</span></span><br><span class="line"><span class="attr">on:</span> <span class="comment"># action的触发条件，比如手动、定时、收到push事件等</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span> <span class="comment"># 这个表示，该action可以手动触发</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="comment"># 定时调度规则</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;*/30 * * * *&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span> <span class="comment"># 开始定义要执行的任务</span></span><br><span class="line">  <span class="attr">first:</span> <span class="comment"># 任务的名称，这个‘first’可以自定义名字</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">unbuntu-latest</span> <span class="comment"># 需要依赖于什么环境运行，参考官网https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job</span></span><br><span class="line">    <span class="attr">steps:</span> <span class="comment"># 开始定义任务执行的步骤</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">env</span> <span class="comment"># 步骤的名字</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># 这一步骤的脚本，可以直接sudo执行命令，环境中的默认用户名是runner，下面这个脚本就是修改runner的默认密码</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">apt</span> <span class="string">update</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">apt</span> <span class="string">-y</span> <span class="string">install</span> <span class="string">sshpass</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">passwd</span> <span class="string">runner</span> <span class="string">&lt;&lt;</span> <span class="string">EOD</span></span><br><span class="line">          <span class="string">root</span></span><br><span class="line">          <span class="string">root</span></span><br><span class="line">          <span class="string">EOD</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">step2</span></span><br><span class="line">      <span class="string">....</span></span><br></pre></td></tr></table></figure><p>下图对上面部分位置做了简单对应</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221030165206665.png"></p><h3 id="Github-action-secrets介绍"><a href="#Github-action-secrets介绍" class="headerlink" title="Github action secrets介绍"></a>Github action secrets介绍</h3><p>因为仓库是公开的，secrets主要是为了存储一些不想被别人看到的信息。secrets的创建位置如下图所示，secrets创建后不能修改，只能更新。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221030165456577.png"></p><p>secrets创建后，可以在yaml文件中以<code>$&#123;&#123; secrets.SERVER_IP &#125;&#125;</code>的方式引用，注意两侧有两个空格。</p><p>至此，最简单的action配置介绍完了。</p><h2 id="公网服务器"><a href="#公网服务器" class="headerlink" title="公网服务器"></a>公网服务器</h2><p>公网服务器的申请可以从阿里云、腾讯云等大厂申请国内的公网服务器，这里主要是要有一个公网ip，方便action中的虚拟环境可以直接访问，如果家庭有公网ip也可以不用申请云服务器。</p><h2 id="科学工具"><a href="#科学工具" class="headerlink" title="科学工具"></a>科学工具</h2><p>本文的环境使用clash客户端。</p><p>ClashX For Mac：<a href="https://github.com/yichengchen/clashX/releases">https://github.com/yichengchen/clashX/releases</a></p><p>Clash For Windows（当前也支持Mac）：<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>整个工作过程的原理如下图所示，原理很简单：</p><ol><li>Github Action将其中的Vmess服务转发至国内的公网服务器上</li><li>客户端直接连接公网服务器上的端口</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221030172053793.png"></p><h1 id="部署及使用"><a href="#部署及使用" class="headerlink" title="部署及使用"></a>部署及使用</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>action的配置文件可以直接从这里下载：<a href="https://halfcoke.github.io/config/action/ssh-forward.yaml">https://halfcoke.github.io/config/action/ssh-forward.yaml</a></p><h3 id="v2ray配置说明"><a href="#v2ray配置说明" class="headerlink" title="v2ray配置说明"></a>v2ray配置说明</h3><p>下面摘出了v2ray的config.json的配置文件，做一些简单说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;info&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">3456</span><span class="punctuation">,</span> <span class="comment">// v2ray监听的端口，需要与caddy配置文件中相同</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;allocate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;26e3a620-e33e-****-****-4570b0ecf39c&quot;</span><span class="punctuation">,</span> <span class="comment">// uuid，客户端连接时使用，需要重新生成</span></span><br><span class="line">            <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;client@example.com&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;disableInsecureEncryption&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;connectionReuse&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/graphql&quot;</span> <span class="comment">// ws的路径</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tcpSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;header&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Content-Type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="string">&quot;application/octet-stream&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="string">&quot;application/x-msdownload&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="string">&quot;text/html&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="string">&quot;application/x-shockwave-flash&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Transfer-Encoding&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;chunked&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;keep-alive&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Pragma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;no-cache&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AsIs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;0.0.0.0/8&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;10.0.0.0/8&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;100.64.0.0/10&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;127.0.0.0/8&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;169.254.0.0/16&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;172.16.0.0/12&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;192.0.0.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;192.0.2.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;192.168.0.0/16&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;198.18.0.0/15&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;198.51.100.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;203.0.113.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;::1/128&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;fc00::/7&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;fe80::/10&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;bittorrent&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Caddy配置说明"><a href="#Caddy配置说明" class="headerlink" title="Caddy配置说明"></a>Caddy配置说明</h3><p>下面对Caddy配置文件进行简单说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:<span class="variable">$&#123;&#123; secrets.SERVER_REMOTE_PORT &#125;</span>&#125; &#123; <span class="comment"># 这个端口需要与ssh转发的端口相同</span></span><br><span class="line">  <span class="built_in">log</span> &#123;</span><br><span class="line">  output stdout</span><br><span class="line">  &#125;</span><br><span class="line">  root * /web</span><br><span class="line">  reverse_proxy localhost:3456 <span class="comment"># 这个端口需要与v2ray相同</span></span><br><span class="line">&#125;</span><br><span class="line">auto_https off <span class="comment"># 关闭自动https</span></span><br></pre></td></tr></table></figure><h3 id="ssh远程端口转发说明"><a href="#ssh远程端口转发说明" class="headerlink" title="ssh远程端口转发说明"></a>ssh远程端口转发说明</h3><p>因为ssh本身不支持在命令行中输入密码，可以采用类似这种方式，或者使用sshpass，本文使用了sshpass</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd runner &lt;&lt; <span class="string">EOD</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="string">EOD</span></span><br></pre></td></tr></table></figure><p>端口转发命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshpass -p <span class="variable">$&#123;&#123; secrets.SERVER_SSH_PASSWORD &#125;</span>&#125; ssh -o <span class="string">&quot;StrictHostKeyChecking no&quot;</span> -f -NT -p <span class="variable">$&#123;&#123; secrets.SERVER_SSH_PORT &#125;</span>&#125; -R :<span class="variable">$&#123;&#123; secrets.SERVER_REMOTE_PORT &#125;</span>&#125;:localhost:<span class="variable">$&#123;&#123; secrets.SERVER_REMOTE_PORT &#125;</span>&#125; <span class="variable">$&#123;&#123; secrets.SERVER_SSH_USER &#125;</span>&#125;@<span class="variable">$&#123;&#123; secrets.SERVER_IP &#125;</span>&#125;</span><br></pre></td></tr></table></figure><p>关于ssh端口转发的详细介绍请参考这篇文章：SSH端口转发详解<a href="https://halfcoke.github.io/2021/cac946/">https://halfcoke.github.io/2021/cac946/</a></p><h3 id="Github-Action-Secrets配置"><a href="#Github-Action-Secrets配置" class="headerlink" title="Github Action Secrets配置"></a>Github Action Secrets配置</h3><p>需要在Secrets中配置下面这几个变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SERVER_SSH_USER <span class="comment"># 公网服务器的ssh用户</span></span><br><span class="line">SERVER_SSH_PASSWORD  <span class="comment"># 公网服务器的ssh密码</span></span><br><span class="line"></span><br><span class="line">SERVER_IP <span class="comment"># 公网服务器的域名，目前必须使用域名</span></span><br><span class="line">SERVER_SSH_PORT <span class="comment"># 公网服务器的ssh端口</span></span><br><span class="line"></span><br><span class="line">SERVER_REMOTE_PORT <span class="comment"># vmess服务想要在公网服务器上监听的端口</span></span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端主要配置clash的配置文件，已经标出了需要修改的部分。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许局域网的连接</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动更新周期</span></span><br><span class="line"></span><br><span class="line"><span class="attr">interval:</span> <span class="number">3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">global</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。</span></span><br><span class="line"><span class="comment"># 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">silent</span></span><br><span class="line"><span class="comment"># Clash 的 RESTful API</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RESTful API 的口令</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="attr">proxies:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;代理名字&quot;</span> <span class="comment"># 需要修改</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">&quot;服务器域名&quot;</span> <span class="comment"># 需要修改</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">服务器监听的端口</span> <span class="comment"># 需要修改</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">vmess</span></span><br><span class="line">    <span class="attr">uuid:</span> <span class="string">vmess配置文件中的uuid</span> <span class="comment"># 需要修改</span></span><br><span class="line">    <span class="attr">alterId:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">cipher:</span> <span class="string">auto</span></span><br><span class="line">    <span class="attr">network:</span> <span class="string">ws</span></span><br><span class="line">    <span class="attr">tls:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">ws-path:</span> <span class="string">/graphql</span></span><br><span class="line">    <span class="attr">ws-opts:</span> </span><br><span class="line">      <span class="attr">path:</span> <span class="string">/graphql</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">🎯</span> <span class="string">全球直连</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">代理名字</span> <span class="comment"># 需要修改</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">GEOIP,CN,🎯</span> <span class="string">全球直连</span></span><br></pre></td></tr></table></figure><p>好了，快去测试一下吧！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li>github action. <a href="https://docs.github.com/en/actions">https://docs.github.com/en/actions</a></li><li>v2ray服务. <a href="https://www.v2fly.org/">https://www.v2fly.org/</a></li><li>caddy配置. <a href="https://caddyserver.com/docs/">https://caddyserver.com/docs/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 折腾 </category>
          
          <category> 科学工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转发 </tag>
            
            <tag> 隧道 </tag>
            
            <tag> Gihub Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K3S 安装及部署</title>
      <link href="/2022/50e64521/"/>
      <url>/2022/50e64521/</url>
      
        <content type="html"><![CDATA[<h1 id="K3s"><a href="#K3s" class="headerlink" title="K3s"></a>K3s</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Lightweight Kubernetes. Easy to install, half the memory, all in a binary of less than 100 MB.</p></blockquote><p>K3s是K8s轻量级的发行版，K3s完全兼容K8s，主要是为了边缘计算和物联网，所以K3s也支持ARM架构。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><h4 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h4><blockquote><p>If all your nodes have the same hostname, use the <code>--with-node-id</code> option to append a random suffix for each node, or otherwise devise a unique name to pass with <code>--node-name</code> or <code>$K3S_NODE_NAME</code> for each node you add to the cluster.</p></blockquote><p>每个主机不能有相同的名字，如果有相同的名字可以使用<code>--with-node-id</code>参数来生成随机后缀，或者使用<code>--node-name</code>或变量<code>$K3S_NODE_NAME</code>指定节点名称。</p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>对于Red Hat&#x2F;Centos需要关闭firewalld</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld --now</span><br></pre></td></tr></table></figure><p>其他系统的前置条件参考官网文档（<a href="https://docs.k3s.io/advanced#additional-os-preparations%EF%BC%89">https://docs.k3s.io/advanced#additional-os-preparations）</a></p><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ol><li>所有节点需要能够访问K3s server的<code>6443</code>端口</li><li>当使用Flannel VXLAN时，所有节点需要能够互相访问<code>8472/udp</code>；当使用Flannel Wireguard时，需要能够互相访问<code>51820/udp</code>和<code>51821/udp</code>（IPv6）</li><li>如果使用metrics server 还需要在每个节点上开启<code>10250</code>端口</li><li>如果要通过内建的etcd实现server的高可用，还需要开启<code>2379</code>和<code>2380</code>端口</li></ol><blockquote><p><strong>Important:</strong> The VXLAN port on nodes should not be exposed to the world as it opens up your cluster network to be accessed by anyone. Run your nodes behind a firewall&#x2F;security group that disables access to port 8472. <strong>Warning:</strong> Flannel relies on the <a href="https://www.cni.dev/plugins/current/main/bridge/">Bridge CNI plugin</a> to create a L2 network that switches traffic. Rogue pods with NET_RAW capabilities can abuse that L2 network to launch attacks such as [ARP spoofing](<a href="https://static.sched.com/hosted_files/kccncna19/72/ARP">https://static.sched.com/hosted_files/kccncna19/72/ARP</a> DNS spoof.pdf). Therefore, as documented in the <a href="https://kubernetes.io/docs/concepts/security/pod-security-standards/">kubernetes docs</a>, please set a restricted profile that disables NET_RAW on non-trustable pods.</p></blockquote><p>注意事项：</p><p> VXLAN port应仅能被各个节点访问，不能被外部访问</p><table><thead><tr><th>Protocol</th><th>Port</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>TCP</td><td>6443</td><td>K3s agent nodes</td><td>Kubernetes API Server</td></tr><tr><td>UDP</td><td>8472</td><td>K3s server and agent nodes</td><td>Required only for Flannel VXLAN</td></tr><tr><td>UDP</td><td>51820</td><td>K3s server and agent nodes</td><td>Required only for Flannel Wireguard backend</td></tr><tr><td>UDP</td><td>51821</td><td>K3s server and agent nodes</td><td>Required only for Flannel Wireguard backend with IPv6</td></tr><tr><td>TCP</td><td>10250</td><td>K3s server and agent nodes</td><td>Kubelet metrics</td></tr><tr><td>TCP</td><td>2379-2380</td><td>K3s server nodes</td><td>Required only for HA with embedded etcd</td></tr></tbody></table><ol start="5"><li>可以通过<code>--cluster-cidr</code>指定子网范围，但是要注意pod数量，别耗光所有ip</li></ol><h3 id="离线环境准备"><a href="#离线环境准备" class="headerlink" title="离线环境准备"></a>离线环境准备</h3><h4 id="搭建私有仓库-ubuntu20"><a href="#搭建私有仓库-ubuntu20" class="headerlink" title="搭建私有仓库(ubuntu20)"></a>搭建私有仓库(ubuntu20)</h4><ol><li><p>在主节点上安装docker</p><p>说明：直接使用k3s可以不用安装docker，但是建议在一个有网络的机器上安装docker 方便拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 添加密钥</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 2. 添加仓库</span></span><br><span class="line">add-apt-repository \</span><br><span class="line"><span class="string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">stable&quot;</span></span><br><span class="line"><span class="comment"># 3. 安装docker</span></span><br><span class="line">apt install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>启动私有仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br></pre></td></tr></table></figure></li><li><p>配置本地仓库http</p><p>编辑<code>/etc/docker/daemon.json</code></p><p>根据实际ip进行修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;insecure-registries&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;192.168.6.1:5000&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>下载K3s必要镜像</p><p>下载链接：<a href="https://github.com/k3s-io/k3s/releases/download/v1.25.2%2Bk3s1/k3s-airgap-images-amd64.tar.gz">https://github.com/k3s-io/k3s/releases/download/v1.25.2%2Bk3s1/k3s-airgap-images-amd64.tar.gz</a></p></li><li><p>下载ingress-nginx必要镜像（需要代理或者科学）</p><p>或者下载：<a href="https://github.com/HalfCoke/HalfCoke.github.io/releases/download/nginx-ingress/nginx-ingress.tar.gz">https://github.com/HalfCoke/HalfCoke.github.io/releases/download/nginx-ingress/nginx-ingress.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx/nginx-ingress:2.4.1</span><br><span class="line">docker pull docker-registry.nginx.com/nap-dos/app_protect_dos_arb:1.1.0</span><br></pre></td></tr></table></figure></li><li><p>将镜像推送至私有仓库</p><p>根据实际版本修改脚本中的版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PRIVATE_REGISTRY=&quot;192.168.6.1:5000&quot;</span><br><span class="line">docker load -i k3s-airgap-images-amd64.tar.gz</span><br><span class="line">docker load -i nginx-ingress.tar.gz</span><br><span class="line">BUSYBOX=&quot;1.34.1&quot;</span><br><span class="line">HELM=&quot;v0.7.3-build20220613&quot;</span><br><span class="line">TRAEFIK=&quot;2.6.2&quot;</span><br><span class="line">COREDNS=&quot;1.9.1&quot;</span><br><span class="line">KLIPPER_LB=&quot;v0.3.5&quot;</span><br><span class="line">PROVISIONER=&quot;v0.0.21&quot;</span><br><span class="line">METRICS=&quot;v0.5.2&quot;</span><br><span class="line">PAUSE=&quot;3.6&quot;</span><br><span class="line"></span><br><span class="line">INGRESS_NGINX_APP_PROTECT=&quot;1.1.0&quot;</span><br><span class="line">INGRESS_NGINX_CONTROLLER=&quot;2.4.1&quot;</span><br><span class="line"></span><br><span class="line">docker tag rancher/mirrored-library-busybox:$BUSYBOX $PRIVATE_REGISTRY/rancher/mirrored-library-busybox:$BUSYBOX            </span><br><span class="line">docker tag rancher/klipper-helm:$HELM $PRIVATE_REGISTRY/rancher/klipper-helm:$HELM</span><br><span class="line">docker tag rancher/mirrored-library-traefik:$TRAEFIK $PRIVATE_REGISTRY/rancher/mirrored-library-traefik:$TRAEFIK</span><br><span class="line">docker tag rancher/mirrored-coredns-coredns:$COREDNS $PRIVATE_REGISTRY/rancher/mirrored-coredns-coredns:$COREDNS  </span><br><span class="line">docker tag rancher/klipper-lb:$KLIPPER_LB $PRIVATE_REGISTRY/rancher/klipper-lb:$KLIPPER_LB</span><br><span class="line">docker tag rancher/local-path-provisioner:$PROVISIONER $PRIVATE_REGISTRY/rancher/local-path-provisioner:$PROVISIONER</span><br><span class="line">docker tag rancher/mirrored-metrics-server:$METRICS $PRIVATE_REGISTRY/rancher/mirrored-metrics-server:$METRICS</span><br><span class="line">docker tag rancher/mirrored-pause:$PAUSE $PRIVATE_REGISTRY/rancher/mirrored-pause:$PAUSE</span><br><span class="line">docker tag nginx/nginx-ingress:$INGRESS_NGINX_CONTROLLER $PRIVATE_REGISTRY/nginx/nginx-ingress:$INGRESS_NGINX_CONTROLLER</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意下面这个tag的替换，打标记时去掉了docker-registry.nginx.com，这是为了配合k3s私有仓库进行拉取</span></span><br><span class="line">docker tag docker-registry.nginx.com/nap-dos/app_protect_dos_arb:$INGRESS_NGINX_APP_PROTECT $PRIVATE_REGISTRY/nap-dos/app_protect_dos_arb:$INGRESS_NGINX_APP_PROTECT</span><br><span class="line"></span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/mirrored-library-busybox:$BUSYBOX </span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/klipper-helm:$HELM</span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/mirrored-library-traefik:$TRAEFIK</span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/mirrored-coredns-coredns:$COREDNS</span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/klipper-lb:$KLIPPER_LB</span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/local-path-provisioner:$PROVISIONER</span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/mirrored-metrics-server:$METRICS</span><br><span class="line">docker push $PRIVATE_REGISTRY/rancher/mirrored-pause:$PAUSE</span><br><span class="line">docker push $PRIVATE_REGISTRY/nap-dos/app_protect_dos_arb:$INGRESS_NGINX_APP_PROTECT</span><br><span class="line">docker push $PRIVATE_REGISTRY/nginx/nginx-ingress:$INGRESS_NGINX_CONTROLLER</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置k3s私有仓库"><a href="#配置k3s私有仓库" class="headerlink" title="配置k3s私有仓库"></a>配置k3s私有仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/rancher/k3s/</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/rancher/k3s/registries.yaml  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">mirrors:</span></span><br><span class="line"><span class="string">  docker.io:</span></span><br><span class="line"><span class="string">    endpoint:</span></span><br><span class="line"><span class="string">      - &quot;http://192.168.6.1:5000&quot;</span></span><br><span class="line"><span class="string">  docker-registry.nginx.com:</span></span><br><span class="line"><span class="string">    endpoint:</span></span><br><span class="line"><span class="string">      - &quot;http://192.168.6.1:5000&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="下载k3s安装文件及执行文件"><a href="#下载k3s安装文件及执行文件" class="headerlink" title="下载k3s安装文件及执行文件"></a>下载k3s安装文件及执行文件</h4><p>下载链接：<a href="https://github.com/k3s-io/k3s/releases/download/v1.25.2%2Bk3s1/k3s">https://github.com/k3s-io/k3s/releases/download/v1.25.2%2Bk3s1/k3s</a></p><p>下载链接：<a href="https://get.k3s.io./">https://get.k3s.io./</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x k3s</span><br><span class="line"><span class="built_in">chmod</span> +x install.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> k3s /usr/local/bin/</span><br></pre></td></tr></table></figure><h4 id="离线安装ingress-nginx-controller"><a href="#离线安装ingress-nginx-controller" class="headerlink" title="离线安装ingress-nginx-controller"></a>离线安装ingress-nginx-controller</h4><p>官方安装说明：<a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/">https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/</a></p><p>将所需文件存储为<code>ingress-nginx.yml</code></p><p>注意：ingress默认只能进行http(s)代理，为了进行tcp或udp代理，并且将服务端口暴露在宿主机桑，需要对官方文件进行一些调整</p><ol><li>在ingress的DaemonSet中的spec.template.spec中增加<code>hostNetwork: true</code></li><li>在args部分取消<code>- -global-configuration=$(POD_NAMESPACE)/nginx-configuration</code>注释</li></ol><p>可以从这里下载已经修改好的yml，链接：<a href="https://halfcoke.github.io/config/nginx-ingress/nginx-ingress.yml">https://halfcoke.github.io/config/nginx-ingress/nginx-ingress.yml</a></p><p>然后执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ingress-nginx.yml</span><br></pre></td></tr></table></figure><h3 id="单Server"><a href="#单Server" class="headerlink" title="单Server"></a>单Server</h3><p>使用内建etcd安装，后续比较方便升级高可用</p><h4 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTALL_K3S_SKIP_DOWNLOAD=<span class="literal">true</span> INSTALL_K3S_EXEC=<span class="string">&#x27;server --cluster-init --disable traefik&#x27;</span> K3S_TOKEN=FpqAiu2DZgSEyuHHoH83mFrm ./install.sh</span><br></pre></td></tr></table></figure><h4 id="代理安装"><a href="#代理安装" class="headerlink" title="代理安装"></a>代理安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTALL_K3S_SKIP_DOWNLOAD=<span class="literal">true</span> K3S_URL=https://192.168.6.1:6443 K3S_TOKEN=FpqAiu2DZgSEyuHHoH83mFrm ./install.sh</span><br></pre></td></tr></table></figure><h4 id="离线安装ingress-nginx-controller-1"><a href="#离线安装ingress-nginx-controller-1" class="headerlink" title="离线安装ingress-nginx-controller"></a>离线安装ingress-nginx-controller</h4><p>官方安装说明：<a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/">https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/</a></p><p>将所需文件存储为<code>ingress-nginx.yml</code></p><p>注意：ingress默认只能进行http(s)代理，为了进行tcp或udp代理，并且将服务端口暴露在宿主机上，需要对官方文件进行一些调整</p><ol><li>在ingress的DaemonSet中的spec.template.spec中增加<code>hostNetwork: true</code></li><li>在args部分取消<code>- -global-configuration=$(POD_NAMESPACE)/nginx-configuration</code>注释</li></ol><p>可以从这里下载已经修改好的yaml，链接：<a href="https://halfcoke.github.io/config/nginx-ingress/nginx-ingress.yml">https://halfcoke.github.io/config/nginx-ingress/nginx-ingress.yml</a></p><p>然后执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ingress-nginx.yml</span><br></pre></td></tr></table></figure><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>todo…</p><h1 id="简单服务部署"><a href="#简单服务部署" class="headerlink" title="简单服务部署"></a>简单服务部署</h1><h2 id="使用nginx服务进行测试"><a href="#使用nginx服务进行测试" class="headerlink" title="使用nginx服务进行测试"></a>使用nginx服务进行测试</h2><ol><li><p>直接下载nginx服务yaml文件，包含了deployment、service、ingress</p><p>使用<code>kubectl apply -f demo.yml</code>进行部署</p><p>下载链接：<a href="https://halfcoke.github.io/config/nginx-ingress/demo/demo.yml">https://halfcoke.github.io/config/nginx-ingress/demo/demo.yml</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span> <span class="comment"># 告知 Deployment 运行 1 个与该模板匹配的 Pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-demo-container</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-demo-port</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">nginx-port</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-igs</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">abc.test.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">k8s.nginx.org/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">GlobalConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-configuration</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">listeners:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-tcp</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">1234</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>下载TransportServer的yml文件</p><p>【<strong>注意</strong>】这个资源必须单独部署，这里为了将1234端口暴露在宿主机上，将nginx-ingress设置为hostNetwork，<a href="https://halfcoke.github.io/2022/50e64521/#%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85ingress-nginx-controller">上文</a>提到了这个配置。</p><p>使用<code>kubectl apply -f demo-ts.yml</code>部署</p><p>下载链接<a href="https://halfcoke.github.io/config/nginx-ingress/demo/demo-ts.yml">https://halfcoke.github.io/config/nginx-ingress/demo/demo-ts.yml</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须单独创建</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">k8s.nginx.org/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TransportServer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ts</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-tcp</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">upstreams:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-up</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">nginx-service</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">action:</span></span><br><span class="line">    <span class="attr">pass:</span> <span class="string">nginx-up</span></span><br></pre></td></tr></table></figure></li></ol><p>然后通过两种方式可以访问</p><ol><li><p>通过80端口访问，这种方式进行了http代理，即七层代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">&#x27;Host: abc.test.com&#x27;</span> 你的宿主机ip</span><br></pre></td></tr></table></figure></li><li><p>通过1234端口访问，这种方式进行了tcp代理，即四层代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 你的宿主机ip:1234</span><br></pre></td></tr></table></figure></li></ol><h2 id="暴露端口-方法2（不使用hostNetwork）"><a href="#暴露端口-方法2（不使用hostNetwork）" class="headerlink" title="暴露端口-方法2（不使用hostNetwork）"></a>暴露端口-方法2（不使用hostNetwork）</h2><p>这种方法需要修改nginx-ingress 的 daemonSet</p><p>完整的DaemonSet如下，是上文链接<a href="https://halfcoke.github.io/config/nginx-ingress/nginx-ingress.yml%E4%B8%AD%E6%9C%80%E5%90%8E%E4%B8%80%E9%83%A8%E5%88%86%E7%9A%84%E5%86%85%E5%AE%B9">https://halfcoke.github.io/config/nginx-ingress/nginx-ingress.yml中最后一部分的内容</a></p><p>修改说明请见注释</p><p>每次修改后建议先delete再apply，否则可能出现所有端口都暴露在宿主机上（即便没配置hostPort）</p><p>这样，之后如果需要暴露出其他端口，则需要重启DaemoSet，这样可以实现定点暴露端口。</p><p>每次重启只重启该DaemoSet即可，其他的资源不要动，否则集群上所有服务都要重启。</p><p>使用这种方式也可以将默认的80 443端口注释掉，然后通过自定义端口暴露服务。</p><p>这样在上文的nginx-demo文件中，也可以不需要Ingress资源，仅需要GC和TS即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-ingress</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-ingress</span></span><br><span class="line">     <span class="comment">#annotations:</span></span><br><span class="line">       <span class="comment">#prometheus.io/scrape: &quot;true&quot;</span></span><br><span class="line">       <span class="comment">#prometheus.io/port: &quot;9113&quot;</span></span><br><span class="line">       <span class="comment">#prometheus.io/scheme: http</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nginx-ingress</span></span><br><span class="line">      <span class="attr">automountServiceAccountToken:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># hostNetwork: true # 在这个文件中我们对此进行注释</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx/nginx-ingress:2.4.1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx-ingress</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span> <span class="comment"># container端口是容器端口</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">80</span> <span class="comment"># hostPort用来表示是否将容器的端口暴露在宿主机上，理论上可以与容器端口不一致</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">443</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp-test</span> <span class="comment"># 在这里新增1234端口</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">1234</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">1234</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness-port</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">9113</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">         <span class="attr">httpGet:</span></span><br><span class="line">           <span class="attr">path:</span> <span class="string">/nginx-ready</span></span><br><span class="line">           <span class="attr">port:</span> <span class="string">readiness-port</span></span><br><span class="line">         <span class="attr">periodSeconds:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">         <span class="comment">#limits:</span></span><br><span class="line">         <span class="comment">#  cpu: &quot;1&quot;</span></span><br><span class="line">         <span class="comment">#  memory: &quot;1Gi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">101</span> <span class="comment">#nginx</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">drop:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-nginx-configmaps=$(POD_NAMESPACE)/nginx-config</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-global-configuration=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class="line">        <span class="comment"># - -ready-status=false # 这个选项用来是否开启readiness，不开启的话get pod容器一直无法ready（需要通过其他方法，这里不做介绍）</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-nginx-status=true</span> <span class="comment"># 是否开启nginx status服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-nginx-status-allow-cidrs=127.0.0.1,::1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-nginx-status-port=64231</span></span><br><span class="line">        <span class="comment">#- -include-year</span></span><br><span class="line">        <span class="comment">#- -v=3 # Enables extensive logging. Useful for troubleshooting.</span></span><br><span class="line">        <span class="comment">#- -report-ingress-status</span></span><br><span class="line">        <span class="comment">#- -external-service=nginx-ingress</span></span><br><span class="line">        <span class="comment">#- -enable-prometheus-metrics</span></span><br></pre></td></tr></table></figure><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><ol><li>文件挂载</li><li>高可用</li><li>通过ingress进行访问控制</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li>k8s ingress实现http&#x2F;https7层和tcp四层代理，<a href="https://blog.51cto.com/leejia/2497454">https://blog.51cto.com/leejia/2497454</a></li><li>Nginx-ingress，<a href="https://docs.nginx.com/nginx-ingress-controller/">https://docs.nginx.com/nginx-ingress-controller/</a></li><li>k3s文档，<a href="https://docs.k3s.io/">https://docs.k3s.io/</a></li><li>代理tcp udp服务demo，<a href="https://github.com/nginxinc/kubernetes-ingress/tree/v2.4.1/examples/ingress-resources/tcp-udp">https://github.com/nginxinc/kubernetes-ingress/tree/v2.4.1/examples/ingress-resources/tcp-udp</a></li><li>nodeport和hostNetowrk对比，<a href="https://xuxinkun.github.io/2019/06/11/ingress/">https://xuxinkun.github.io/2019/06/11/ingress/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> K3S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> K3S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Let&#39;s Encrypt获取免费的证书</title>
      <link href="/2022/b14aeca0/"/>
      <url>/2022/b14aeca0/</url>
      
        <content type="html"><![CDATA[<h1 id="Let’s-Encrypt简介（摘自官网文档）"><a href="#Let’s-Encrypt简介（摘自官网文档）" class="headerlink" title="Let’s Encrypt简介（摘自官网文档）"></a>Let’s Encrypt简介（摘自官网文档）</h1><p>为了在你的网站上设定HTTPS，你需要从凭证颁发机构(Certificate Authority, CA) 获取凭证，而Let’s Encrypt 就是一个凭证颁发机构。要从Let’s Encrypt 上获得属于你网站的凭证，你必须证明你对域名的控制权。你可以在你的主机上运行使用<a href="https://tools.ietf.org/html/rfc8555">ACME 协议</a>的软件，来获取Let’s Encrypt 的凭证。</p><p>Let’s Encrypt 和 <a href="https://tools.ietf.org/html/rfc8555">ACME 协议</a>的目标是使配置能够自动获取受信任浏览器的证书的 HTTPS 服务器成为可能。 这是通过在 web 服务器上运行证书管理代理来完成的。</p><h2 id="域名认证"><a href="#域名认证" class="headerlink" title="域名认证"></a>域名认证</h2><p>Let’s Encrypt 通过公钥识别服务器管理员。 证书管理软件首次与 Let’s Encrypt 交互时，会生成新的密钥对，并向 Let’s Encrypt CA 证明服务器控制着一个或多个域名。 这类似于创建帐户和向该帐户添加域名的传统证书颁发流程。</p><h2 id="ACME客户端"><a href="#ACME客户端" class="headerlink" title="ACME客户端"></a>ACME客户端</h2><p>Let’s Encrypt 使用 ACME 协议来验证您对给定域名的控制权并向您颁发证书。 要获得 Let’s Encrypt 证书，您需要选择一个要使用的 ACME 客户端软件。</p><p>我们建议大多数人从 <a href="https://certbot.eff.org/">Certbot</a> 客户端开始。 它既可以只为您获取证书，也可以帮助您获取并安装证书。 它易于使用，适用于许多操作系统，并且具有出色的文档。</p><h1 id="Certbot简介"><a href="#Certbot简介" class="headerlink" title="Certbot简介"></a>Certbot简介</h1><p>Cerbot是免费开源的工具，可以使用Let’s Encrypt使网站开启HTTPS</p><h1 id="ACME-sh"><a href="#ACME-sh" class="headerlink" title="ACME.sh"></a>ACME.sh</h1><p><strong>acme.sh</strong>实现了<code>acme</code>协议，可以从letsencrypt生成免费的证书。</p><h1 id="基于ACME-sh与DNSPOD实现自动生成证书"><a href="#基于ACME-sh与DNSPOD实现自动生成证书" class="headerlink" title="基于ACME.sh与DNSPOD实现自动生成证书"></a>基于ACME.sh与DNSPOD实现自动生成证书</h1><blockquote><p>acme.sh目前支持cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等解析商，参考<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p><p>下文以DNSPOD为例</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="获取DNSPOD的id与key"><a href="#获取DNSPOD的id与key" class="headerlink" title="获取DNSPOD的id与key"></a>获取DNSPOD的id与key</h3><ol><li><p>登陆DNSpod</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221003151659511.png"></p></li><li><p>点击API密钥</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221003151747649.png"></p><ol start="3"><li><p>点击Dnspod token，创建密钥</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221003151917001.png"></p></li><li><p>按要求验证后输入名称，保存ID与Token</p></li></ol><p>至此获得Dnspod的token</p></li></ol><h3 id="安装acme-sh（仅在主机部署时使用）"><a href="#安装acme-sh（仅在主机部署时使用）" class="headerlink" title="安装acme.sh（仅在主机部署时使用）"></a>安装acme.sh（仅在主机部署时使用）</h3><p>参考acme.sh文档<a href="https://github.com/acmesh-official/acme.sh/wiki/How-to-install%E5%8F%AF%E4%BB%A5%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC">https://github.com/acmesh-official/acme.sh/wiki/How-to-install可以手动安装脚本</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./acme.sh --install  \</span><br><span class="line">--home ~/myacme \</span><br><span class="line">--config-home ~/myacme/data \</span><br><span class="line">--cert-home  ~/mycerts \</span><br><span class="line">--accountemail  <span class="string">&quot;my@example.com&quot;</span> \</span><br><span class="line">--accountkey  ~/myaccount.key \</span><br><span class="line">--accountconf ~/myaccount.conf \</span><br><span class="line">--useragent  <span class="string">&quot;this is my client.&quot;</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>--home</code>参数是自定义的安装路径，默认：<code>~/.acme.sh</code></li><li><code>--config-home</code>是写入配置的文件夹，包括证书、配置等全部文件，默认是<code>--home</code></li><li><code>--cert-home</code>是自定义的路径保存申请的证书，默认在<code>--config-home</code>中</li><li><code>--accountemail</code>是用来向Let’s Encrypt申请证书时所用的邮箱，将在这里收到更新提醒</li><li><code>--accountkey</code>是用来存储用户私钥的文件，默认保存在<code>--config-home</code>中</li><li><code>--user-agent</code>是发送至Let’s Encrypt的<code>user-agent</code>头部的值</li><li><code>--nocron</code>表示不进行自动调度</li></ul><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>使用下面的命令可以生成证书，这里使用了dnspod的api，更多api配置请参考<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DP_Id=<span class="string">&quot;1234&quot;</span></span><br><span class="line"><span class="built_in">export</span> DP_Key=<span class="string">&quot;sADDsdasdgdsf&quot;</span></span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --issue --dns dns_dp -d *.example.com</span><br></pre></td></tr></table></figure><p><code>DP_ID</code>和<code>DP_Key</code>会被保存在<code>~/.acme.sh/account.conf</code></p><h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>acme.sh不建议直接将nginx&#x2F;apache的配置路径指定为acme.sh证书安装的路径</p><blockquote><p> 注意, 默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>, 请不要直接使用此目录下的文件, 例如: 不要直接让 nginx&#x2F;apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p></blockquote><h3 id="Case1-主机已有Nginx"><a href="#Case1-主机已有Nginx" class="headerlink" title="Case1: 主机已有Nginx"></a>Case1: 主机已有Nginx</h3><p>已有Nginx时可直接使用acme.sh脚本对证书进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     <span class="string">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure><p>(一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p><p>Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 <a href="https://www.ssllabs.com/ssltest/">SSL Labs</a> 的测试会报 <code>Chain issues Incomplete</code> 错误。</p><p><code>--install-cert</code>命令可以携带很多参数, 来指定目标文件. 并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.</p><p>详细参数请参考: <a href="https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc">https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc</a></p><p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p><h3 id="Case2-主机没有Nginx，仅用于生成证书，手动复制至其他位置"><a href="#Case2-主机没有Nginx，仅用于生成证书，手动复制至其他位置" class="headerlink" title="Case2: 主机没有Nginx，仅用于生成证书，手动复制至其他位置"></a>Case2: 主机没有Nginx，仅用于生成证书，手动复制至其他位置</h3><p>这里使用docker来实现自动生成证书至指定路径，需要将docker的生成路径暴露出来。</p><p>acme.sh本身也提供了docker方式，acme.sh提供的docker方式应该能处理大多数场景<a href="https://github.com/acmesh-official/acme.sh/wiki/Run-acme.sh-in-docker">https://github.com/acmesh-official/acme.sh/wiki/Run-acme.sh-in-docker</a></p><p>这里主要实现的是通过docker获取证书，然后将证书输出到指定文件夹中</p><p>Dockerfile相关文件参考：<a href="https://github.com/HalfCoke/open_action/tree/main/docker/acme.sh">https://github.com/HalfCoke/open_action/tree/main/docker/acme.sh</a></p><p>也可以直接使用<code>docker pull halfcoke/acme.sh</code>这个镜像：<a href="https://hub.docker.com/repository/docker/halfcoke/acme.sh">https://hub.docker.com/repository/docker/halfcoke/acme.sh</a></p><p>镜像的使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e EMAIL=abc@example.com \</span><br><span class="line">-e DOMAINS=<span class="string">&quot;a.example.com,b.example.com,*.c.example.com&quot;</span> \</span><br><span class="line">-e API=<span class="string">&quot;DNSPOD;dpid,dpkey&quot;</span> \</span><br><span class="line">-v /path/to/ssl:/ssl</span><br><span class="line">halfcoke/acme.sh</span><br></pre></td></tr></table></figure><p>目前仅支持DNSPOD api，后面会逐渐增加，或者自行改造也比较容易。</p><p>向nginx中配置证书，使用这两个文件即可</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20221006173103336.png"></p><h3 id="Case3-todo"><a href="#Case3-todo" class="headerlink" title="Case3: todo"></a>Case3: todo</h3><p>逐渐完善其他场景…..</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li>Let’s Encrypt 官网：<a href="https://letsencrypt.org/zh-cn/how-it-works/">https://letsencrypt.org/zh-cn/how-it-works/</a></li><li>Cerbot官网：<a href="https://certbot.eff.org/">https://certbot.eff.org/</a></li><li>ACME.sh：<a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 系统工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
            <tag> 工具 </tag>
            
            <tag> 证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用iptables管理docker开放的端口？</title>
      <link href="/2022/27bb66e8/"/>
      <url>/2022/27bb66e8/</url>
      
        <content type="html"><![CDATA[<h1 id="如何利用iptables管理docker开放的端口？"><a href="#如何利用iptables管理docker开放的端口？" class="headerlink" title="如何利用iptables管理docker开放的端口？"></a>如何利用iptables管理docker开放的端口？</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统使用的ubuntu20.04.3，全新安装的环境</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>ubuntu20使用的ufw，先把这个停止，这次测试主要使用iptables-services和docker，关闭其余防火墙的影响</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20220918145446619.png"></p><h4 id="安装iptables"><a href="#安装iptables" class="headerlink" title="安装iptables"></a>安装iptables</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认已经安装</span></span><br><span class="line">apt install iptables</span><br><span class="line"><span class="comment"># centos需要安装iptables-services</span></span><br><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure><h4 id="初始配置iptables"><a href="#初始配置iptables" class="headerlink" title="初始配置iptables"></a>初始配置iptables</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建存放配置文件的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /etc/sysconfig</span><br><span class="line"><span class="comment"># 创建iptables配置文件</span></span><br><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>初始化配置文件内容如下（顺序有关）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 使用filter表</span><br><span class="line">*filter</span><br><span class="line"># 下面三条内容定义了内建的INPUT、FORWAARD、ACCEPT链</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line"># 允许本地访问</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line"># 下面这条不配置也可以，因为不限制数据包流出</span><br><span class="line">-A OUTPUT -o lo -j ACCEPT</span><br><span class="line"># 禁止icmp探测</span><br><span class="line">-A INPUT -p icmp -j REJECT</span><br><span class="line"># -m state --state ESTABLISHED,RELATED这个条件表示所有处于ESTABLISHED或者RELATED状态的包，策略都是接受的。</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"># -m state --state NEW 这个条件是当connection的状态为初始连接(NEW)时候的策略。</span><br><span class="line"># 22端口是默认ssh端口，不开启容易无法连接</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m multiport --dports 22,80 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># 禁止其他访问</span><br><span class="line">-A INPUT -j DROP</span><br><span class="line">-A FORWARD -j DROP</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt update &amp;&amp; \</span><br><span class="line">apt install -y \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release &amp;&amp; \</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/apt/keyrings &amp;&amp; \</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg &amp;&amp; \</span><br><span class="line">apt update &amp;&amp; \</span><br><span class="line">apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 &amp;&amp; \</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo &amp;&amp; \</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置镜像源，并启动docker</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker &amp;&amp; <span class="built_in">touch</span> /etc/docker/daemon.json &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;registry-mirrors&quot;:[&quot;https://hub-mirror.c.163.com&quot;]&#x27;</span> &gt; /etc/docker/daemon.json &amp;&amp; \</span><br><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="防火墙与docker配置"><a href="#防火墙与docker配置" class="headerlink" title="防火墙与docker配置"></a>防火墙与docker配置</h2><p>使用iptables-save 导出当前防火墙配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-save &gt; iptables.save</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 08:16:29 2022</span></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [39:4940]</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [1:40]</span><br><span class="line">:POSTROUTING ACCEPT [1:40]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A DOCKER -i docker0 -j RETURN</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 08:16:29 2022</span></span><br><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 08:16:29 2022</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [122:19744]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-1 - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-2 - [0:0]</span><br><span class="line">:DOCKER-USER - [0:0]</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m multiport --dports 22,80 -j ACCEPT</span><br><span class="line">-A INPUT -j DROP</span><br><span class="line">-A FORWARD -j DOCKER-USER</span><br><span class="line">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -o docker0 -j DOCKER</span><br><span class="line">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -j DROP</span><br><span class="line">-A OUTPUT -o lo -j ACCEPT</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class="line">-A DOCKER-USER -j RETURN</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 08:16:29 2022</span></span><br></pre></td></tr></table></figure><p>可以看到docker在filter表中新增了几个链</p><h3 id="使用docker启动nginx"><a href="#使用docker启动nginx" class="headerlink" title="使用docker启动nginx"></a>使用docker启动nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 nginx</span><br></pre></td></tr></table></figure><p>此时服务可以直接访问</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20220918162025557.png"></p><p>此时防火墙的配置文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 08:23:51 2022</span></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [25:2945]</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">:POSTROUTING ACCEPT [1:64]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line"><span class="comment"># 下面这条为新增#############################################################################</span></span><br><span class="line">-A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 80 -j MASQUERADE</span><br><span class="line">-A DOCKER -i docker0 -j RETURN</span><br><span class="line"><span class="comment"># 下面这条为新增#############################################################################</span></span><br><span class="line">-A DOCKER ! -i docker0 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 172.17.0.2:80</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 08:23:51 2022</span></span><br><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 08:23:51 2022</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [36:6464]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-1 - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-2 - [0:0]</span><br><span class="line">:DOCKER-USER - [0:0]</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m multiport --dports 22,80 -j ACCEPT</span><br><span class="line">-A INPUT -j DROP</span><br><span class="line">-A FORWARD -j DOCKER-USER</span><br><span class="line">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -o docker0 -j DOCKER</span><br><span class="line">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -j DROP</span><br><span class="line">-A OUTPUT -o lo -j ACCEPT</span><br><span class="line"><span class="comment"># 下面这条为新增#############################################################################</span></span><br><span class="line">-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class="line">-A DOCKER-USER -j RETURN</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 08:23:51 2022</span></span><br></pre></td></tr></table></figure><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>如果是在本机上的nginx，我们可以直接通过下面的命令进行控制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 4 -p tcp -m tcp --dport 8080 -j DROP</span><br></pre></td></tr></table></figure><p>但是现在发现，使用docker启动的服务无法这么调整了</p><p>如果要对docker中的服务进行限制，需要在docker相关的链中进行操作</p><h4 id="数据包流转跟踪"><a href="#数据包流转跟踪" class="headerlink" title="数据包流转跟踪"></a>数据包流转跟踪</h4><p>使用docker启动了两个nginx，分别映射宿主机的8080端口和8081端口，下面是配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 08:45:59 2022</span></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [5:636]</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">:POSTROUTING ACCEPT [1:64]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 80 -j MASQUERADE</span><br><span class="line">-A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 80 -j LOG --log-prefix <span class="string">&quot;iptables-postrouting: &quot;</span></span><br><span class="line">-A POSTROUTING -s 172.17.0.3/32 -d 172.17.0.3/32 -p tcp -m tcp --dport 80 -j MASQUERADE</span><br><span class="line">-A DOCKER -i docker0 -j RETURN</span><br><span class="line">-A DOCKER ! -i docker0 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 172.17.0.2:80</span><br><span class="line"></span><br><span class="line">-A DOCKER ! -i docker0 -p tcp -m tcp --dport 8081 -j LOG --log-prefix <span class="string">&quot;iptables-docker: &quot;</span></span><br><span class="line">-A DOCKER ! -i docker0 -p tcp -m tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:80</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 08:45:59 2022</span></span><br><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 08:45:59 2022</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [59:6764]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-1 - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-2 - [0:0]</span><br><span class="line">:DOCKER-USER - [0:0]</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 8080 -j DROP</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m multiport --dports 22,80 -j ACCEPT</span><br><span class="line">-A INPUT -j DROP</span><br><span class="line">-A FORWARD -j LOG --log-prefix <span class="string">&quot;iptables-forward: &quot;</span></span><br><span class="line">-A FORWARD -j DOCKER-USER</span><br><span class="line">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -o docker0 -j DOCKER</span><br><span class="line">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -j DROP</span><br><span class="line">-A OUTPUT -o lo -j ACCEPT</span><br><span class="line">-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j LOG --log-prefix <span class="string">&quot;iptables-filter-docker: &quot;</span></span><br><span class="line">-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class="line">-A DOCKER-USER -j LOG --log-prefix <span class="string">&quot;iptables-docker-user: &quot;</span></span><br><span class="line">-A DOCKER-USER -j RETURN</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 08:45:59 2022</span></span><br></pre></td></tr></table></figure><p>下面是访问8081端口，iptables的完整日志</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20220918173848238.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Sep 18 09:33:28 server kernel: [ 9650.758973] iptables-docker: IN=ens33 OUT= MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=192.168.6.110 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=56563 DPT=8081 WINDOW=65535 RES=0x00 SYN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.759027] iptables-forward: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=65535 RES=0x00 SYN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.759031] iptables-docker-user: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=65535 RES=0x00 SYN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.759036] iptables-filter-docker: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=65535 RES=0x00 SYN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.759082] iptables-forward: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=65160 RES=0x00 ACK SYN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.759084] iptables-docker-user: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=65160 RES=0x00 ACK SYN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.766202] iptables-forward: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2058 RES=0x00 ACK URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.766233] iptables-docker-user: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2058 RES=0x00 ACK URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.766920] iptables-forward: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=157 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2058 RES=0x00 ACK PSH URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.766943] iptables-docker-user: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=157 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2058 RES=0x00 ACK PSH URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.766983] iptables-forward: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=46071 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.766986] iptables-docker-user: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=46071 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.767108] iptables-forward: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=290 TOS=0x00 PREC=0x00 TTL=63 ID=46072 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK PSH URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.767111] iptables-docker-user: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=290 TOS=0x00 PREC=0x00 TTL=63 ID=46072 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK PSH URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.767237] iptables-forward: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=667 TOS=0x00 PREC=0x00 TTL=63 ID=46073 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK PSH URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.767239] iptables-docker-user: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=667 TOS=0x00 PREC=0x00 TTL=63 ID=46073 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK PSH URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.773906] iptables-forward: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2045 RES=0x00 ACK URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.773959] iptables-docker-user: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2045 RES=0x00 ACK URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.774877] iptables-forward: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2048 RES=0x00 ACK FIN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.774926] iptables-docker-user: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2048 RES=0x00 ACK FIN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.775065] iptables-forward: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=46074 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK FIN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.775069] iptables-docker-user: IN=docker0 OUT=ens33 PHYSIN=vethd96fc82 MAC=02:42:46:22:17:a8:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=192.168.6.150 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=46074 DF PROTO=TCP SPT=80 DPT=56563 WINDOW=509 RES=0x00 ACK FIN URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.780061] iptables-forward: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2048 RES=0x00 ACK URGP=0 </span><br><span class="line">Sep 18 09:33:28 server kernel: [ 9650.780108] iptables-docker-user: IN=ens33 OUT=docker0 MAC=00:0c:29:1c:8e:65:b0:be:83:49:90:a2:08:00 SRC=192.168.6.150 DST=172.17.0.3 LEN=52 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=56563 DPT=80 WINDOW=2048 RES=0x00 ACK URGP=0</span><br></pre></td></tr></table></figure><p>这里面值得注意的是：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20220918215811639-20220918220032983.png"></p><p>因为源ip一直不会变化，所以如果要限定源ip访问，直接执行如下命令：</p><p>这也是官方建议的方式，编辑DOCKER-USER链</p><p><a href="https://docs.docker.com/network/iptables/">https://docs.docker.com/network/iptables/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁止除192.168.6.1 以外的主机访问docker上的服务</span></span><br><span class="line">iptables -I DOCKER-USER ! -s 192.168.6.1 -j DROP</span><br></pre></td></tr></table></figure><p>但是如果我只想禁止外部的端口访问，则需要操作nat表，在进行地址转换前就进行拦截</p><p>只要访问主机docker启动的的8081端口，就会被拦截</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁止访问8081端口</span></span><br><span class="line">iptables -t nat -I DOCKER 1 -p tcp -m tcp --dport 8081 -j RETURN</span><br></pre></td></tr></table></figure><p>最终配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 14:08:01 2022</span></span><br><span class="line">*mangle</span><br><span class="line">:PREROUTING ACCEPT [4907:504306]</span><br><span class="line">:INPUT ACCEPT [4826:493232]</span><br><span class="line">:FORWARD ACCEPT [81:11074]</span><br><span class="line">:OUTPUT ACCEPT [2198:463332]</span><br><span class="line">:POSTROUTING ACCEPT [2279:474406]</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 14:08:01 2022</span></span><br><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 14:08:01 2022</span></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [1376:178830]</span><br><span class="line">:INPUT ACCEPT [2:264]</span><br><span class="line">:OUTPUT ACCEPT [3:216]</span><br><span class="line">:POSTROUTING ACCEPT [5:344]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 80 -j MASQUERADE</span><br><span class="line">-A POSTROUTING -s 172.17.0.3/32 -d 172.17.0.3/32 -p tcp -m tcp --dport 80 -j MASQUERADE</span><br><span class="line">-A DOCKER -i docker0 -j RETURN</span><br><span class="line">-A DOCKER -p tcp -m tcp --dport 8081 -j RETURN</span><br><span class="line">-A DOCKER ! -i docker0 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 172.17.0.2:80</span><br><span class="line">-A DOCKER ! -i docker0 -p tcp -m tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:80</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 14:08:01 2022</span></span><br><span class="line"><span class="comment"># Generated by iptables-save v1.8.4 on Sun Sep 18 14:08:01 2022</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [32:3760]</span><br><span class="line">:DOCKER - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-1 - [0:0]</span><br><span class="line">:DOCKER-ISOLATION-STAGE-2 - [0:0]</span><br><span class="line">:DOCKER-USER - [0:0]</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m multiport --dports 22 -j ACCEPT</span><br><span class="line">-A INPUT -j DROP</span><br><span class="line">-A FORWARD -j DOCKER-USER</span><br><span class="line">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -o docker0 -j DOCKER</span><br><span class="line">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -j DROP</span><br><span class="line">-A OUTPUT -o lo -j ACCEPT</span><br><span class="line">-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class="line">-A DOCKER-USER -j RETURN</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Sun Sep 18 14:08:01 2022</span></span><br></pre></td></tr></table></figure><h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><p>对于docker服务，如果对外映射的端口与容器内部端口相同的情况下，限制白名单ip访问指定端口，可以如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只能使用192.168.6.1访问6379端口，其余ip和端口均不可以，这时6379端口是容器端口</span></span><br><span class="line">iptables -I DOCKER-USER ! -s 192.168.6.1 ! -p tcp ! --dport 6379 -j DROP</span><br></pre></td></tr></table></figure><p>如果要限制外部能够访问的docker服务，即仅开放指定端口的服务（宿主机端口），使用如下命令配置</p><p>如果在宿主机上启动nginx，监听8081端口，这种方式不会阻止访问，会根据filter表的INPUT规则进行判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁止访问8081端口</span></span><br><span class="line">iptables -t nat -I DOCKER 1 -p tcp -m tcp --dport 8081 -j RETURN</span><br></pre></td></tr></table></figure><p>但是这种方式，重启docker后就会消失，对DOCKER的编辑无法保存，对DOCKER-USER的编辑可以保存</p><p>不过根据上面的描述，我们可以在nat表的PREROUTING链增加规则，重启后可以保存，也能达到我们要的目的</p><p>这种方式需要配合INPUT链一起使用，确保INPUT链中也禁止访问8081端口才会生效</p><p>如果INPUT中允许8081端口是ACCEPT，数据包也会正常到达，只不过此时虽然包中的原IP还是客户端IP，但在nginx中看到的访问ip是docker0这个接口的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁止访问8081端口</span></span><br><span class="line">iptables -t nat -I PREROUTING -p tcp -m tcp --dport 8081 -j RETURN</span><br></pre></td></tr></table></figure><p>因此，按这个思路，如果要允许仅192.168.6.0网段可以访问5000端口（容器内外端口相同），有如下两种配置方式：</p><ol><li><p>使用docker-user链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I DOCKER-USER ! -s 192.168.6.0/24 -p tcp -m tcp --dport 5000 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>使用nat表prerouting链，此时需要确保filter表的input链禁止访问5000端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I PREROUTING -p tcp -m tpc --dport 5000 -j RETURN</span><br></pre></td></tr></table></figure></li></ol><p>如果容器内外映射的端口不同，则使用nat表的prerouting链实现，可以持久化。</p><p>或者使用nat表的DOCKER链实现，不能持久化，docker重启后规则会消失</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>重新整理文档逻辑</li><li>docker swarm模式下，对端口或ip的限制</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/ggjucheng/archive/2012/08/19/2646466.html">https://www.cnblogs.com/ggjucheng/archive/2012/08/19/2646466.html</a> – iptables简介</li><li><a href="https://blog.csdn.net/wsclinux/article/details/53256494">https://blog.csdn.net/wsclinux/article/details/53256494</a> – return语句</li><li><a href="https://blog.csdn.net/stonesharp/article/details/26495667">https://blog.csdn.net/stonesharp/article/details/26495667</a> –表的优先级</li><li><a href="https://blog.csdn.net/beeworkshop/article/details/114278379">https://blog.csdn.net/beeworkshop/article/details/114278379</a> –日志配置(ubuntu20 在&#x2F;etc&#x2F;sysctl.d下新建文件，使用systemctl restart syslog使配置生效)</li><li><a href="https://docs.docker.com/network/iptables/">https://docs.docker.com/network/iptables/</a> –docker官网说明</li><li><a href="https://www.jianshu.com/p/586da7c8fd42">https://www.jianshu.com/p/586da7c8fd42</a> –iptables常用参数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS M1 Python 使用Oracle数据库｜安装Oracle 客户端｜安装cx_oracle包</title>
      <link href="/2022/88b111d7/"/>
      <url>/2022/88b111d7/</url>
      
        <content type="html"><![CDATA[<h2 id="安装rosetta2（可选）"><a href="#安装rosetta2（可选）" class="headerlink" title="安装rosetta2（可选）"></a>安装rosetta2（可选）</h2><p>这是一个将x86程序翻译至m1的软件</p><p>直接安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/softwareupdate --install-rosetta</span><br></pre></td></tr></table></figure><h2 id="安装x86-64-brew（可选）"><a href="#安装x86-64-brew（可选）" class="headerlink" title="安装x86_64 brew（可选）"></a>安装x86_64 brew（可选）</h2><blockquote><p>为了安装其他x86架构的软件方便，此次不安装也可以</p></blockquote><h3 id="ARM版brew安装"><a href="#ARM版brew安装" class="headerlink" title="ARM版brew安装"></a>ARM版brew安装</h3><ul><li><p>访问官网：<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></p></li><li><p>使用命令安装即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="X86版本-brew"><a href="#X86版本-brew" class="headerlink" title="X86版本 brew"></a>X86版本 brew</h3><p>在命令前增加<code>arch -x86_64</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch -x86_64 /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure><h3 id="多版本共存"><a href="#多版本共存" class="headerlink" title="多版本共存"></a>多版本共存</h3><p>在 <code>~/.zprofile</code>文件中添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> abrew=<span class="string">&#x27;arch -arm64 /opt/homebrew/bin/brew&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ibrew=<span class="string">&#x27;arch -x86_64 /usr/local/bin/brew&#x27;</span></span><br></pre></td></tr></table></figure><p>其中，<code>abrew</code>和<code>ibrew</code>这两个名字可变，这样一个是运行arm版本，一个是运行x86版本</p><p>执行<code>source ~/.zprofile</code>在当前终端中生效</p><h2 id="安装x86-64-Anaconda"><a href="#安装x86-64-Anaconda" class="headerlink" title="安装x86_64 Anaconda"></a>安装x86_64 Anaconda</h2><p>多版本的anaconda共存<strong>初步尝试</strong>后会有问题，如果之前安装过arm版本的anaconda，如无特殊需求，最好卸载，直接安装x86版本。</p><p><strong>如果之前配置过复杂的python环境，谨慎操作</strong></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>访问官网：<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p></li><li><p>下载x86版本的安装文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -o https://repo.anaconda.com/archive/Anaconda3-2022.05-MacOSX-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p>直接安装，安装开始的时候会有提醒安装的是x86版本，直接确认即可</p></li></ul><h3 id="创建python环境"><a href="#创建python环境" class="headerlink" title="创建python环境"></a>创建python环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py37_x86 python=3.7</span><br></pre></td></tr></table></figure><p>arm版本能够安装的python版本最低是3.8</p><p>只要能创建3.7的环境就说明安装应该没问题</p><h2 id="安装cx-oracle及oracle-client"><a href="#安装cx-oracle及oracle-client" class="headerlink" title="安装cx_oracle及oracle client"></a>安装cx_oracle及oracle client</h2><h3 id="安装cx-oracle"><a href="#安装cx-oracle" class="headerlink" title="安装cx_oracle"></a>安装cx_oracle</h3><ul><li><p>激活python环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate py37_x86</span><br></pre></td></tr></table></figure></li><li><p>使用pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cx_oracle</span><br></pre></td></tr></table></figure></li></ul><p>安装后无法直接使用，需要下载oracle官网上的一些安装包</p><h3 id="安装oracle-client"><a href="#安装oracle-client" class="headerlink" title="安装oracle client"></a>安装oracle client</h3><ul><li><p>访问下载页：<a href="https://www.oracle.com/database/technologies/instant-client/macos-intel-x86-downloads.html">https://www.oracle.com/database/technologies/instant-client/macos-intel-x86-downloads.html</a></p></li><li><p>下载Basic Package (ZIP)、SQL*Plus Package (ZIP)、SDK Package (ZIP)三个包</p></li><li><p>将这三个包解压至相同路径，解压完成后就是这些文件</p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20220910112749749.png" alt="image-20220910112749749" style="zoom: 33%;" /></li><li><p>配置环境变量，编辑<code>~/.zprofile</code>，根据实际情况修改自己的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/Users/halfcoke/oracle_client/instantclient_19_8:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=/Users/halfcoke/oracle_client/instantclient_19_8</span><br><span class="line"><span class="built_in">export</span> DYLD_LIBRARY_PATH=/Users/halfcoke/oracle_client/instantclient_19_8</span><br><span class="line"><span class="built_in">export</span> OCI_LIB_DIR=/Users/halfcoke/oracle_client/instantclient_19_8</span><br><span class="line"><span class="built_in">export</span> OCI_INC_DIR=/Users/halfcoke/oracle_client/instantclient_19_8/sdk/include</span><br></pre></td></tr></table></figure></li></ul><p>在这之后就可以在python中导入cx_oracle使用了，首次运行会弹出“macOS 无法验证此app”的问题</p><p>打开<strong>系统偏好设置&gt;安全性与隐私&gt;通用</strong>，这时候会有“仍然允许”的按钮，点击即可，应该会有多个，多点几次就可以了，下次运行不会再出现了。</p><p>图片是在网上找的图，应用名称可能会不一样，用作示意。</p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21oc3N6bQ==,size_16,color_FFFFFF,t_70.jpeg" alt="img" style="zoom:33%;" /><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://developers.ascendcorp.com/how-to-install-oracle-instant-client-on-apple-silicon-m1-24b67f2dc743">https://developers.ascendcorp.com/how-to-install-oracle-instant-client-on-apple-silicon-m1-24b67f2dc743</a></li><li><a href="https://zhuanlan.zhihu.com/p/341831809">https://zhuanlan.zhihu.com/p/341831809</a></li><li><a href="https://www.macjb.com/article/229012.html">https://www.macjb.com/article/229012.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境部署 </tag>
            
            <tag> mac </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESXi镜像自定义(集成网卡驱动)及硬盘分区</title>
      <link href="/2021/ef096570/"/>
      <url>/2021/ef096570/</url>
      
        <content type="html"><![CDATA[<h1 id="ESXi镜像自定义-集成网卡驱动-及硬盘分区"><a href="#ESXi镜像自定义-集成网卡驱动-及硬盘分区" class="headerlink" title="ESXi镜像自定义(集成网卡驱动)及硬盘分区"></a>ESXi镜像自定义(集成网卡驱动)及硬盘分区</h1><p>安装ESXi至物理机时，需要提前查看硬件兼容列表，此次安装时发现ESXi原生没有RTL-r8168网卡驱动，需要将网卡驱动打包至ESXi镜像中。</p><p>目前(2021-11-20)尝试过后，ESXi7.0暂无法使用该网卡(r8168)</p><h2 id="ESXi镜像自定义"><a href="#ESXi镜像自定义" class="headerlink" title="ESXi镜像自定义"></a>ESXi镜像自定义</h2><p>ESXi镜像自定义有两种方式，一是使用Powershell脚本安装，另一种是自己使用命令打包镜像。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="PowerCLI安装"><a href="#PowerCLI安装" class="headerlink" title="PowerCLI安装"></a>PowerCLI安装</h4><p>当前版本VMware Power CLI安装较为容易，官网链接：<a href="https://developer.vmware.com/powercli">https://developer.vmware.com/powercli</a></p><p><strong>step1：</strong> 使用管理员身份打开powershell</p><p><strong>step2：</strong>粘贴<code>Install-Module -Name VMware.PowerCLI</code>然后回车</p><h4 id="ESXi官方镜像文件准备（脚本安装时可选）"><a href="#ESXi官方镜像文件准备（脚本安装时可选）" class="headerlink" title="ESXi官方镜像文件准备（脚本安装时可选）"></a>ESXi官方镜像文件准备（脚本安装时可选）</h4><p>自定义ESXi镜像时，不能直接使用iso文件，需要使用<strong>Offline Bundle</strong>文件，点击<a href="https://customerconnect.vmware.com/downloads/info/slug/datacenter_cloud_infrastructure/vmware_vsphere/6_7">官方下载链接</a>，或者访问我的<a href="https://github.com/HalfCoke/custom-vmware-exsi/raw/main/esxi/ESXi670-201912001.zip">下载链接</a></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117820.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117696.png"></p><h4 id="网卡驱动准备-以r8168为例"><a href="#网卡驱动准备-以r8168为例" class="headerlink" title="网卡驱动准备(以r8168为例)"></a>网卡驱动准备(以r8168为例)</h4><p><a href="https://vibsdepot.v-front.de/wiki/index.php/Net55-r8168">下载</a>网卡驱动，vib格式在使用脚本打包的时候会用到，Offline Bundle格式在使用命令行打包时会用到</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117630.png"></p><p>在当前路径新建文件夹<code>drivers</code>，将vib格式的网卡驱动移动进文件夹</p><p>至此，环境准备工作完成</p><h3 id="自定义镜像打包"><a href="#自定义镜像打包" class="headerlink" title="自定义镜像打包"></a>自定义镜像打包</h3><h4 id="使用脚本方式打包"><a href="#使用脚本方式打包" class="headerlink" title="使用脚本方式打包"></a>使用脚本方式打包</h4><ol><li><p>纯离线方式（推荐）</p><p> <strong>Step1：</strong> 在<code>https://github.com/VFrontDe/ESXi-Customizer-PS</code>下载最新的release版本的脚本(ps1文件就是powershell脚本)，并将脚本放入ESXi镜像文件所在的目录</p><p> <strong>Step2：</strong>运行脚本</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\ESXi<span class="literal">-Customizer-PS</span>.ps1 <span class="literal">-izip</span> ESXi670<span class="literal">-201912001</span>.zip <span class="literal">-pkgDir</span> .\drivers\</span><br></pre></td></tr></table></figure></li><li><p>在线方式</p><p><strong>Step1：</strong> 在<code>https://github.com/VFrontDe/ESXi-Customizer-PS</code>下载最新的release版本的脚本(ps1文件就是powershell脚本)</p><p><strong>Step2：</strong>直接运行<code>.\ESXi-Customizer-PS.ps1 -v67 -vft -load net55-r8168</code></p><p>这种方式理论上应该是可以的，但是实际执行时总会出现错误，使用第一种离线方式打包成功了</p></li></ol><h4 id="命令行自行打包"><a href="#命令行自行打包" class="headerlink" title="命令行自行打包"></a>命令行自行打包</h4><p><strong>Step1：</strong>将之前下载的zip文件添加到工作空间中，执行<code>add-esxsoftwaredepot .\ESXi670-201912001.zip</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117070.png"></p><p><strong>Step2：</strong>检查当前的<code>Acceptance Level</code>，执行<code>get-esximageprofile</code>，接下来需要修改<code>Acceptance Level</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117003.png"></p><p><strong>Step3：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">new-esximageprofile</span> <span class="literal">-cloneprofile</span> <span class="string">&quot;ESXi-6.7.0-20191204001-standard&quot;</span> <span class="literal">-name</span> <span class="string">&quot;ESXi-6.7.0-custom&quot;</span> <span class="literal">-vendor</span> <span class="string">&quot;VMware-cus&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117892.png"></p><p><strong>Step4：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set-esximageprofile</span> <span class="literal">-ImageProfile</span> <span class="string">&quot;ESXi-6.7.0-custom&quot;</span> <span class="literal">-acceptancelevel</span> <span class="string">&quot;CommunitySupported&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117762.png" alt="image-20211121193658977"></p><p><strong>Step4：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add-esxsoftwaredepot</span> net55<span class="literal">-r8168-8</span>.<span class="number">045</span>a<span class="literal">-napi-offline_bundle</span>.zip</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310117785.png"></p><p><strong>Step5：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add-esxsoftwarepackage</span> <span class="literal">-ImageProfile</span> <span class="string">&quot;ESXi-6.7.0-custom&quot;</span> <span class="literal">-SoftwarePackage</span> <span class="string">&quot;net55-r8168&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310118007.png"></p><p><strong>Step6：</strong>检查是否加入成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(get-esximageprofile ESXi-6.7.0-custom).viblist</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310118647.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310118228.png"></p><p><strong>Step7：</strong>导出文件</p><ul><li>ZIP (Bundle)：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export-esximageprofile</span> <span class="literal">-imageprofile</span> ESXi<span class="literal">-6</span>.<span class="number">7.0</span><span class="literal">-custom</span> <span class="literal">-exporttobundle</span>  <span class="literal">-filepath</span> .\ESXi<span class="literal">-6</span>.<span class="number">7.0</span><span class="literal">-custom</span>.zip  <span class="literal">-nosignaturecheck</span>  <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><ul><li>ISO (Installable)：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export-esximageprofile -imageprofile ESXi-6.7.0-custom -exporttoiso  -filepath .\ESXi-6.7.0-custom.iso  -nosignaturecheck  -Force</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310118913.png"></p><h2 id="得到ISO文件之后"><a href="#得到ISO文件之后" class="headerlink" title="得到ISO文件之后"></a>得到ISO文件之后</h2><p>拿到iso文件后就可以像正常装系统一样写入到u盘中去安装了</p><p>安装教程有很多，随便搜搜就行了</p><h2 id="硬盘分区及数据存储"><a href="#硬盘分区及数据存储" class="headerlink" title="硬盘分区及数据存储"></a>硬盘分区及数据存储</h2><p>一般通过web页面即可创建，但有时也需要手动创建来解决问题，手动分区及创建存储方式如下</p><h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h3><p>在ESXi中进行分区需要使用<code>partedUtil</code>工具</p><ul><li><p>查看硬盘列表，上面框起来的就是实际的硬盘以及分区，后面有数字的表示分区，没有数字的表示硬盘本身</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /vmfs/devices/disks/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310118644.png"></p></li><li><p>查看分区表</p><p>查看硬盘<code>t10.ATA_____Lenovo_X800_SATA_256G_SSD_______________8S16010501X03403263_</code>实例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partedUtil getptbl <span class="string">&quot;/vmfs/devices/disks/t10.ATA_____Lenovo_X800_SATA_256G_SSD_______________8S16010501X03403263_&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/image-20211121195405778.png" alt="image-20211121195405778"></p><p>第一行是分区格式gpt</p><p>第二行是硬盘的总体信息</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310118376.png"></p><p>第三行之后是分区信息</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310118009.png"></p></li><li><p>创建分区</p><p>在创建分区时要注意的是，必须完整的输入分区表，如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partedUtil setptbl <span class="string">&quot;/vmfs/devices/disks/t10.ATA_____Lenovo_X800_SATA_256G_SSD_______________8S16010501X03403263_&quot;</span> gpt <span class="string">&quot;1 64 8191 C12A7328F81F11D2BA4B00A0C93EC93B 128&quot;</span> <span class="string">&quot;5 8224 520191 EBD0A0A2B9E5443387C068B6B72699C7  0&quot;</span> <span class="string">&quot;6 520224 1032191 EBD0A0A2B9E5443387C068B6B72699C7  0&quot;</span> <span class="string">&quot;7 1032224 1257471 9D27538040AD11DBBF97000C2911D1B8  0&quot;</span> <span class="string">&quot;8 1257504 1843199 EBD0A0A2B9E5443387C068B6B72699C7  0&quot;</span> <span class="string">&quot;9 1843200 7086079 9D27538040AD11DBBF97000C2911D1B8  0&quot;</span> <span class="string">&quot;2 7086080 15472639 EBD0A0A2B9E5443387C068B6B72699C7  0&quot;</span> <span class="string">&quot;3 15472640 500118158 AA31E02A400F11DB9590000C2911D1B8  0&quot;</span></span><br></pre></td></tr></table></figure><p>ESXi&#x2F;ESX 常用的分区类型包括：</p><table><thead><tr><th><strong>分区</strong></th><th><strong>GUID</strong></th><th><strong>类型（十六进制）</strong></th><th><strong>类型（十进制）</strong></th></tr></thead><tbody><tr><td>VMFS 数据存储</td><td>AA31E02A400F11DB9590000C2911D1B8</td><td>0xFB</td><td>251</td></tr><tr><td>VMKCore 诊断</td><td>9D27538040AD11DBBF97000C2911D1B8</td><td>0xFC</td><td>252</td></tr><tr><td>VMware 预留</td><td>9198EFFC31C011DB8F78000C2911D1B8</td><td></td><td></td></tr><tr><td>基本数据</td><td>EBD0A0A2B9E5443387C068B6B72699C7</td><td>0x83</td><td>131</td></tr><tr><td>Linux Swap</td><td>0657FD6DA4AB43C484E50933C84B4F4F</td><td>0x82</td><td>130</td></tr><tr><td>Linux LVM</td><td>E6D6D379F50744C2A23C238F2A3DF928</td><td>0x8E</td><td>142</td></tr><tr><td>Linux RAID</td><td>A19D880F05FC4D3BA006743F0F84911E</td><td>0xFD</td><td>253</td></tr><tr><td>EFi 系统</td><td>C12A7328F81F11D2BA4B00A0C93EC93B</td><td>0xEF</td><td>239</td></tr><tr><td>Microsoft 预留</td><td>E3C9E3160B5C4DB8817DF92DF00215AE</td><td></td><td></td></tr><tr><td>未使用条目</td><td>00000000000000000000000000000000</td><td></td><td></td></tr></tbody></table></li></ul><h3 id="创建数据存储"><a href="#创建数据存储" class="headerlink" title="创建数据存储"></a>创建数据存储</h3><p>创建数据存储需要使用<code> vmkfstools</code>命令</p><p>使用示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmkfstools -C vmfs6 -S NewDatastore /vmfs/devices/disks/t10.ATA_____Lenovo_X800_SATA_256G_SSD_______________8S16010501X03403263_:3</span><br></pre></td></tr></table></figure><p>接下来就可以在web页面看到相关的存储信息了</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1 VMware Front Experience：<a href="https://www.v-front.de/">https://www.v-front.de/</a></p><p>2 Download VMware vSphere：<a href="https://customerconnect.vmware.com/downloads/info/slug/datacenter_cloud_infrastructure/vmware_vsphere/6_7">https://customerconnect.vmware.com/downloads/info/slug/datacenter_cloud_infrastructure&#x2F;vmware_vsphere&#x2F;6_7</a></p><p>3 使用脚本添加网卡驱动：<a href="http://woshub.com/add-drivers-vmware-esxi-iso-image/">http://woshub.com/add-drivers-vmware-esxi-iso-image/</a></p><p>4 使用命令行打包镜像：<a href="https://communities.vmware.com/t5/ESXi-Discussions/Pink-Screen-ESXi-6-5-Failed-Install-Unable-to-Verify-Acceptance/m-p/504351#M42504">https://communities.vmware.com/t5/ESXi-Discussions/Pink-Screen-ESXi-6-5-Failed-Install-Unable-to-Verify-Acceptance/m-p/504351#M42504</a></p><p>5 ESXi硬盘分区：<a href="https://kb.vmware.com/s/article/1036609?lang=zh_CN">https://kb.vmware.com/s/article/1036609?lang=zh_CN</a></p><p>6 ESXi创建数据存储：<a href="https://kb.vmware.com/s/article/1009829?lang=zh_CN">https://kb.vmware.com/s/article/1009829?lang=zh_CN</a></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化技术 </category>
          
          <category> ESXi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化 </tag>
            
            <tag> ESXi </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker搭建Nextcloud个人工作中心</title>
      <link href="/2021/b6c7e144/"/>
      <url>/2021/b6c7e144/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Docker搭建Nextcloud个人工作中心-同步盘-离线下载-。。。-完整版"><a href="#使用Docker搭建Nextcloud个人工作中心-同步盘-离线下载-。。。-完整版" class="headerlink" title="使用Docker搭建Nextcloud个人工作中心(同步盘+离线下载+。。。)(完整版)"></a>使用Docker搭建Nextcloud个人工作中心(同步盘+离线下载+。。。)(完整版)</h1><p>这真是，迄今为止最为折腾的一个部署工作了，工作的起因是自己的onedrive教育版又挂了。。。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>首先要明确的是，到底有没有使用网盘的需求，如果你经常共享文件，或者需要备份自己的资料，或者你有多个终端，或者你需要移动办公。。。等等</p><p>如果你确实有这样的需求，或者你正在使用市面上的网盘，自己再喜欢动动手，或者需要保存一些小秘密，那么继续往下看。</p><h3 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h3><p>网盘又分为备份盘和同步盘。顾名思义，备份盘主要是用来存储文件，比如百度网盘(除工作空间功能)、阿里云盘、微云、天翼云盘、115网盘等等，都算是备份盘，或者大家主要使用的功能都是备份盘的功能。而同步盘则主要有坚果云、Onedrive等(国外的了解的不多)，其中百度网盘、天翼云盘、微云，也都有同步盘的功能。</p><p>我之前一直用的是Onedrive，期间尝试过上述的各种盘，但是效果均不尽人意，算是各有各的缺点吧。我的场景主要是用来同步全盘的数据，这样做有个好处，就是如果我重做系统，或者换设备了，不用来回倒数据，而且同步盘一般也都支持文件版本的功能，写word文档或者画图的时候，如果忘记保存副本就是个很难办的事情，总不能所有的内容都用git管理，也不方便，这个时候同步盘的优势就出来了。这样的场景也导致了，我这里会有大量的小文件和部分大文件，小文件的数量可能有几十万(包含着一些开源项目的源码)。所以我这个场景对同步盘的选择就很苛刻。</p><p>下面列一下我用过这些盘之后的感受。</p><p>坚果云：同步功能很强大，速度也快，但是容量太小，花钱买也不多。</p><p>百度网盘、微云、天翼云盘，客户端的校验速度和稳定性均不如Onedrive，动不动就有冲突。</p><p>Onedrive本身功能没啥毛病，但是网络情况不稳定，就算这个不稳定我也忍了，但是教育版又经常和学校的管理有关，总是抽风，网页端都打不开，这已经第二次了，每次都要持续几天，这次失效截止目前也快一周了，还没有修复好，想着索性自己搭建一个服务。</p><p>个人云盘搭建也有多种选择Nextcloud、seafile等等，还有filerun、可道云等，在这里的选型主要选商业化不是特别严重的，也就是开源版本功能没被阉割太多的，而且性能还算过得去的。</p><p>实际大家过程中搭建了Nextcloud和seafile，最终是选择了Nextcloud，虽然nextcloud的性能有些问题，但是可以对性能优化一些，而Seafile的功能感觉被阉割不少，而且文件管理还得通过客户端，与文件管理器集成的不到位。后来发现Nextcloud的虚拟文件支持一用就崩溃，不过考虑Nextcloud的商店里插件很多，功能可扩展，就还是选这个了。</p><p>好了，废话说了一堆，下面开始说正式的搭建过程。</p><h2 id="环境说明与准备工作"><a href="#环境说明与准备工作" class="headerlink" title="环境说明与准备工作"></a>环境说明与准备工作</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>本地一台台式机做Nextcloud服务端</p><p>公网服务器用来进行公网访问</p><p>路由器用来进行DNS劫持</p><h3 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h3><ul><li>docker</li><li>docker-compose</li></ul><p>安装Docker和Docker-compose的教程很多，比如<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">https://www.runoob.com/docker/ubuntu-docker-install.html</a>。这里不展开说docker安装过程，之所以选择docker安装，是可以保证不在环境上出现过多的差异，而且后续如果要迁移数据也比较方便。</p><h2 id="Nextcloud本地搭建-Nextcloud-Redis-Mysql"><a href="#Nextcloud本地搭建-Nextcloud-Redis-Mysql" class="headerlink" title="Nextcloud本地搭建(Nextcloud+Redis+Mysql)"></a>Nextcloud本地搭建(Nextcloud+Redis+Mysql)</h2><p>Nextcloud的单独搭建其实很简单，直接<code>docker run nextcloud</code>就行了(夸张一下，实际还得设置数据路径和端口映射)，但是并不推荐这么执行，实际运行的性能比较差，我们这里直接使用redis和mysql搭建。</p><p>不过得益于Docker-compose，可以直接使用我的这个<code>docker-compose.yml</code>，其中nextcloud使用了自定义的镜像，集成了离线下载的aria2和系统定时工具cron。</p><p>（在下面同样附上了Dockerfile文件，可以根据需求进行自定义，如果自己懒得build镜像，直接使用这个镜像即可。）</p><p><code>Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nextcloud:fpm</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; apt install -y aria2 libmagickcore-6.q16-6-extra cron&amp;&amp; apt clean</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /var/www/aria2</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var/www/aria2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> aria2.session</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &#123; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;dir=/Downloads&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;enable-rpc=true&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;rpc-allow-origin-all=true&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;rpc-listen-all=true&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;continue=true&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;input-file=/var/www/aria2/aria2.session&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;save-session=/var/www/aria2/aria2.session&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;max-concurrent-downloads=20&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;save-session-interval=120&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;connect-timeout=120&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;max-connection-per-server=10&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;min-split-size=10M&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;split=10&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;check-certificate=false&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash">&#125; &gt; aria2.conf; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">chown</span> -R www-data:root /var/www/aria2; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">chmod</span> -R g=u /var/www/aria2</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/var/www/aria2&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed =i <span class="string">&#x27;194 i service cron start&#x27;</span> /entrypoint.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;194 i su -s /bin/bash -c &quot;aria2c --conf-path=/var/www/aria2/aria2.conf -D&quot; www-data&#x27;</span> /entrypoint.sh</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var/www/html</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/entrypoint.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;php-fpm&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nextcloud-mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--skip-log-bin</span> <span class="string">--innodb_buffer_pool_size=2048M</span> <span class="string">--innodb_flush_method=O_DIRECT</span> <span class="string">--innodb_write_io_threads=16</span></span><br><span class="line">    <span class="comment"># 内存配置根据实际情况来</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=db_dev</span>  <span class="comment"># 设置mysql的root用户的密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_LOG_CONSOLE=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span>  <span class="comment"># 必须。设置数据库数据路径的映射，数据持久化保存</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">db-data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">memcached:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nextcloud-memcached</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="string">cached_dev</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 设置redis数据路径的映射，根据自己的配置看要不要映射出来吧，随意。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">cache-data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nextcloud:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-beijing.aliyuncs.com/env_halfcoke/nextcloud</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nextcloud-fpm</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">nextcloud-data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/var/www/html</span> <span class="comment"># nextcloud 数据目录，必须，数据持久化保存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">nextcloud-aria2</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/var/www/aria2</span> <span class="comment"># nextcloud 数据目录，建议</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">nextcloud-conf</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/local/etc/php-fpm.d</span> <span class="comment"># nextcloud使用的php-fpm 配置目录，建议</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PHP_UPLOAD_LIMIT=16G</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PHP_MEMORY_LIMIT=4G</span>    <span class="comment"># 内存配置根据实际情况来</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=db_dev</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST=memcached</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST_PORT=6379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST_PASSWORD=cached_dev</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nextcloud-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">nextcloud-data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/var/www/html</span> <span class="comment"># nextcloud 数据目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">nginx-conf</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/etc/nginx/conf.d</span> <span class="comment"># nginx 配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">nginx-ssl</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/etc/nginx/ssl_certs</span> <span class="comment"># nginx 证书</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud-net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">driver_opts:</span> </span><br><span class="line">      <span class="attr">type:</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&#x27;bind&#x27;</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&#x27;/data/db-data&#x27;</span></span><br><span class="line">  <span class="attr">cache-data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">driver_opts:</span> </span><br><span class="line">      <span class="attr">type:</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&#x27;bind&#x27;</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&#x27;/data/cache-data&#x27;</span></span><br><span class="line">  <span class="attr">nextcloud-data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">driver_opts:</span> </span><br><span class="line">      <span class="attr">type:</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&#x27;bind&#x27;</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&#x27;/data/nextcloud-data&#x27;</span></span><br><span class="line">  <span class="attr">nextcloud-aria2:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">driver_opts:</span> </span><br><span class="line">      <span class="attr">type:</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&#x27;bind&#x27;</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&#x27;/data/nextcloud-aria2&#x27;</span></span><br><span class="line">  <span class="attr">nextcloud-conf:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">driver_opts:</span> </span><br><span class="line">      <span class="attr">type:</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&#x27;bind&#x27;</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&#x27;/data/nextcloud-conf&#x27;</span></span><br><span class="line">  <span class="attr">nginx-conf:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">driver_opts:</span> </span><br><span class="line">      <span class="attr">type:</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&#x27;bind&#x27;</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&#x27;/data/server/conf&#x27;</span></span><br><span class="line">  <span class="attr">nginx-ssl:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">driver_opts:</span> </span><br><span class="line">      <span class="attr">type:</span> <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&#x27;bind&#x27;</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&#x27;/data/server/ssl_certs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nextcloud-net:</span></span><br></pre></td></tr></table></figure><p>执行过程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行</span></span><br><span class="line">vim docker-compose.yml</span><br><span class="line"><span class="comment"># 将上面文件的docker-compose.yml内容复制进去,保存退出</span></span><br><span class="line"><span class="comment"># 使用docker compose启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这次启动是为了把相关数据目录的路径都建立出来</span></span><br><span class="line"><span class="comment"># 查看是否所有容器都正常启动</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>接下来，需要对nginx进行配置</p><p>nginx配置文件路径在：<code>/data/server/conf</code>，这个是在docker-compose文件中配置的，现在这个路径应该是空的(是不是空的都无所谓)，我们新建一个<code>nextcloud.conf</code>文件。</p><p>文件名只要是以conf结尾即可，这里命名为<code>nextcloud.conf</code></p><p>官方实际上是提供了<a href="https://docs.nextcloud.com/server/latest/admin_manual/installation/nginx.html#nextcloud-in-the-webroot-of-nginx">nginx配置文件</a>的(<a href="https://docs.nextcloud.com/server/latest/admin_manual/installation/nginx.html#nextcloud-in-the-webroot-of-nginx)%EF%BC%8C%E4%BD%86%E6%98%AF%E9%87%8C%E9%9D%A2%E9%9C%80%E8%A6%81%E4%BF%AE%E6%94%B9%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%EF%BC%8C%E6%B3%A8%E6%84%8F%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A%E3%80%82">https://docs.nextcloud.com/server/latest/admin_manual/installation/nginx.html#nextcloud-in-the-webroot-of-nginx)，但是里面需要修改一些配置，注意中文注释。</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> php-handler &#123;</span><br><span class="line">    <span class="attribute">server</span> nextcloud:<span class="number">9000</span>; <span class="comment"># 这里因为咱们是docker部署，需要更改为服务名</span></span><br><span class="line">    <span class="comment">#server unix:/var/run/php/php7.4-fpm.sock;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> cloud.example.com; <span class="comment"># 这里根据自己实际情况修改主机名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enforce HTTPS</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>      ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> cloud.example.com; <span class="comment"># 这里根据自己实际情况修改主机名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Mozilla&#x27;s guidelines for SSL/TLS settings</span></span><br><span class="line">    <span class="comment"># https://mozilla.github.io/server-side-tls/ssl-config-generator/</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /etc/ssl/nginx/cloud.example.com.crt; <span class="comment"># 这里根据自己实际情况修改证书文件</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/nginx/cloud.example.com.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HSTS settings</span></span><br><span class="line">    <span class="comment"># WARNING: Only add the preload option once you read about</span></span><br><span class="line">    <span class="comment"># the consequences in https://hstspreload.org/. This option</span></span><br><span class="line">    <span class="comment"># will add the domain to a hardcoded list that is shipped</span></span><br><span class="line">    <span class="comment"># in all major browsers and getting removed from this list</span></span><br><span class="line">    <span class="comment"># could take several months.</span></span><br><span class="line">    <span class="comment">#add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot; always;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set max upload size</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">16G</span>; <span class="comment"># 这里根据自己实际情况修改大小，这个关系到能够上传的最大文件大小</span></span><br><span class="line">    <span class="attribute">fastcgi_buffers</span> <span class="number">64</span> <span class="number">4K</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable gzip but do not remove ETag headers</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line">    <span class="attribute">gzip_proxied</span> expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private no_last_modified no_etag auth;</span><br><span class="line">    <span class="attribute">gzip_types</span> application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pagespeed is not supported by Nextcloud, so if your server is built</span></span><br><span class="line">    <span class="comment"># with the `ngx_pagespeed` module, uncomment this line to disable it.</span></span><br><span class="line">    <span class="comment">#pagespeed off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTP response headers borrowed from Nextcloud `.htaccess`</span></span><br><span class="line">    <span class="attribute">add_header</span> Referrer-Policy                      <span class="string">&quot;no-referrer&quot;</span>   always;</span><br><span class="line">    <span class="attribute">add_header</span> X-Content-Type-Options               <span class="string">&quot;nosniff&quot;</span>       always;</span><br><span class="line">    <span class="attribute">add_header</span> X-Download-Options                   <span class="string">&quot;noopen&quot;</span>        always;</span><br><span class="line">    <span class="attribute">add_header</span> X-Frame-Options                      <span class="string">&quot;SAMEORIGIN&quot;</span>    always;</span><br><span class="line">    <span class="attribute">add_header</span> X-Permitted-Cross-Domain-Policies    <span class="string">&quot;none&quot;</span>          always;</span><br><span class="line">    <span class="attribute">add_header</span> X-Robots-Tag                         <span class="string">&quot;none&quot;</span>          always;</span><br><span class="line">    <span class="attribute">add_header</span> X-XSS-Protection                     <span class="string">&quot;1; mode=block&quot;</span> always;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security  <span class="number">15552000</span>; <span class="comment"># 补充这条配置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Remove X-Powered-By, which is an information leak</span></span><br><span class="line">    <span class="attribute">fastcgi_hide_header</span> X-Powered-By;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path to the root of your installation</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/nextcloud;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Specify how to handle directories -- specifying `/index.php$request_uri`</span></span><br><span class="line">    <span class="comment"># here as the fallback means that Nginx always exhibits the desired behaviour</span></span><br><span class="line">    <span class="comment"># when a client requests a path that corresponds to a directory that exists</span></span><br><span class="line">    <span class="comment"># on the server. In particular, if that directory contains an index.php file,</span></span><br><span class="line">    <span class="comment"># that file is correctly served; if it doesn&#x27;t, then the request is passed to</span></span><br><span class="line">    <span class="comment"># the front-end controller. This consistent behaviour means that we don&#x27;t need</span></span><br><span class="line">    <span class="comment"># to specify custom rules for certain paths (e.g. images and other assets,</span></span><br><span class="line">    <span class="comment"># `/updater`, `/ocm-provider`, `/ocs-provider`), and thus</span></span><br><span class="line">    <span class="comment"># `try_files $uri $uri/ /index.php$request_uri`</span></span><br><span class="line">    <span class="comment"># always provides the desired behaviour.</span></span><br><span class="line">    <span class="attribute">index</span> index.php index.html /index.php<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rule borrowed from `.htaccess` to handle Microsoft DAV clients</span></span><br><span class="line">    <span class="section">location</span> = / &#123;</span><br><span class="line">        <span class="attribute">if</span> ( <span class="variable">$http_user_agent</span> <span class="regexp">~ ^DavClnt</span> ) &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">302</span> /remote.php/webdav/<span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> = /robots.txt &#123;</span><br><span class="line">        <span class="attribute">allow</span> all;</span><br><span class="line">        <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make a regex exception for `/.well-known` so that clients can still</span></span><br><span class="line">    <span class="comment"># access it despite the existence of the regex rule</span></span><br><span class="line">    <span class="comment"># `location ~ /(\.|autotest|...)` which would otherwise handle requests</span></span><br><span class="line">    <span class="comment"># for `/.well-known`.</span></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /.well-known &#123;</span><br><span class="line">        <span class="comment"># The rules in this block are an adaptation of the rules</span></span><br><span class="line">        <span class="comment"># in `.htaccess` that concern `/.well-known`.</span></span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> = /.well-known/carddav &#123; <span class="attribute">return</span> <span class="number">301</span> /remote.php/dav/; &#125;</span><br><span class="line">        <span class="section">location</span> = /.well-known/caldav  &#123; <span class="attribute">return</span> <span class="number">301</span> /remote.php/dav/; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /.well-known/acme-challenge    &#123; <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>; &#125;</span><br><span class="line">        <span class="section">location</span> /.well-known/pki-validation    &#123; <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Let Nextcloud&#x27;s API for `/.well-known` URIs handle all other</span></span><br><span class="line">        <span class="comment"># requests by passing them to the front-end controller.</span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rules borrowed from `.htaccess` to hide certain paths from clients</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)</span>  &#123; <span class="attribute">return</span> <span class="number">404</span>; &#125;</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/(?:\.|autotest|occ|issue|indie|db_|console)</span>                &#123; <span class="attribute">return</span> <span class="number">404</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure this block, which passes PHP files to the PHP process, is above the blocks</span></span><br><span class="line">    <span class="comment"># which handle static assets (as seen below). If this block is not declared first,</span></span><br><span class="line">    <span class="comment"># then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`</span></span><br><span class="line">    <span class="comment"># to the URI, resulting in a HTTP 500 error response.</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php(?:$|/)</span> &#123;</span><br><span class="line">        <span class="comment"># Required for legacy support</span></span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy)</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+?\.php)(/.*)$</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$path_info</span> <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$fastcgi_script_name</span> =<span class="number">404</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> PATH_INFO <span class="variable">$path_info</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> HTTPS <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_param</span> modHeadersAvailable <span class="literal">true</span>;         <span class="comment"># Avoid sending the security headers twice</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> front_controller_active <span class="literal">true</span>;     <span class="comment"># Enable pretty urls</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> php-handler;</span><br><span class="line">        <span class="attribute">fastcgi_read_timeout</span> <span class="number">18000</span>; <span class="comment"># 补充这条配置</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">fastcgi_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.(?:css|js|svg|gif|png|jpg|ico)$</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">6M</span>;         <span class="comment"># Cache-Control policy borrowed from `.htaccess`</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;     <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.woff2?$</span> &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">7d</span>;         <span class="comment"># Cache-Control policy borrowed from `.htaccess`</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;     <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rule borrowed from `.htaccess`</span></span><br><span class="line">    <span class="section">location</span> /remote &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> /remote.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，访问本机的<code>https://localhost</code>应该可以打开nextcloud了</p><p>可以进行一些配置，大体上如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310125240.png"></p><p>同样可以通过手机端、电脑端对其进行访问(接入同一个局域网)</p><h2 id="Nextcloud公网访问（可选）"><a href="#Nextcloud公网访问（可选）" class="headerlink" title="Nextcloud公网访问（可选）"></a>Nextcloud公网访问（可选）</h2><p>仅能局域网访问很多时候不能满足我们的需求，而且特别不方便，为此，可以使用公网服务器进行转发，这样我们就可以通过公网服务器访问了。</p><p>在这里我是直接转发了本机的443端口，到公网服务器的8002端口。</p><p>转发端口用到的工具可以看我们的这篇文章<a href="https://halfcoke.github.io/2021/f282203b/">《FRP端口转发工具》</a>，对Frp工具进行了介绍。</p><p>因为我在公网服务器上部署了很多服务，因此在公网服务器上也是通过nginx进行代理。</p><p>nginx配置文件如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">   <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">   <span class="attribute">server_name</span> cloud.example.com; <span class="comment"># 这里根据自己实际情况修改主机名</span></span><br><span class="line">   <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">   <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">   <span class="attribute">server_name</span> cloud.example.com; <span class="comment"># 这里根据自己实际情况修改主机名</span></span><br><span class="line"></span><br><span class="line">   <span class="attribute">ssl_certificate</span> /etc/ssl/nginx/cloud.example.com.crt; <span class="comment"># 这里根据自己实际情况修改证书文件</span></span><br><span class="line">   <span class="attribute">ssl_certificate_key</span> /etc/ssl/nginx/cloud.example.com.crt; <span class="comment"># 这里根据自己实际情况修改证书文件</span></span><br><span class="line">   <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">   <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">   <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">client_max_body_size</span> <span class="number">16G</span>;</span><br><span class="line">   <span class="section">location</span> <span class="regexp">~* /.*</span> &#123; <span class="comment"># 转发所有请求</span></span><br><span class="line">   <span class="attribute">proxy_pass</span> https://172.20.0.1:8002<span class="variable">$request_uri</span>; <span class="comment"># 这里这个ip是公网服务器的宿主IP（因为我也部署了docker）</span></span><br><span class="line">   <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">   <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">   <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在直接访问公网的ip就可以直接访问到自己的nextcloud了。</p><p>强烈建议注册一个域名，通过域名对自己的服务进行访问，这样https显示就正常了。</p><h2 id="使用同一域名解析至公网或内网IP（可选）"><a href="#使用同一域名解析至公网或内网IP（可选）" class="headerlink" title="使用同一域名解析至公网或内网IP（可选）"></a>使用同一域名解析至公网或内网IP（可选）</h2><p><em>注：这里主要是为了进行域名劫持，如果所用路由器有相关的功能，直接设置即可，可以跳过这一节。</em></p><p>接下来搞一个骚操作</p><p>回顾一下使用场景</p><p>我的客户端电脑是笔记本，服务端电脑是台式机，我是想同步我笔记上的所有的数据。台式机是放那不动的，而笔记本我经常要拿走。</p><p>因为公网服务器的带宽很低，所以直接使用公网IP进行初始同步不太现实，速度太慢了。而我实际上是可以把笔记本和台式机接在一个局域网里的。</p><p>然而，我看了看自己的路由器，并没有DNS的功能，最多我只能设置一个DNS服务器。</p><p>但是，我的台式机放在那就可以搭一个DNS服务，这样我自己劫持一下DNS，在内网的时候直接把我的域名劫持到局域网IP就可以了，说搞就搞。</p><h3 id="DNS服务搭建"><a href="#DNS服务搭建" class="headerlink" title="DNS服务搭建"></a>DNS服务搭建</h3><p>在ubuntu 18 上搭建DNS服务时，需要先关闭systemd-reslove服务，释放53端口，在此之前，先执行<code>docker pull sameersbn/bind</code>把镜像拉下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop systemd-reslove</span><br><span class="line">sudo systemctl disable systemd-reslove</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/systemd/resolved.conf</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Resolve]</span><br><span class="line">DNS=127.0.0.1</span><br><span class="line">#FallbackDNS=</span><br><span class="line">#Domains=</span><br><span class="line">LLMNR=no</span><br><span class="line">#MulticastDNS=no</span><br><span class="line">#DNSSEC=no</span><br><span class="line">#Cache=yes</span><br><span class="line">DNSStubListener=no</span><br></pre></td></tr></table></figure><p>重启电脑</p><p>DNS服务搭建，也使用docker-compose部署了，写个配置文件比较方便。配置文件如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">dns_server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/bind</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dns_server</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">WEBMIN_ENABLED=true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;53:53/udp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;53:53/tcp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10000</span><span class="string">:10000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/dns_server:/data</span></span><br></pre></td></tr></table></figure><p>访问<a href="https://localhost:10000/">https://localhost:10000</a></p><p>账号root 密码password</p><p>设置中文后打开bind dns server页面</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310125393.png"></p><p>进行转发和传输设置</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126745.png"></p><p>进行访问控制列表设置</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126310.png"></p><p>在这里创建新的主区域</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126888.png"></p><p>这里根据自己的实际情况去填，Email地址随便写</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126311.png"></p><p>点击新建以后，点击地址</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126055.png"></p><p>按照如下填写即可</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126147.png"></p><p>等待一段时间，把路由器的DNS服务器设置为台式机，然后链接到路由器的局域网里，就可以使用<code>host example.cn</code>来查看地址，如果可以定位到台式机，就没问题了。</p><h2 id="其他重要的补充工作"><a href="#其他重要的补充工作" class="headerlink" title="其他重要的补充工作"></a>其他重要的补充工作</h2><h3 id="使用Demo"><a href="#使用Demo" class="headerlink" title="使用Demo"></a>使用Demo</h3><h4 id="Web页面"><a href="#Web页面" class="headerlink" title="Web页面"></a>Web页面</h4><p>主页面基本就是这个样子，很简洁，在右侧可以进行一些设置。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126125.png"></p><p>在文件页面是这个样子，有文件版本记录。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126992.png"></p><p>在本地删除的文件，云端也会有记录，可以进行文件恢复</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310127302.png"></p><h4 id="Windows客户端"><a href="#Windows客户端" class="headerlink" title="Windows客户端"></a>Windows客户端</h4><p>Windows客户端可以设置忽略同步的文件或文件夹，这个也是比较方便的地方，比如<code>node_modules</code>终于不需要同步了（之前onedrive不支持进行这样的设置）。总体的使用也是比较方便易懂的。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126836.png"></p><p>同步文件夹也可以进行设置，我直接用之前Onedrive创建的文件夹了。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126771.png"></p><p>在文件管理器中看基本上是这个样子。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126674.png"></p><p>nextcloud有虚拟文件支持，就是类似onedrive的文件随选。但是我这边一开启就容易卡死，关闭后就一直正常。</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>按照上述的搭建过程后，已经进行了初步的性能优化，在启动MySQL时，已经增加了相关参数来提高MySQL在当前使用环境下的性能。</p><h4 id="PHP-fpm"><a href="#PHP-fpm" class="headerlink" title="PHP-fpm"></a>PHP-fpm</h4><p>下面给出对Nextcloud使用的PHP-fpm的优化参数。<a href="https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html#tune-php-fpm">官网</a>提供了一个调优工具<a href="https://spot13.com/pmcalculator/">PHP-FPM Process Calculator</a>的链接。</p><p>但是对于不熟悉PHP-FPM的人找这个配置文件时候还花了一番功夫。</p><p>在前文中，已经把相关配置文件暴露在了<code>/data/nextcloud-conf</code>路径下</p><p>直接编辑路径下的<code>www.conf</code>文件即可，找到<code>pm.max_children</code>、<code>pm.start_servers</code>、<code>pm.min_spare_servers</code>、<code>pm.max_spare_servers</code>这几个参数，按照上面工具输出的参数进行修改即可。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>插件安装时，如果在线安装则服务器需要能访问外网，或者可以通过离线安装的方式进行。</p><h4 id="在线安装："><a href="#在线安装：" class="headerlink" title="在线安装："></a>在线安装：</h4><p>点击应用，然后选择你需要安装的插件，下载并启用即可</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126709.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126703.png"></p><h4 id="离线安装："><a href="#离线安装：" class="headerlink" title="离线安装："></a>离线安装：</h4><p>访问nextcloud官方插件商店<a href="https://apps.nextcloud.com/">https://apps.nextcloud.com/</a>，选择想要的插件，并下载指定版本。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126139.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126318.png"></p><p>将插件压缩包，放入<code>/data/nextcloud-data/custom_apps</code>中解压即可。</p><p>返回你自己的nextcloud，在应用页面会发现放入的插件，启用即可。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126973.png"></p><p>刚安装好的话应该是不支持用户注册的，可以安装一个注册插件，方便朋友临时用一下。</p><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><h4 id="安全设置警告"><a href="#安全设置警告" class="headerlink" title="安全设置警告"></a>安全设置警告</h4><p>使用我提供的docker镜像和nginx配置文件，应该可以通过所有检查。使用官方默认的docker镜像，需要在docker内部执行如下命令，来消除几个错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y libmagickcore-6.q16-6-extra <span class="comment">#支持svg</span></span><br><span class="line">apt install -y cron <span class="comment"># 执行定时任务</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310126080.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 折腾 </category>
          
          <category> Nextcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FRP端口转发工具</title>
      <link href="/2021/f282203b/"/>
      <url>/2021/f282203b/</url>
      
        <content type="html"><![CDATA[<h1 id="FRP端口转发工具及部署方式详解-win-linux"><a href="#FRP端口转发工具及部署方式详解-win-linux" class="headerlink" title="FRP端口转发工具及部署方式详解(win+linux)"></a>FRP端口转发工具及部署方式详解(win+linux)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在此前的<a href="https://halfcoke.github.io/2021/cac946/">文章</a>中，介绍了使用ssh命令进行端口转发。</p><p>使用ssh进行端口转发有优点也有缺点，其优点主要在使用方便，服务器上基本都安装了ssh服务用来进行远程登录，因此只要有ssh命令就能实现端口转发的功能。但其缺点也很明显，主要在于远程转发、本地转发、动态转发等配置参数让使用者常常混淆，使用频率不高时也记不住这些参数。如果忘记设置ssh保活或出现网络波动导致链接断开也不方便自动重连，常常需要用户自己再写脚本来维护，这也增加了复杂性。</p><p>在实际使用中使用ssh来进行临时的端口转发比较方便，但是如果我们想建立一个长期的转发链接的时候(比如转发Windows的远程访问端口，可以随时远程访问放在固定位置的电脑)，在使用ssh就可能要自己造一些轮子。</p><p>为方便起见，更推荐使用frp工具进行端口转发。</p><h2 id="frp工具介绍"><a href="#frp工具介绍" class="headerlink" title="frp工具介绍"></a>frp工具介绍</h2><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p><p>frp是采用go语言编写的开源工具，go保证了高效率，开源保证了工具没有夹带私货，可以放心使用。</p><p>首先附上frp工具的下载链接：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>frp工具有很多种功能，我们将在本文中介绍最基本的端口转发部分的功能。</p><p>frp采用CS模式，需要在具有公网IP的节点上设置服务端，在需要进行转发的机器上设置客户端。</p><p>工具的安装部署也极为便捷，直接解压压缩包便可以获得如下文件。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310127255.png" alt="image-20210908224239220"></p><p>文件非常清晰，<code>frpc</code>表示客户端，<code>frpc.ini</code>表示客户端配置；<code>frps</code>表示服务端，<code>frps.ini</code>表示服务端配置。</p><p>接下来我们介绍一下用于端口转发的服务端、客户端的配置项。</p><h3 id="frp服务端配置"><a href="#frp服务端配置" class="headerlink" title="frp服务端配置"></a>frp服务端配置</h3><p>服务端配置daemo如下，实现基本功能需要配置的内容非常少。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authentication_method</span> = token</span><br><span class="line"><span class="attr">authenticate_heartbeats</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">authenticate_new_work_conns</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">token</span> = ^EJSNkz4MLMJC6W!TyLhmNwJ3k3Hk833cmzBNU2ZasD3dja4*Bf</span><br><span class="line"></span><br><span class="line"><span class="attr">log_file</span> = /opt/frp_0.<span class="number">37.0</span>_linux_amd64/log/frps.log</span><br><span class="line"><span class="attr">log_level</span> = debug</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure><p>在我的配置文件中主要分为三个部分：</p><ul><li><p>基本配置</p><p>在这项配置中，配置**<code>frp</code>服务端监听的端口**，这个端口是用来与frp客户端进行链接的，与我们后续要转发的服务无关。这一项一定要有，不然客户端也不知道链接谁。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bind_port</span> = <span class="number">1234</span></span><br></pre></td></tr></table></figure></li><li><p>安全配置</p><p>这一项配置不是强制的，但是推荐配置。毕竟你也不想那自己的服务器去做慈善，主要以防万一你的服务端frp泄露。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">authentication_method</span> = token</span><br><span class="line"><span class="attr">authenticate_heartbeats</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">authenticate_new_work_conns</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">token</span> = ^EJSNkz4MLMJC6W!TyLhmNwJ3k3Hk833cmzBNU2ZasD3dja4*Bf</span><br></pre></td></tr></table></figure><p>其中token换成自己生成的，其余三项配置与我相同即可，配置项的意思就是英文的意思，不用过多解释了。</p></li><li><p>日志配置</p><p>日志配置根据自己的需要进行配置即可，也可以不配置，主要用来查看一下有没有异常的链接或查看bug等情况使用。</p><p><code>log_file</code>默认是<code>./frps.log</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log_file</span> = /opt/frp_0.<span class="number">37.0</span>_linux_amd64/log/frps.log</span><br><span class="line"><span class="attr">log_level</span> = debug</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="frp客户端配置"><a href="#frp客户端配置" class="headerlink" title="frp客户端配置"></a>frp客户端配置</h3><p>客户端的配置内容稍微多一点，因为涉及到我们要转发的服务的配置。服务端的配置daemon如下所示。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = test.cn</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="attr">token</span> = ^EJSNkz4MLMJC6W!TyLhmNwJ3k3Hk833cmzBNU2ZasD3dja4*Bf</span><br><span class="line"><span class="attr">authentication_method</span> = token</span><br><span class="line"><span class="attr">authenticate_heartbeats</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">authenticate_new_work_conns</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user</span> = my_computer</span><br><span class="line"></span><br><span class="line"><span class="attr">log_file</span> = ./log/frpc.log</span><br><span class="line"><span class="attr">log_level</span> = debug</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[rdp]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">3389</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个配置文件中，可以分为5个部分：</p><ul><li><p>基本配置</p><p>在基本配置中，需要配置<code>frp</code>服务端的ip地址和端口，端口需要与服务端配置中<code>bind_port</code>相同。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server_addr</span> = test.cn</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">1234</span></span><br></pre></td></tr></table></figure></li><li><p>安全配置</p><p>安全配置需要与服务端保持一致，所有的内容都应相同。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">token</span> = ^EJSNkz4MLMJC6W!TyLhmNwJ3k3Hk833cmzBNU2ZasD3dja4*Bf</span><br><span class="line"><span class="attr">authentication_method</span> = token</span><br><span class="line"><span class="attr">authenticate_heartbeats</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">authenticate_new_work_conns</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>用户名配置</p><p>这条配置信息其实是给待转发端口的服务名增加了前缀，因为可能存在多个客户端共用同一个服务端的情况，避免服务名称冲突。</p><p>比如在我们的配置中，要转发的<code>rdp</code>服务的完整服务名会自动拼接为<code>my_computer.rdp</code>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span> = my_computer</span><br></pre></td></tr></table></figure></li><li><p>日志配置</p><p>日志配置与服务端的作用相同，根据需要选择配置即可。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log_file</span> = ./log/frpc.log</span><br><span class="line"><span class="attr">log_level</span> = debug</span><br></pre></td></tr></table></figure></li><li><p>服务配置</p><p>需要转发的服务在这里配置，其中<code>[rdp]</code>为服务名，中括号包起来的部分可以自定义</p><p><code>type</code>表示服务的链接类型，我们用于转发远程桌面或ssh端口是使用<code>tcp</code>，完整的选项可以参考<a href="https://gofrp.org/docs/reference/proxy/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE">官网说明</a>。</p><p><code>use_compression</code>表示是否对数据进行压缩</p><p><code>local_ip</code>和<code>local_port</code>表示运行<code>frp</code>客户端的机器能够直接访问到的地址，比如我要转发本机的远程桌面端口，就是如下的配置。如果我要转发本地局域网内的其他服务，按照当前机器访问服务的地址和端口填写即可。</p><p><code>remote_port</code>表示在**<code>frp</code>服务端<strong>上监听的端口(用来访问当前服务使用)。在我的配置文件中，访问<code>test.cn:2345</code>也就相当于访问了</strong><code>frp</code>客户端**的3389端口。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[rdp]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">2345</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><p>接下来介绍一下在Windows上与Linux上将frp部署的方式。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li><p>方式一</p><p>可以直接运行<code>frpc.exe</code>，但是这样无法做到后台运行，而且重启以后就没办法自动启动，所以推荐使用方式二，将<code>frpc</code>作为服务部署</p></li><li><p>方式二</p><p>为了将<code>frpc.exe</code>作为服务部署，需要借助<a href="https://github.com/winsw/winsw"><code>WinSW</code>工具</a>。这一工具仅需要简单的配置便可以将自己的应用作为windows服务。</p><p>可以从<a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a>下载对应版本的软件(32位或64位)。</p><p><code>WinSW-x64.exe</code>或<code>WinSW-x32.exe</code>下载好以后，将该文件命名成你喜欢的名字，比如<code>myapp.exe</code>，同时新建一个同名的xml文件<code>myapp.xml</code>。</p><p>继续本文的例子，我们可以复制一下内容到xml文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- ID of the service. It should be unique across the Windows system--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>rdpforward<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Display name of the service --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>RDP Port Forward <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Service description --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Forward Windows RDP Port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Path to the executable, which should be started --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executable</span>&gt;</span>frp_0.37.0_windows_amd64\frpc.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-c &quot;frp_0.37.0_windows_amd64\frpc.ini&quot;  <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">startmode</span>&gt;</span>Automatic<span class="tag">&lt;/<span class="name">startmode</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;10 sec&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log</span> <span class="attr">mode</span>=<span class="string">&quot;reset&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中:</p><ul><li><p><code>&lt;id&gt;</code>应该为系统范围内独一无二的标识。自己直接写就行，一般也不会和系统里的重复。</p></li><li><p><code>&lt;name&gt;</code>为服务显示的名称，比如在下图中显示出了我这个服务的名称。</p></li><li><p><code>&lt;description&gt;</code>为服务的描述，和名称一样，也是给自己看的。</p></li><li><p><code>&lt;executable&gt;</code>要执行程序的路径，这里我写的是相对路径。</p></li><li><p><code>&lt;arguments&gt;</code>执行程序的参数，对frpc来说，需要指定一下配置文件的位置。</p></li><li><p><code>&lt;startmode&gt;</code>启动模式，是否是开机自动运行。</p></li><li><p><code>&lt;onfailure&gt;</code>服务启动失败时的动作。</p></li><li><p><code>&lt;log&gt;</code>记录日志的模式。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310127247.png" alt="image-20210908232555264"></p></li></ul><p>配置完成后，在<code>myapp.exe</code>所在的目录直接输入<code>cmd .</code>（注意有个空格 和点）直接打开cmd窗口，如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310127398.png" alt="image-20210908233045415"></p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myapp.exe install</span><br><span class="line">myapp.exe start</span><br><span class="line"><span class="comment"># 如果想删除则是</span></span><br><span class="line">myapp.exe stop</span><br><span class="line">myapp.exe uninstall</span><br></pre></td></tr></table></figure><p>至此，Windows上服务部署完成。</p></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>在Linux上部署服务通常是frp服务端，下面以部署服务端为例说明，客户端同理。</p><p><code>frp</code>工具非常贴心的已经带了服务的配置文件（位于<code>frp</code>的<code>systemd</code>文件夹下），我们仅需要做一些修改就好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Server Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/bin/frps -c /etc/frp/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>将其中的<code>ExecStart</code>的内容按照实际放置的位置填写就好。</p><p><code>User</code>根据实际情况写，也可以不写。</p><p>我的配置信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp server daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/opt/frp_0.37.0_linux_amd64</span><br><span class="line">ExecStart=/opt/frp_0.37.0_linux_amd64/frps -c /opt/frp_0.37.0_linux_amd64/frps.ini</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后将文件命名为<code>frps.service</code>，扩展名为service即可。</p><p>然后将文件copy至<code>/etc/systemd/system/</code>中。</p><p>运行如下命令启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start frps</span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frps</span><br><span class="line"><span class="comment"># 取消开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> frps</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop frps</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://gofrp.org/">frp中文官网</a></li><li><a href="https://github.com/winsw/winsw">WinSW</a></li></ul><p>好了，剩下的功能大家可以自行探索，别干什么触碰高压线的事就行哈</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
            <tag> 转发 </tag>
            
            <tag> 隧道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用工具类总结(持续更新)</title>
      <link href="/2021/828bfc98/"/>
      <url>/2021/828bfc98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java SPI机制简单介绍</title>
      <link href="/2021/3ee22ef9/"/>
      <url>/2021/3ee22ef9/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-SPI机制简单介绍"><a href="#Java-SPI机制简单介绍" class="headerlink" title="Java SPI机制简单介绍"></a>Java SPI机制简单介绍</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse分布式表介绍</title>
      <link href="/2021/e20ce22c/"/>
      <url>/2021/e20ce22c/</url>
      
        <content type="html"><![CDATA[<h1 id="ClickHouse分布式表介绍"><a href="#ClickHouse分布式表介绍" class="headerlink" title="ClickHouse分布式表介绍"></a>ClickHouse分布式表介绍</h1><p>ClickHouse中的分布式表，本身并不存储数据，而是要依赖一些本地表</p><p>在进行分布式表创建时其实是指定的创建表的引擎为Distributed</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> events <span class="keyword">ON</span> CLUSTER test_cluster</span><br><span class="line"><span class="keyword">AS</span> events</span><br><span class="line">ENGINE <span class="operator">=</span> Distributed(test_cluster,test,events_local,rand());</span><br></pre></td></tr></table></figure><p>Distributed引擎需要以下几个参数：</p><ul><li>集群标识符<br> 注意不是复制表宏中的标识符，而是<remote_servers>中指定的那个。</li><li>本地表所在的数据库名称</li><li>本地表名称</li><li>（可选的）分片键（sharding key）<br> 该键与config.xml中配置的分片权重（weight）一同决定写入分布式表时的路由，即数据最终落到哪个物理表上。它可以是表中一列的原始数据，也可以是函数调用的结果，如上面的SQL语句采用了随机值<code>rand()</code>。注意该键要尽量保证数据均匀分布，另外一个常用的操作是采用区分度较高的列的哈希值。</li></ul><p>在分布式表上执行查询的流程简图如下所示。发出查询后，各个实例之间会交换自己持有的分片的表数据，最终汇总到同一个实例上返回给用户。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310129328.webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> ClickHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB数据库副本集及分片集群介绍</title>
      <link href="/2021/e385259a/"/>
      <url>/2021/e385259a/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB数据库副本集及分片集群介绍"><a href="#MongoDB数据库副本集及分片集群介绍" class="headerlink" title="MongoDB数据库副本集及分片集群介绍"></a>MongoDB数据库副本集及分片集群介绍</h1><h2 id="MongoDB核心概念"><a href="#MongoDB核心概念" class="headerlink" title="MongoDB核心概念"></a>MongoDB核心概念</h2><ul><li><p><a href="https://docs.mongodb.com/manual/introduction/#document-database">Document</a>：</p><p>MongoDB中的数据记录就是一个Document，Document的结构与JSON比较类似；</p><p>document可以嵌套</p><p><img src="https://docs.mongodb.com/manual/images/crud-annotated-document.bakedsvg.svg"></p></li><li><p><a href="https://docs.mongodb.com/manual/core/databases-and-collections/#collections">Collection</a>:</p><p>MongoDB的Document存储在collection中，collection的概念与关系型数据库中表的概念相对应</p><p><img src="https://docs.mongodb.com/manual/images/crud-annotated-collection.bakedsvg.svg"></p></li><li><p><a href="https://docs.mongodb.com/manual/core/databases-and-collections/#databases">Database</a>：</p><p>Database可以包含多个collection</p></li></ul><h2 id="副本集Replica-Set"><a href="#副本集Replica-Set" class="headerlink" title="副本集Replica Set"></a>副本集Replica Set</h2><p>副本集中的每个节点维护着相同的数据，副本集的存在是为了提供数据冗余，提供高可用</p><p>副本集包含多个数据承载节点和一个可选的仲裁节点；在数据承载节点中，只有一个节点被视为主节点，其他的数据承载节点被视为备份节点</p><p>主节点接收所有写操作，主节点记录所有对数据集的更改，将其作为oplog。</p><p><img src="https://docs.mongodb.com/manual/images/replica-set-read-write-operations-primary.bakedsvg.svg"></p><p>备份节点重复主节点的oplog，并将其中的操作应用在备份节点的数据中，从而与主节点之间形成同步。如果主节点不可用，有资格的备份节点将会选举出新的主节点。</p><h2 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h2><p>分片的作用是将数据分布在多个机器上，MongoDB使用分片支持部署超大规模的数据，并提供高吞吐。</p><p>MongoDB的分片集群包含以下组件：</p><ul><li><p><a href="https://docs.mongodb.com/manual/core/sharded-cluster-shards/">分片shard</a></p><p>每个分片是分片数据的自己，每个分片都可以部署为一个replica set</p></li><li><p><a href="https://docs.mongodb.com/manual/core/sharded-cluster-query-router/">路由mongos</a></p><p><code>mongos</code>作为一个查询的路由，作为用户查询MongoDB分片集群的入口</p></li><li><p><a href="https://docs.mongodb.com/manual/core/sharded-cluster-config-servers/">配置服务器config servers</a></p><p>配置服务器存放了集群的元数据和配置设置</p></li></ul><p><img src="https://docs.mongodb.com/manual/images/sharded-cluster-production-architecture.bakedsvg.svg"></p><p>MongoDB的将数据在collection级别分片， 将collection数据分布在集群的shards之间。</p><p>用户在使用分片集群与非分片集群的MongoDB时，在使用上没有区别，通过客户端和mongouri即可访问；</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Debezium的Flink-MySQL-CDC源码分析</title>
      <link href="/2021/102c449e/"/>
      <url>/2021/102c449e/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Debezium的Flink-MySQL-CDC源码分析"><a href="#基于Debezium的Flink-MySQL-CDC源码分析" class="headerlink" title="基于Debezium的Flink-MySQL-CDC源码分析"></a>基于Debezium的Flink-MySQL-CDC源码分析</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 流处理 </category>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 流处理 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 源码 </tag>
            
            <tag> CDC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink HiveSink源码分析</title>
      <link href="/2021/26c0fffa/"/>
      <url>/2021/26c0fffa/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink-HiveSink源码分析"><a href="#Flink-HiveSink源码分析" class="headerlink" title="Flink HiveSink源码分析"></a>Flink HiveSink源码分析</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 流处理 </category>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 流处理 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink StreamingFileSink源码分析</title>
      <link href="/2021/6a92d281/"/>
      <url>/2021/6a92d281/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink-StreamingFileSink源码分析"><a href="#Flink-StreamingFileSink源码分析" class="headerlink" title="Flink StreamingFileSink源码分析"></a>Flink StreamingFileSink源码分析</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>org.apache.flink.streaming.api.functions.sink.filesystem.StreamingFileSink</code></p><p>Flink中的<code>StreamingFileSink</code>是用来将流式数据写入文件系统的Sink。在<code>StreamingFileSink</code>中会将数据首先发送到bucket中，bucket与存储目录相关，然后与Checkpoint机制配合来达到精准一次的语义。</p><p>其中<code>BucketAssigner</code>用来定义如何将元素写入哪些目录中，默认的BucketAssigner实现是DataTimeBucketAssigner，每个小时会创建一个bucket。</p><p>在写入文件时，文件有三种状态：<code>in-progress</code>，<code>pending</code>，<code>finished</code>，这是为了提供对精准一次语义的保证，新来的数据会首先写入到<code>in-progress</code>文件中，当通过用户定义的RollingPolicy触发了文件的关闭条件时(比如文件大小)，会关闭in-progress文件，并向一个新的<code>in-progress</code>文件中继续写数据。直到收到Checkpoint成功的信息时，会将<code>pending</code>的文件转换为<code>finished</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131203.png"></p><h2 id="源码分析-Base-Flink-1-12-3"><a href="#源码分析-Base-Flink-1-12-3" class="headerlink" title="源码分析(Base Flink-1.12.3)"></a>源码分析(Base Flink-1.12.3)</h2><h3 id="StreamingFileSink工作流程"><a href="#StreamingFileSink工作流程" class="headerlink" title="StreamingFileSink工作流程"></a>StreamingFileSink工作流程</h3><h4 id="实例创建"><a href="#实例创建" class="headerlink" title="实例创建"></a>实例创建</h4><p>首先分析<code>StreamingFileSink</code>整体工作流程，下文摘录主要源码进行说明。</p><p><code>StreamingFileSink</code>继承自<code>RichSinkFunction</code>，并且实现了与checkpoint相关的两个接口(与Checkpoint有关的功能在下面逐步提及)。</p><p>构造函数源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamingFileSink</span>&lt;IN&gt; <span class="keyword">extends</span> <span class="title class_">RichSinkFunction</span>&lt;IN&gt; <span class="keyword">implements</span> <span class="title class_">CheckpointedFunction</span>, CheckpointListener&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">     <span class="comment">// StreamingFileSink构造函数</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@code</span> StreamingFileSink&#125; that writes files to the given base directory with</span></span><br><span class="line"><span class="comment">     * the give buckets properties.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">StreamingFileSink</span><span class="params">(BucketsBuilder&lt;IN, ?, ? extends BucketsBuilder&lt;IN, ?, ?&gt;&gt; bucketsBuilder,</span></span><br><span class="line"><span class="params">            <span class="type">long</span> bucketCheckInterval)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(bucketCheckInterval &gt; <span class="number">0L</span>);</span><br><span class="line">        <span class="built_in">this</span>.bucketsBuilder = Preconditions.checkNotNull(bucketsBuilder);</span><br><span class="line">        <span class="built_in">this</span>.bucketCheckInterval = bucketCheckInterval;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><code>StreamingFileSink</code>的构造函数的访问修饰符是<code>protected</code>，需要通过两个Builder方法新建实例。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131546.png" alt="image-20210704233834035"></p><p>而且这两个Builder均继承自<code>StreamingFileSink</code>的内部抽象类<code>BucketsBuilder</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131650.png" alt="image-20210705000231492"></p><p>这两个类的实例化是通过<code>StreamingFileSink</code>中的两个静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the builder for a &#123;<span class="doctag">@link</span> StreamingFileSink&#125; with row-encoding format.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> basePath the base path where all the buckets are going to be created as</span></span><br><span class="line"><span class="comment"> *     sub-directories.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encoder the &#123;<span class="doctag">@link</span> Encoder&#125; to be used when writing elements in the buckets.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;IN&gt; the type of incoming elements</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The builder where the remaining of the configuration parameters for the sink can be</span></span><br><span class="line"><span class="comment"> *     configured. In order to instantiate the sink, call &#123;<span class="doctag">@link</span> RowFormatBuilder#build()&#125; after</span></span><br><span class="line"><span class="comment"> *     specifying the desired parameters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;IN&gt; StreamingFileSink.DefaultRowFormatBuilder&lt;IN&gt; <span class="title function_">forRowFormat</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Path basePath, <span class="keyword">final</span> Encoder&lt;IN&gt; encoder)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultRowFormatBuilder</span>&lt;&gt;(basePath, encoder, <span class="keyword">new</span> <span class="title class_">DateTimeBucketAssigner</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the builder for a &#123;<span class="doctag">@link</span> StreamingFileSink&#125; with bulk-encoding format.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> basePath the base path where all the buckets are going to be created as</span></span><br><span class="line"><span class="comment"> *     sub-directories.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> writerFactory the &#123;<span class="doctag">@link</span> BulkWriter.Factory&#125; to be used when writing elements in the</span></span><br><span class="line"><span class="comment"> *     buckets.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;IN&gt; the type of incoming elements</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The builder where the remaining of the configuration parameters for the sink can be</span></span><br><span class="line"><span class="comment"> *     configured. In order to instantiate the sink, call &#123;<span class="doctag">@link</span> BulkFormatBuilder#build()&#125;</span></span><br><span class="line"><span class="comment"> *     after specifying the desired parameters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;IN&gt; StreamingFileSink.DefaultBulkFormatBuilder&lt;IN&gt; <span class="title function_">forBulkFormat</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Path basePath, <span class="keyword">final</span> BulkWriter.Factory&lt;IN&gt; writerFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StreamingFileSink</span>.DefaultBulkFormatBuilder&lt;&gt;(</span><br><span class="line">            basePath, writerFactory, <span class="keyword">new</span> <span class="title class_">DateTimeBucketAssigner</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="状态初始化与数据消费"><a href="#状态初始化与数据消费" class="headerlink" title="状态初始化与数据消费"></a>状态初始化与数据消费</h4><p>状态初始化时会创建<code>StreamingFileSinkHelper</code>，这个<code>StreamingFileSinkHelper</code>基本上包含了所有的状态、数据消费的行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StreamingFileSink中实现的与sink以及checkpoint相关的methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initializeState</span><span class="params">(FunctionInitializationContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.helper =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">StreamingFileSinkHelper</span>&lt;&gt;(</span><br><span class="line">                        bucketsBuilder.createBuckets(getRuntimeContext().getIndexOfThisSubtask()),</span><br><span class="line">                        context.isRestored(),</span><br><span class="line">                        context.getOperatorStateStore(),</span><br><span class="line">                        ((StreamingRuntimeContext) getRuntimeContext()).getProcessingTimeService(),</span><br><span class="line">                        bucketCheckInterval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyCheckpointComplete</span><span class="params">(<span class="type">long</span> checkpointId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.helper.commitUpToCheckpoint(checkpointId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyCheckpointAborted</span><span class="params">(<span class="type">long</span> checkpointId)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">snapshotState</span><span class="params">(FunctionSnapshotContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Preconditions.checkState(helper != <span class="literal">null</span>, <span class="string">&quot;sink has not been initialized&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.helper.snapshotState(context.getCheckpointId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(IN value, SinkFunction.Context context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.helper.onElement(</span><br><span class="line">                value,</span><br><span class="line">                context.currentProcessingTime(),</span><br><span class="line">                context.timestamp(),</span><br><span class="line">                context.currentWatermark());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.helper != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.helper.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>数据消费的时序图及其说明如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131187.png"></p><p>进行数据消费时，主要的步骤有以下几步：</p><ol><li><p>会调用<code>buckets</code>的<code>onElement</code>方法来进行写数据之前的一些状态更新和<code>bucket</code>的检查，检查<code>bucket</code>所对应的目录，这部分的代码主要是<code>org.apache.flink.streaming.api.functions.sink.filesystem.Buckets#getOrCreateBucketForBucketId</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Bucket&lt;IN, BucketID&gt; <span class="title function_">getOrCreateBucketForBucketId</span><span class="params">(<span class="keyword">final</span> BucketID bucketId)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Bucket&lt;IN, BucketID&gt; bucket = activeBuckets.get(bucketId); <span class="comment">// 根据bucketid检查一下之前是否创建过bucket</span></span><br><span class="line">    <span class="keyword">if</span> (bucket == <span class="literal">null</span>) &#123; <span class="comment">// 创建一个新的bucket</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Path</span> <span class="variable">bucketPath</span> <span class="operator">=</span> assembleBucketPath(bucketId);</span><br><span class="line">        bucket =</span><br><span class="line">                bucketFactory.getNewBucket(</span><br><span class="line">                        subtaskIndex,</span><br><span class="line">                        bucketId,</span><br><span class="line">                        bucketPath,</span><br><span class="line">                        maxPartCounter,</span><br><span class="line">                        bucketWriter,</span><br><span class="line">                        rollingPolicy,</span><br><span class="line">                        fileLifeCycleListener,</span><br><span class="line">                        outputFileConfig);</span><br><span class="line">        activeBuckets.put(bucketId, bucket);</span><br><span class="line">        notifyBucketCreate(bucket);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bucket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>bucket</code>检查完成后调用bucket的<code>write</code>方法，即<code>org.apache.flink.streaming.api.functions.sink.filesystem.Bucket#write</code>，在<code>write</code>方法中会检查文件是否触发了rolling的条件，如果触发了rolling则关闭当前文件，再新建下一个文件；然后将数据写入文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(IN element, <span class="type">long</span> currentTime)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (inProgressPart == <span class="literal">null</span> || rollingPolicy.shouldRollOnEvent(inProgressPart, element)) &#123;<span class="comment">// 检查是否触发了需要rolling的条件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(</span><br><span class="line">                    <span class="string">&quot;Subtask &#123;&#125; closing in-progress part file for bucket id=&#123;&#125; due to element &#123;&#125;.&quot;</span>,</span><br><span class="line">                    subtaskIndex,</span><br><span class="line">                    bucketId,</span><br><span class="line">                    element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inProgressPart = rollPartFile(currentTime);</span><br><span class="line">    &#125;</span><br><span class="line">    inProgressPart.write(element, currentTime); <span class="comment">// 向in-progress文件中写数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>org.apache.flink.streaming.api.functions.sink.filesystem.Bucket#rollPartFile</code>方法中，执行的<code>org.apache.flink.streaming.api.functions.sink.filesystem.Bucket#closePartFile</code>方法，会将当前关闭的in-progress文件存入状态中，等待checkpoint时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> InProgressFileWriter.PendingFileRecoverable <span class="title function_">closePartFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    InProgressFileWriter.<span class="type">PendingFileRecoverable</span> <span class="variable">pendingFileRecoverable</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (inProgressPart != <span class="literal">null</span>) &#123;</span><br><span class="line">        pendingFileRecoverable = inProgressPart.closeForCommit();</span><br><span class="line">        <span class="comment">// 将文件关闭。处于当前checkpointid时，该状态会保存所有关闭的in-progress文件，实际上此时文件逻辑状态已经转换为pending。</span></span><br><span class="line">        pendingFileRecoverablesForCurrentCheckpoint.add(pendingFileRecoverable); </span><br><span class="line">        inProgressPart = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pendingFileRecoverable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="文件状态转换与checkpoint"><a href="#文件状态转换与checkpoint" class="headerlink" title="文件状态转换与checkpoint"></a>文件状态转换与checkpoint</h4><p>在触发checkpoint时有两个方法，一个是常规触发checkpoint时执行的<code>snapshotState</code>方法，另一个是checkpoint完成时执行的回调<code>notifyCheckpointComplete</code></p><p>因为在写文件时需要一致性的保证，所以采用这种两阶段提交的方式，在执行<code>notifyCheckpointComplete</code>方法后才会真正的提交完成。</p><h5 id="执行checkpoint逻辑"><a href="#执行checkpoint逻辑" class="headerlink" title="执行checkpoint逻辑"></a>执行checkpoint逻辑</h5><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131060.png"></p><p>在<code>org.apache.flink.streaming.api.functions.sink.filesystem.Buckets#snapshotActiveBuckets</code>中依次对每个bucket调用<code>org.apache.flink.streaming.api.functions.sink.filesystem.Bucket#onReceptionOfCheckpoint</code>，然后再将<code>onReceptionOfCheckpoint</code>返回的状态进行序列化保存</p><p>这其中的主要方法是<code>onReceptionOfCheckpoint</code>，这是每个<code>bucket</code>执行<code>checkpoint</code>的主要逻辑.</p><p>在这个方法中可以主要分为两个部分，其一是处理pending状态的文件，其二是处理当前正在写的in-progress文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">BucketState&lt;BucketID&gt; <span class="title function_">onReceptionOfCheckpoint</span><span class="params">(<span class="type">long</span> checkpointId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    prepareBucketForCheckpointing(checkpointId);  <span class="comment">// 处理pending状态的文件，将pending的文件的状态进行保存</span></span><br><span class="line"></span><br><span class="line">    InProgressFileWriter.<span class="type">InProgressFileRecoverable</span> <span class="variable">inProgressFileRecoverable</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">inProgressFileCreationTime</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前正在写的文件不为空，需要处理当前正在写的文件，记录相关信息到状态中</span></span><br><span class="line">    <span class="keyword">if</span> (inProgressPart != <span class="literal">null</span>) &#123;</span><br><span class="line">        inProgressFileRecoverable = inProgressPart.persist();</span><br><span class="line">        inProgressFileCreationTime = inProgressPart.getCreationTime();</span><br><span class="line">        <span class="built_in">this</span>.inProgressFileRecoverablesPerCheckpoint.put(</span><br><span class="line">                checkpointId, inProgressFileRecoverable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BucketState</span>&lt;&gt;(</span><br><span class="line">            bucketId,</span><br><span class="line">            bucketPath,</span><br><span class="line">            inProgressFileCreationTime,</span><br><span class="line">            inProgressFileRecoverable,</span><br><span class="line">            pendingFileRecoverablesPerCheckpoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理pending文件的状态主要是以下方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">prepareBucketForCheckpointing</span><span class="params">(<span class="type">long</span> checkpointId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (inProgressPart != <span class="literal">null</span> &amp;&amp; rollingPolicy.shouldRollOnCheckpoint(inProgressPart)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            LOG.debug(</span><br><span class="line">                    <span class="string">&quot;Subtask &#123;&#125; closing in-progress part file for bucket id=&#123;&#125; on checkpoint.&quot;</span>,</span><br><span class="line">                    subtaskIndex,</span><br><span class="line">                    bucketId);</span><br><span class="line">        &#125;</span><br><span class="line">        closePartFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pendingFileRecoverablesForCurrentCheckpoint.isEmpty()) &#123;<span class="comment">// 将存储在当前checkpoint中的pending文件放到所有checkpoint的集合的状态中</span></span><br><span class="line">        pendingFileRecoverablesPerCheckpoint.put(</span><br><span class="line">                checkpointId, pendingFileRecoverablesForCurrentCheckpoint);</span><br><span class="line">        pendingFileRecoverablesForCurrentCheckpoint = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>处理当前正在写的in-progress文件的状态主要是这个代码段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BucketState&lt;BucketID&gt; <span class="title function_">onReceptionOfCheckpoint</span><span class="params">(<span class="type">long</span> checkpointId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 如果当前正在写的文件不为空，需要处理当前正在写的文件，记录相关信息到状态中</span></span><br><span class="line">    <span class="keyword">if</span> (inProgressPart != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// persist()主要是用来保存当前状态写入的信息，比如写入偏移量，</span></span><br><span class="line">        inProgressFileRecoverable = inProgressPart.persist();</span><br><span class="line">        inProgressFileCreationTime = inProgressPart.getCreationTime();</span><br><span class="line">        <span class="built_in">this</span>.inProgressFileRecoverablesPerCheckpoint.put(</span><br><span class="line">                checkpointId, inProgressFileRecoverable);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="checkpoint完成时"><a href="#checkpoint完成时" class="headerlink" title="checkpoint完成时"></a>checkpoint完成时</h5><p><code>org.apache.flink.streaming.api.functions.sink.filesystem.StreamingFileSink#notifyCheckpointComplete</code>方法用来执行checkpoint完成时的逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131350.png"></p><p>这其中最终调用的方法是<code>org.apache.flink.streaming.api.functions.sink.filesystem.Bucket#onSuccessfulCompletionOfCheckpoint</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">onSuccessfulCompletionOfCheckpoint</span><span class="params">(<span class="type">long</span> checkpointId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    checkNotNull(bucketWriter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有的pending文件</span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;Long, List&lt;InProgressFileWriter.PendingFileRecoverable&gt;&gt;&gt; it =</span><br><span class="line">            pendingFileRecoverablesPerCheckpoint</span><br><span class="line">                    .headMap(checkpointId, <span class="literal">true</span>)</span><br><span class="line">                    .entrySet()</span><br><span class="line">                    .iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;Long, List&lt;InProgressFileWriter.PendingFileRecoverable&gt;&gt; entry = it.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (InProgressFileWriter.PendingFileRecoverable pendingFileRecoverable :</span><br><span class="line">                entry.getValue()) &#123;</span><br><span class="line">            <span class="comment">// 对所有的pending文件进行提交，将文件逻辑的状态转换为finished，可供下游使用了</span></span><br><span class="line">            bucketWriter.recoverPendingFile(pendingFileRecoverable).commit();</span><br><span class="line">        &#125;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对当前的in-progress文件进行处理</span></span><br><span class="line">    cleanupInProgressFileRecoverables(checkpointId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>至此，StreamingFileSink对数据的处理流程基本完成。</strong></p><p>附：</p><p>写数据时的inprogress文件</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131121.png" alt="image-20210705161008160"></p><p>finished文件，可供下游使用</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310132279.png" alt="image-20210705161125002"></p><h2 id="StreamingFileSink对Failover的处理"><a href="#StreamingFileSink对Failover的处理" class="headerlink" title="StreamingFileSink对Failover的处理"></a>StreamingFileSink对Failover的处理</h2><p>StreamingFileSink在恢复状态时，会恢复每个bucket中的计数信息、正在写的in-progress、pending的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310132932.png" alt="image-20210705171020224"></p><p>当Failover出现在不同的阶段：</p><p><img src="https://gitee.com/halfcoke/blog_img_2021/raw/master/20210705172516.png" alt="無標題-2021-07-05-1613"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 流处理 </category>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 流处理 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cygwin：用来执行linux命令的工具</title>
      <link href="/2021/8d1f253e/"/>
      <url>/2021/8d1f253e/</url>
      
        <content type="html"><![CDATA[<h1 id="Cygwin：在Windows上执行linux命令的工具"><a href="#Cygwin：在Windows上执行linux命令的工具" class="headerlink" title="Cygwin：在Windows上执行linux命令的工具"></a>Cygwin：在Windows上执行linux命令的工具</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>官网链接：<a href="https://cygwin.com/index.html">https://cygwin.com/index.html</a></p><p>维基百科：<a href="https://zh.wikipedia.org/wiki/Cygwin">https://zh.wikipedia.org/wiki/Cygwin</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接<a href="https://cygwin.com/setup-x86_64.exe">点击链接</a>下载64位版本的Cygwin，安装过程比较简单，一直下一步即可，建议保留此安装包，后续在Cygwin中安装软件还会需要。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>安装软件需要运行Cygwin安装包，一直点击下一步到如下页面。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108820.png" alt="image-20210509160734409"></p><p>比如要安装wget，则在搜索框中输入<code>wget</code>，view选择Full。然后选择软件版本，我这里已经安装过了，所以会有<code>keep</code>和<code>reinstall</code>选项。然后再一直点击下一步即可。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108541.png" alt="image-20210509160832027"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用<code>apt-cyg</code>对软件进行安装，首先需要下载安装<code>apt-cyg</code>。在<a href="%5Bhttps://github.com/transcode-open/apt-cyg%5D(https://github.com/transcode-open/apt-cyg)">链接</a>中下载<code>apt-cyg</code>，然后copy到<code>C:\cygwin64\bin</code>目录下，这里<code>C:\cygwin64\</code>是我的cygwin的安装目录，根据情况进行修改。</p><p>这时启动cygwin终端已经可以使用<code>apt-cyg</code>命令了。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108268.png" alt="image-20210509161847316"></p><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>如果windows本身安装了ssh，需要卸掉原来的ssh客户端，避免与<code>cygwin</code>中的冲突，冲突的情况下会无法使用<code>rsync</code>命令</p><h3 id="Cygwin使用rsync报错解决"><a href="#Cygwin使用rsync报错解决" class="headerlink" title="Cygwin使用rsync报错解决"></a>Cygwin使用rsync报错解决</h3><p>参考：<a href="https://zhuanlan.zhihu.com/p/110217604">https://zhuanlan.zhihu.com/p/110217604</a></p><p>删除windows的ssh即可</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 系统工具 </category>
          
          <category> cygwin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统工具 </tag>
            
            <tag> cygwin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven部分配置项解释</title>
      <link href="/2021/4346098d/"/>
      <url>/2021/4346098d/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven部分配置项解释"><a href="#Maven部分配置项解释" class="headerlink" title="Maven部分配置项解释"></a>Maven部分配置项解释</h1><p>首先来看我当前的<code>pom.xml</code>文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>你的id<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>你的id<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build.target.pathname</span>&gt;</span>你的路径名<span class="tag">&lt;/<span class="name">build.target.pathname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build.target.dir</span>&gt;</span>$&#123;project.basedir&#125;/$&#123;build.target.pathname&#125;<span class="tag">&lt;/<span class="name">build.target.dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除生成的目标目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filesets</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--在这里指定哪些文件夹也需要删除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;build.target.pathname&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filesets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将依赖放入lib文件夹--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 在这里将依赖的jar包(你程序的依赖),copy进哪个文件夹--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;build.target.dir&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--排除打入jar包的文件路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 在这里是指将编译好的jar包(你自己的程序),copy进哪个文件夹--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">$&#123;build.target.dir&#125;/lib</span><br><span class="line"><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--这个选项是在文件中生成classpath，这样只通过&quot;java -cp jarname mainclass&quot;执行自己的jar包就可以了--&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpathLayoutType</span>&gt;</span>custom<span class="tag">&lt;/<span class="name">classpathLayoutType</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">customClasspathLayout</span>&gt;</span>$$&#123;artifact.artifactId&#125;-$$&#123;artifact.version&#125;$$&#123;dashClassifier?&#125;.$$&#123;artifact.extension&#125;<span class="tag">&lt;/<span class="name">customClasspathLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--在这里表示，会排除static路径下的所有文件，不会打入jar包中，这个路径需要是classes目录的相对路径</span></span><br><span class="line"><span class="comment">https://maven.apache.org/plugins/maven-jar-plugin/examples/include-exclude.html</span></span><br><span class="line"><span class="comment">实际就是resources下的路径，比如我这里static文件夹就位于resources下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>static/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;plugin&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;version&gt;3.0.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;descriptorRefs&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/descriptorRefs&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;outputDirectory&gt;$&#123;build.target.dir&#125;/lib&lt;/outputDirectory&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;executions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;id&gt;make-assembly&lt;/id&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;phase&gt;package&lt;/phase&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;goal&gt;single&lt;/goal&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/executions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/plugin&gt;--&gt;</span>         </span><br><span class="line">            <span class="comment">&lt;!--用来指定将哪些文件复制到哪里去--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--复制的目标地址，这个变量是我自定义的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;build.target.dir&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--资源地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span></span><br><span class="line">$&#123;project.basedir&#125;/src/main/resources/static/</span><br><span class="line"><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.63.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pom文件的整体说明如上，接下来具体介绍一下pom文件中的不同内容。</p><h3 id="Maven内置变量"><a href="#Maven内置变量" class="headerlink" title="Maven内置变量"></a>Maven内置变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.build.sourceDirectory&#125;:项目的主源码目录，默认为src/main/java/.</span>   </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.build.testSourceDirectory&#125;:项目的测试源码目录，默认为/src/test/java/.</span>  </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.build.directory&#125;:项目构建输出目录，默认为target/.</span>         </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.build.outputDirectory&#125;:项目主代码编译输出目录，默认为target/classes/.</span>    </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.build.testOutputDirectory&#125;:项目测试代码编译输出目录，默认为target/testclasses/.</span>     </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.groupId&#125;:项目的groupId.</span>    </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.artifactId&#125;:项目的artifactId.</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.version&#125;:项目的version,等同于<span class="variable">$&#123;version&#125;</span></span>               </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;project.build.finalName&#125;:项目打包输出文件的名称，默认为<span class="variable">$&#123;project.artifactId&#125;</span><span class="variable">$&#123;project.version&#125;</span>.</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/fly910905/article/details/79119349">https://blog.csdn.net/fly910905/article/details/79119349</a></p><p><a href="https://www.cnblogs.com/willvi624/p/9456239.html">https://www.cnblogs.com/willvi624/p/9456239.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 开发工具 </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Server 20.04 Legacy install image安装过程</title>
      <link href="/2021/83723065/"/>
      <url>/2021/83723065/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-Server-20-04-Legacy-install-image安装过程"><a href="#Ubuntu-Server-20-04-Legacy-install-image安装过程" class="headerlink" title="Ubuntu Server 20.04 Legacy install image安装过程"></a>Ubuntu Server 20.04 Legacy install image安装过程</h1><h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><p>使用Ubuntu官网主页的下载的镜像安装起来会出错，后来查询资料得知，可以使用传统安装镜像，具体原因没有深究，记录本次安装过程如下，包含了每一个步骤。</p><p>镜像下载网页：<a href="http://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/">http://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/</a></p><p>镜像下载地址：<a href="http://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/ubuntu-20.04.1-legacy-server-amd64.iso">http://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/ubuntu-20.04.1-legacy-server-amd64.iso</a></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>只做启动盘等工具的过程略</p><ol><li><p>从镜像启动安装程序，此处可以直接选中文，方向键切换，回车键确认。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136553.png" alt="image-20210318142402884"></p></li><li><p>安装 Ubuntu服务器版，可能会卡顿一下。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136887.png" alt="image-20210318142453839"></p></li><li><p>选择语言，直接yes就行。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136530.png" alt="image-20210318142655508"></p></li><li><p>检测键盘布局，选否，一会自己手动选。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136416.png" alt="image-20210318142725215"></p></li><li><p>选Englis(us)</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136449.png" alt="image-20210318142801389"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136965.png" alt="image-20210318142819409"></p></li><li><p>等一会</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136540.png" alt="image-20210318142952977"></p></li><li><p>选择网络接口</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136802.png" alt="image-20210318143456635"></p></li><li><p>配置静态ip</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136699.png" alt="image-20210318143851952"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136636.png" alt="image-20210318143902464"></p><p>接下来的一些信息根据个人情况填写，主要就是主机名、用户名、ip，网关等</p></li><li><p>进行磁盘分区，这里选手动分区，因为咱们需要为&#x2F;boot目录创建一个分区。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136708.png" alt="image-20210318144237167"></p></li><li><p>先把之前旧的信息清理掉，先选择配置逻辑卷管理器，如果有弹窗就选‘是’</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136111.png" alt="image-20210318144323051"></p></li><li><p>删除原来的逻辑卷，有几个删除几个，可能会卡顿，等一会。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136941.png"></p></li><li><p>逻辑卷都删除完了以后要删除卷组，然后完成，返回。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137055.png" alt="image-20210318144618435"></p></li><li><p>接下来我们选中要安装系统的ssd，敲一下回车，写入空的分区表。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137723.png" alt="image-20210318144718509"></p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/20210318144749.png" alt="image-20210318144749522"></p></li><li><p>创建分区，光标放在这一行</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137549.png" alt="image-20210318150852362"></p><p>创建新分区</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137417.png" alt="image-20210318150924747"></p><p>先建立一个1GB大小的分区，用来挂载<code>/boot</code>目录，选择<code>主分区</code>，分区的位置选<code>开始</code>。这里选择下图这样的配置，然后分区设定结束。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137234.png" alt="image-20210318151106480"></p></li><li><p>然后再配置逻辑卷，弹出的窗口还是选择是。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137222.png" alt="image-20210318151249883"></p><p>创建卷组，卷组名就<code>ubuntu</code>就可以</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137612.png" alt="image-20210318151310165"></p><p>设备选择有<code>free</code>标记的那里，按空格选择，按回车确认，然后继续选择是</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/20210318151343.png" alt="image-20210318151343523"></p><p>创建两个逻辑卷，一个命名为swap，空间为2GB，一个命名为root，剩余空间都给过去。配置详情如下，然后完成返回。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137645.png" alt="image-20210318151742323"></p></li><li><p>设置挂载路径和文件系统格式</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137073.png" alt="image-20210318151848705"></p><p>其中root那个设置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137603.png" alt="image-20210318151923289"></p><p>swap那个设置如下：</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/20210318151952.png" alt="image-20210318151952830"></p><p>最终效果如下，然后选择<code>结束分区设定并将修改写入磁盘</code>，然后选<code>是</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137160.png" alt="image-20210318152009023"></p></li><li><p>http代理不需要设置</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137615.png" alt="image-20210318153101142"></p></li><li><p>不用自动安装更新</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/20210318153214.png" alt="image-20210318153214470"></p></li><li><p>安装openssh服务</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137130.png" alt="image-20210318153238318"></p></li><li><p>安装引导，注意选择设备</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137570.png" alt="image-20210318155100368"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310137425.png" alt="image-20210318155118729"></p></li><li><p>安装完成后重启即可。</p></li></ol><h2 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h2><h3 id="更改root密码"><a href="#更改root密码" class="headerlink" title="更改root密码"></a>更改root密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><h3 id="静态ip"><a href="#静态ip" class="headerlink" title="静态ip"></a>静态ip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@slave3:  vi /etc/netplan/01-*.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>此处注意yaml文件格式</strong>，<code>:</code>后要有空格，缩进至少两个空格，同级缩进保持一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: NetworkManager</span><br><span class="line">  ethernets:</span><br><span class="line">    eno1:   <span class="comment"># 网卡名称</span></span><br><span class="line">      dhcp4: no     <span class="comment"># 关闭dhcp</span></span><br><span class="line">      dhcp6: no</span><br><span class="line">      addresses: [10.254.13.19/24]  <span class="comment"># 静态ip,根据实际情况配置</span></span><br><span class="line">      gateway4: 10.254.13.254    <span class="comment"># 网关</span></span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [223.5.5.5, 114.114.114.114]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@slave3:  netplan apply</span><br></pre></td></tr></table></figure><h3 id="ssh服务"><a href="#ssh服务" class="headerlink" title="ssh服务"></a>ssh服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@slave3: vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>修改端口，禁用root密码登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启sshd服务</span></span><br><span class="line">root@slave3: systemctl restart sshd</span><br></pre></td></tr></table></figure><p><strong>注意在当前用户和root用户执行一遍下面的命令</strong>，一路敲回车即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@slave3: ssh-keygen</span><br><span class="line">user@slave3: ssh-keygen</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 系统安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux如何在LVM中移除PV</title>
      <link href="/2021/2d54e946/"/>
      <url>/2021/2d54e946/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux如何在LVM中移除PV"><a href="#Linux如何在LVM中移除PV" class="headerlink" title="Linux如何在LVM中移除PV"></a>Linux如何在LVM中移除PV</h1><p>网上很多人都在讲如何直接移除PV，但是实际过程中，很有可能我们的PV还没有空闲空间，这样也就没办法直接用<code>pvmove</code>指令。</p><p>我们先介绍如何将pv空闲出来。</p><h2 id="移除PV准备工作"><a href="#移除PV准备工作" class="headerlink" title="移除PV准备工作"></a>移除PV准备工作</h2><p>通过<code>lsblk</code>命令我们可以看到，当前根目录的<code>LVM</code>是用了两个盘的，即<code>sda</code>和<code>sdb</code>。我们想将<code>sda</code>从<code>LVM</code>中拿出来，这样<code>sda</code>就可以用来做别的事情了。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134687.png" alt="image-20210318100540412"></p><p>使用<code>df -hT</code>查看当前分区的使用情况，我们可以看到根目录只用了72G，<code>/home</code>目录空闲有249G，这个时候我们可以将<code>/home</code>中的一部分空间拿出来，最好空闲直接大于72G，保证能装得下。如果小于72G的时候不确定能不能装得下，这部分需要自己试一下。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134104.png" alt="image-20210318101352606"></p><p>我们执行一下<code>lvdisplay</code>，查看一下lv的信息，下图列出了部分内容。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/20210318101759.png" alt="image-20210318101759476"></p><p>这个时候我们执行<code>lvreduce -L 150G /dev/cl/home</code>命令，这条命令相当于将<code>/home</code>路径的空间直接缩小到150G，因为我们在上面通过<code>df -hT</code>看到了<code>/home</code>目录只用了144G。</p><p>这样我们相当于已经有空间用来存放根目录的数据了。</p><p>接下来我们执行移除PV的相关操作</p><h2 id="移除PV"><a href="#移除PV" class="headerlink" title="移除PV"></a>移除PV</h2><p>我们执行<code>pvs -o+pv_used</code>，只要<code>/dev/sda1</code>的<code>used</code>的是0就可以了。下面这个图忘记截了，放一个之前的数据的图。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/20210318103700.png" alt="image-20210318103700432"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 然后执行下面的命令，转移PV中的数据</span></span><br><span class="line">pvmove /dev/sda1</span><br><span class="line"><span class="comment"># 然后从vg中移除pv</span></span><br><span class="line">vgreduce &#123;vg组名&#125; /dev/sda1</span><br><span class="line">即：vgreduce cl /dev/sda1</span><br><span class="line"><span class="comment"># 然后移除PV</span></span><br><span class="line">pvremove /dev/sda1</span><br></pre></td></tr></table></figure><p>至此，所有步骤完成。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://www.2daygeek.com/linux-remove-delete-physical-volume-pv-from-volume-group-vg-in-lvm/">How to Remove Physical Volume from a Volume Group in LVM</a></p><p>[2] <a href="https://www.cnblogs.com/sparkdev/p/10213655.html">LVM : 缩减文件系统的容量</a></p><p>[3] <a href="https://halfcoke.github.io/2020/189b3b4/">Linux如何使用LVM进行磁盘扩容</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> LVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang远程开发配置</title>
      <link href="/2021/e1ea5816/"/>
      <url>/2021/e1ea5816/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang远程开发配置"><a href="#GoLang远程开发配置" class="headerlink" title="GoLang远程开发配置"></a>GoLang远程开发配置</h1><p><strong>本文介绍如何配置GoLang如何在服务器上进行调试开发</strong></p><p>附上官网说明:</p><p><a href="https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#step-2-run-delve-on-the-host-machine">https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#step-2-run-delve-on-the-host-machine</a></p><p>远程环境与本地环境版本最好相同，避免玄学错误</p><h2 id="远程环境"><a href="#远程环境" class="headerlink" title="远程环境"></a>远程环境</h2><p>远程使用Ubuntu18</p><p>Go语言linux版下载链接：<a href="https://golang.org/dl/go1.16.linux-amd64.tar.gz">go1.16.linux-amd64.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用命令解压压缩包</span></span><br><span class="line">tar -C ./env/go -zxf go1.16.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 在最下面加上这几行</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; go env &gt;&gt;&gt;</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=~/.go</span><br><span class="line"><span class="built_in">export</span> GOROOT=~/env/go</span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOBIN</span>:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># &lt;&lt;&lt; go env &lt;&lt;&lt;</span></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">go version</span><br><span class="line"><span class="comment"># 输出：go version go1.16 linux/amd64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装远程调试工具  </span></span><br><span class="line"><span class="comment"># github：https://github.com/go-delve/delve</span></span><br><span class="line"><span class="comment"># 执行以下命令：</span></span><br><span class="line">go install github.com/go-delve/delve/cmd/dlv@latest</span><br><span class="line"><span class="comment"># 安装完成后，执行以下命令验证：</span></span><br><span class="line">dlv version</span><br><span class="line"></span><br><span class="line">Delve Debugger</span><br><span class="line">Version: 1.6.0</span><br><span class="line">Build: <span class="variable">$Id</span>: 8cc9751909843dd55a46e8ea2a561544f70db34d $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 至此远程环境配置完成</span></span><br></pre></td></tr></table></figure><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><p>本地使用GoLand进行开发</p><p>在本地新建<code>Hello.go</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;run&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;finish&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>然后创建Go.mod文件</strong></p><p>！！！很重要，不然无法断点调试</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310132304.png" alt="image-20210306120910761"></p><p>在GoLand配置<code>Deployment</code>，将本地文件同步到服务器上，如何配置Deployment参考网络上其他教程，讲这部分内容的很多，主要步骤如下截图：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310132358.png" alt="image-20210306103624938"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310132513.png" alt="image-20210306103717312"></p><p>点击这里</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133594.png" alt="image-20210306103925994"></p><p>新建一个Go Remote配置</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133462.png" alt="image-20210306103951739"></p><p>根据自己的情况设置IP和端口</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133240.png" alt="image-20210306104039977"></p><p>在<strong>远程环境</strong>的终端上进入刚刚的项目路径（比如我的是<code>/tmp/go_practice/2021-03-06</code>），然后选择执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 main.go目录下执行 </span><br><span class="line">dlv debug --headless --listen=:2345 --api-version=2</span><br></pre></td></tr></table></figure><p>然后回到Goland点击调试即可</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133618.png" alt="image-20210306121101391"></p><p>直接在GoLand中进行远程调试就很方便了。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133606.png" alt="image-20210306121931106"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> 远程开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue ElementUI中的BackTop组件使用</title>
      <link href="/2021/e15cc6f/"/>
      <url>/2021/e15cc6f/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-ElementUI中的BackTop组件使用"><a href="#vue-ElementUI中的BackTop组件使用" class="headerlink" title="vue ElementUI中的BackTop组件使用"></a>vue ElementUI中的BackTop组件使用</h1><p><a href="https://element.eleme.cn/2.15/#/zh-CN/component/backtop">官方文档</a>中关于BackTop组件的使用说明有坑，实际上该组件的使用非常简单，见如下代码，记得把代码放在最外层的div里的第一个，不要放在尾部。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-backtop</span> <span class="attr">:bottom</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back_top&quot;</span>&gt;</span></span><br><span class="line">UP</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-backtop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p>[1]<a href="https://www.cnblogs.com/xyann/p/12739515.html">https://www.cnblogs.com/xyann/p/12739515.html</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUI </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载——跨域资源共享CORS浅析及便捷解决方案</title>
      <link href="/2021/7a010a2b/"/>
      <url>/2021/7a010a2b/</url>
      
        <content type="html"><![CDATA[<h1 id="转载——跨域资源共享CORS浅析及便捷解决方案"><a href="#转载——跨域资源共享CORS浅析及便捷解决方案" class="headerlink" title="转载——跨域资源共享CORS浅析及便捷解决方案"></a>转载——跨域资源共享CORS浅析及便捷解决方案</h1><blockquote><p>跨源资源共享 (CORS) （或通俗地译为跨域资源共享）是一种基于HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它origin（域，协议和端口），这样浏览器可以访问加载这些资源。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的”预检”请求。在预检中，浏览器发送的头中标示有HTTP方法和真实请求中会用到的头。</p></blockquote><blockquote><p>跨源HTTP请求的一个例子：运行在 <a href="http://domain-a.com/">http://domain-a.com</a> 的JavaScript代码使用XMLHttpRequest来发起一个到 <a href="https://domain-b.com/data.json">https://domain-b.com/data.json</a> 的请求。</p></blockquote><blockquote><p>出于安全性，浏览器限制脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。 这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102308378.jpeg"></p><p>在上图中，当我们访问<code>domain-a.com</code>的页面，这其中蓝色的image是从<code>domain-a.com</code>请求的，这属于同源请求，是被允许的。红色的image是从 <code>domain-b.com</code>请求的，需要收到CORS机制的控制</p><blockquote><p>跨源域资源共享（ CORS ）机制允许 Web 应用服务器进行跨源访问控制，从而使跨源数据传输得以安全进行。现代浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch ）使用 CORS，以降低跨源 HTTP 请求所带来的风险。</p></blockquote><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><blockquote><p>比如说，假如站点 <a href="http://foo.example/">http://foo.example</a> 的网页应用想要访问 <a href="http://bar.other/">http://bar.other</a> 的资源。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102308566.jpeg"></p><p>分别查看请求报文和响应报文</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /resources/public-data/ HTTP/1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-us,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://foo.example/examples/access-control/simpleXSInvocation.html</span><br><span class="line">Origin: http://foo.example</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 00:23:53 GMT</span><br><span class="line">Server: Apache/2.0.61</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: application/xml</span><br></pre></td></tr></table></figure><blockquote><p>第 1~10 行是请求首部。第10行 的请求首部字段 Origin 表明该请求来源于 <a href="http://foo.example/">http://foo.example</a>。<br>第 13~22 行是来自于 <a href="http://bar.other/">http://bar.other</a> 的服务端响应。响应中携带了响应首部字段 Access-Control-Allow-Origin（第 16 行）。使用 Origin 和 Access-Control-Allow-Origin 就能完成最简单的访问控制。本例中，服务端返回的 Access-Control-Allow-Origin: * 表明，该资源可以被任意外域访问。如果服务端仅允许来自 <a href="http://foo.example/">http://foo.example</a> 的访问，该首部字段的内容如下：<br>Access-Control-Allow-Origin: <a href="http://foo.example/">http://foo.example</a><br>现在，除了 <a href="http://foo.example/">http://foo.example</a>，其它外域均不能访问该资源（该策略由请求首部中的 ORIGIN 字段定义，见第10行）。Access-Control-Allow-Origin 应当为 * 或者包含由 Origin 首部字段所指明的域名。</p></blockquote><h2 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h2><blockquote><p>与前述简单请求不同，“需预检的请求”要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。”预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。<br>如下是一个需要执行预检请求的 HTTP 请求：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://bar.other/resources/post-here/&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> body = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callOtherDomain</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(invocation)</span><br><span class="line">    &#123;</span><br><span class="line">      invocation.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">      invocation.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;X-PINGOTHER&#x27;</span>, <span class="string">&#x27;pingpong&#x27;</span>);</span><br><span class="line">      invocation.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/xml&#x27;</span>);</span><br><span class="line">      invocation.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">      invocation.<span class="title function_">send</span>(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码使用 POST 请求发送一个 XML 文档，该请求包含了一个自定义的请求首部字段（X-PINGOTHER: pingpong）。另外，该请求的 Content-Type 为 application&#x2F;xml。因此，该请求需要首先发起“预检请求”。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102308507.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /resources/post-here/ HTTP/1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-us,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Origin: http://foo.example</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://foo.example</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><p>预检请求完成之后，发送实际请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST /resources/post-here/ HTTP/1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-us,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-PINGOTHER: pingpong</span><br><span class="line">Content-Type: text/xml; charset=UTF-8</span><br><span class="line">Referer: http://foo.example/examples/preflightInvocation.html</span><br><span class="line">Content-Length: 55</span><br><span class="line">Origin: http://foo.example</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">person</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>Arun<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:40 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://foo.example</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 235</span><br><span class="line">Keep-Alive: timeout=2, max=99</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">[Some GZIP&#x27;d payload]</span><br></pre></td></tr></table></figure><blockquote><p>浏览器检测到，从 JavaScript 中发起的请求需要被预检。从上面的报文中，我们看到，第 1~12 行发送了一个使用 OPTIONS 方法的“预检请求”。 OPTIONS 是 HTTP&#x2F;1.1 协议中定义的方法，用以从服务器获取更多信息。该方法不会对服务器资源产生影响。 预检请求中同时携带了下面两个首部字段：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br></pre></td></tr></table></figure><blockquote><p>首部字段 Access-Control-Request-Method 告知服务器，实际请求将使用 POST 方法。首部字段 Access-Control-Request-Headers 告知服务器，实际请求将携带两个自定义请求首部字段：X-PINGOTHER 与 Content-Type。服务器据此决定，该实际请求是否被允许。<br>第14~26 行为预检请求的响应，表明服务器将接受后续的实际请求。重点看第 17~20 行：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://foo.example</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure><blockquote><p>首部字段 Access-Control-Allow-Methods 表明服务器允许客户端使用 POST, GET 和 OPTIONS 方法发起请求。该字段与 HTTP&#x2F;1.1 Allow: response header 类似，但仅限于在需要访问控制的场景中使用。<br>首部字段 Access-Control-Allow-Headers 表明服务器允许请求中携带字段 X-PINGOTHER 与 Content-Type。与 Access-Control-Allow-Methods 一样，Access-Control-Allow-Headers 的值为逗号分割的列表。<br>最后，首部字段 Access-Control-Max-Age 表明该响应的有效时间为 86400 秒，也就是 24 小时。在有效时间内，浏览器无须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</p></blockquote><h2 id="便捷跨域解决方案"><a href="#便捷跨域解决方案" class="headerlink" title="便捷跨域解决方案"></a>便捷跨域解决方案</h2><ul><li>Fork github项目 <a href="https://github.com/Rob--W/cors-anywhere.git">https://github.com/Rob--W/cors-anywhere.git</a></li><li>在<a href="http://heroku.com/">heroku.com</a>注册一个账号</li><li>在<a href="http://heroku.com/">heroku.com</a>上创建一个app</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102308258.png"></p><ul><li>app名字唯一，后续访问时会用到，比如我的就是halfcoke1</li><li>选择GitHub，输入刚刚Fork的仓库，点击connect</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102308021.png"></p><ul><li>点击这两个位置，然后等待完成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102308207.png"></p><ul><li>接下来便可以通过 [<code>https://halfcoke1.herokuapp.com/](https://halfcoke1.herokuapp.com/)&lt;url&gt;</code>的方式进行访问，比如访问 <a href="https://halfcoke.herokuapp.com/https://github.com/login/oauth/access_token"><code>https://halfcoke1.herokuapp.com/https://github.com/login/oauth/access_token</code></a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS）</a></p><p>2.<a href="https://segmentfault.com/a/1190000011145364">https://segmentfault.com/a/1190000011145364</a></p><p><a href="https://segmentfault.com/a/1190000011145364">前端常见跨域解决方案（全）</a></p><p>3.Cover图片来自<a href="https://chorer.github.io/2019/11/07/F-AJAX%E4%B8%8E%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1%EF%BC%88%E4%BA%8C%EF%BC%89/">AJAX 与跨域通信（二）：跨域解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
          <category> WEB技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载——Ubuntu xRDP一键部署脚本</title>
      <link href="/2021/fbd067d7/"/>
      <url>/2021/fbd067d7/</url>
      
        <content type="html"><![CDATA[<h1 id="转载——Ubuntu-xRDP一键部署脚本"><a href="#转载——Ubuntu-xRDP一键部署脚本" class="headerlink" title="转载——Ubuntu xRDP一键部署脚本"></a>转载——Ubuntu xRDP一键部署脚本</h1><p><strong>原文链接：<a href="https://c-nergy.be/blog/?p=15978">https://c-nergy.be/blog/?p=15978</a></strong></p><h2 id="原文标题：xRDP-–在Ubuntu-16-04、18-04、20-04、20-10（脚本版本1-2-2）上轻松安装xRDP"><a href="#原文标题：xRDP-–在Ubuntu-16-04、18-04、20-04、20-10（脚本版本1-2-2）上轻松安装xRDP" class="headerlink" title="原文标题：xRDP –在Ubuntu 16.04、18.04、20.04、20.10（脚本版本1.2.2）上轻松安装xRDP"></a>原文标题：xRDP –在Ubuntu 16.04、18.04、20.04、20.10（脚本版本1.2.2）上轻松安装xRDP</h2><p>你好，世界， </p><p>基于用户的反馈，意见和建议，我们将发布一个<strong>新版本</strong>的的<strong>著名XRDP的安装程序脚本</strong>。此新版本基本上修复了此版本中解决的一些<strong>小错误</strong>，并提供了一些更好的代码逻辑。我们没有时间进行真正的广泛测试，但我们希望这些小的更改不会破坏脚本。 </p><p>我们著名的xrdp安装脚本的新版本将设置为 <strong>1.2.2</strong> （即 <strong>xrdp-installer-1.2.2.sh</strong>）。该脚本替换了所有以前的版本。  </p><p>所以，走吧！ </p><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>该 <strong>xrdp-installer-1.2.2.sh</strong> 脚本 <strong>缓解</strong> 之上XRDP的安装后的配置操作 <strong>的Ubuntu</strong> 操作系统。该版本是该脚本的最新版本，其中包括对Ubuntu 20.10（最近于2020年10月发布）的支持。 </p><h4 id="脚本版本和受支持的Ubuntu版本"><a href="#脚本版本和受支持的Ubuntu版本" class="headerlink" title="脚本版本和受支持的Ubuntu版本"></a>脚本版本和受支持的Ubuntu版本</h4><p>脚本版本将设置为 <strong>1.2.2。</strong>该 <strong>xrdp-installer-1.2.2.sh</strong> 脚本将支持以下Ubuntu操作系统版本 </p><ul><li>Ubuntu 16.04.x </li><li>Ubuntu 18.04.x</li><li>Ubuntu 20.04.x</li><li>Ubuntu 20.10</li></ul><h4 id="先决条件和假设"><a href="#先决条件和假设" class="headerlink" title="先决条件和假设"></a>先决条件和假设</h4><p>为了在使用脚本时获得最佳效果，应满足以下条件</p><ul><li>我们假设您的计算机在执行安装时已连接到Internet。这是必需的，因为需要在Ubuntu机器上下载并安装其他软件包和软件。</li><li>该脚本可在受支持的操作系统（Ubuntu 16.04.x，Ubuntu 18.04.x，Ubuntu 20.04，Ubuntu 20.10）上运行</li><li>需要使用官方的Ubuntu发行版（ 到目前为止，我们 <strong>不支持</strong>其他Ubuntu版本!! –将来可能会改变） </li><li>无需使用其他桌面界面（如果运行Ubuntu 16.04，xRDP会话将显示带有Dock菜单或Unity的Ubuntu Gnome Desktop）</li><li>如果还可以使用声音功能，则计算机上具有声音功能</li></ul><h4 id="此版本有什么新功能？"><a href="#此版本有什么新功能？" class="headerlink" title="此版本有什么新功能？"></a>此版本有什么新功能？</h4><p>如上所述，脚本并没有太大变化，仅引入了一些小的变化。它主要包括美观更改和较小的错误修复，以及将用户反馈建议包括到脚本中。因此，版本1.2.2解决了以下问题 </p><ul><li>指向通用的ubuntu存档（archive.ubuntu.com）而不是使用本地化的存档（be.archive.ubuntu.com）–<strong>感谢Thomas</strong></li><li>从github自动获取xrdp和xorgxrdp软件包，并在使用自定义安装模式时使用此信息来构建软件包（<strong>感谢Hiero</strong>）</li><li>选择删除选项时强制删除xrdp-installer-check.log文件，以确保相应地删除了xrdp文件夹（<strong>感谢Hiero</strong>）</li><li>自动化脚本版本控制</li></ul><p><strong>一个脚本的下载版本可在文章底部</strong></p><h3 id="如何使用脚本"><a href="#如何使用脚本" class="headerlink" title="如何使用脚本"></a>如何使用脚本</h3><p>该<strong>XRDP的安装程序-1.2.2</strong>脚本会以类似的方式与以前的版本工作。下一节将说明如何使用脚本下载，提取，设置可执行模式以及执行安装。该脚本提供了一些可用于自定义安装过程的开关。</p><p>因此，让我们看看这将如何工作…</p><h4 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h4><p>该脚本按<strong>原样</strong>提供。使用它需要<strong>您自担风险</strong>！ </p><h4 id="步骤1-–下载脚本"><a href="#步骤1-–下载脚本" class="headerlink" title="步骤1 –下载脚本"></a>步骤1 –下载脚本</h4><p>要下载脚本，您有多个选择。您可以从终端发出以下命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.c-nergy.be/downloads/xrdp-installer-1.2.2.zip</span><br></pre></td></tr></table></figure><p>您也可以只使用浏览器，然后单击链接来下载脚本：  </p><ul><li><a href="http://www.c-nergy.be/downloads/xrdp-installer-1.2.2.zip">xrdp-installer-1.2.2.zip</a></li></ul><p><strong>为防止文件丢失，国内用户可使用这个链接<a href="https://gitee.com/halfcoke/storage/blob/master/xrdp-installer-1.2.2.zip">xrdp-installer-1.2.2.zip</a></strong></p><h4 id="步骤2-–解压缩文件"><a href="#步骤2-–解压缩文件" class="headerlink" title="步骤2 –解压缩文件"></a>步骤2 –解压缩文件</h4><p>下载包含文件的zip软件包后，您需要先将其解压缩。要解压缩软件包，可以使用终端控制台并发出以下命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压缩xrdp-installer-1.2.2.zip </span><br></pre></td></tr></table></figure><p>您还可以使用GUI和Nautilus文件管理器选择下载的软件包，右键单击它并选择选项“ <strong>提取此处”。</strong></p><h4 id="步骤3-–在脚本上设置“执行权”"><a href="#步骤3-–在脚本上设置“执行权”" class="headerlink" title="步骤3 –在脚本上设置“执行权”"></a>步骤3 –在脚本上设置“执行权”</h4><p>将<strong>xrdp-installer-1.2.2.sh</strong> 脚本下载到您的系统，提取内容并将其标记为可执行文件。为此，请在终端控制台中执行以下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod + x〜/ Downloads / xrdp-installer-1.2.2.sh</span><br></pre></td></tr></table></figure><p><em>注意：调整<strong>xrdp-Installer-1.2.2.sh</strong>脚本的路径 以反映您的</em> <em>环境</em></p><h4 id="步骤4-–以普通用户身份运行"><a href="#步骤4-–以普通用户身份运行" class="headerlink" title="步骤4 –以普通用户身份运行"></a>步骤4 –以普通用户身份运行</h4><p>该脚本<strong>需要</strong>以<strong>普通用户身份运行</strong>。该脚本将开始运行，并在启动sudo操作时提示您输入密码。如果您以root身份或使用sudo命令运行脚本，则root用户不存在Download文件夹，并且脚本无法按预期运行。为了克服这种情况，脚本还检查哪个用户正在执行脚本。如果脚本在sudo或root帐户下运行，将显示警告消息，并且脚本不会执行</p><h4 id="步骤5-–开关和参数"><a href="#步骤5-–开关和参数" class="headerlink" title="步骤5 –开关和参数"></a>步骤5 –开关和参数</h4><p>该<strong>xrdp-installer-1.2.2.sh</strong>脚本可以执行为是（<strong>不带参数或开关</strong>）。这将执行xRDP的标准（和基本）安装。没有声音或自定义xrdp登录脚本将可用。但是，此安装模式将提供远程桌面，驱动器重定向和剪贴板重定向。 </p><p>该<strong>xrdp-installer-1.2.2.sh</strong>脚本也接受一些额外的参数，这将有助于定制XRDP安装并启用其他功能。该脚本提供以下参数 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--help或-h =&gt;将显示基本的帮助菜单</span><br><span class="line">--sound或-s =&gt;将启用声音重定向 </span><br><span class="line">--loginscreen或-l =&gt;将自定义xRDP登录屏幕 </span><br><span class="line">--remove或-r =&gt;将删除xrdp软件包 </span><br><span class="line">--custom或-c =&gt;将执行自定义安装（即从源代码编译）</span><br></pre></td></tr></table></figure><h4 id="步骤6-–使用脚本执行xRDP安装"><a href="#步骤6-–使用脚本执行xRDP安装" class="headerlink" title="步骤6 –使用脚本执行xRDP安装"></a>步骤6 –使用脚本执行xRDP安装</h4><p>以下各节将提供一些有关如何使用脚本的示例和方案。 </p><h5 id="标准安装–无参数"><a href="#标准安装–无参数" class="headerlink" title="标准安装–无参数"></a>标准安装–无参数</h5><p>如上所述，您可以决定使用Ubuntu存储库中可用的默认xrdp软件包，并执行基本安装，这将为您提供远程桌面功能并自定义远程会话。该脚本将确保当用户本地或远程登录时，将保持相同的外观。 </p><p>要执行 <strong>标准安装</strong>，请<strong>不带参数</strong>执行脚本 。打开 <strong>终端控制台</strong>，浏览到脚本已下载的位置，然后发出以下命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xrdp-installer-1.2.2.sh</span><br></pre></td></tr></table></figure><p>xrdp安装软件包将启动时，要求您 <strong>输入密码。</strong> 提供密码并继续安装。等待脚本完成。完成后，机器 <strong>将不会自动重启</strong> ，因此您可以查看脚本执行的操作…。</p><p><em><strong>重要笔记</strong></em></p><p><em>如果您在<strong>Ubuntu 16.04.x</strong>上<strong>运行脚本</strong>，即使未指定任何参数，也<strong>将始终执行</strong>自定义安装。这是因为Ubuntu 16.04.x附带了一个非常老的xrdp软件包（0.6版），并且没有提供所有必需的功能。定制安装提供驱动器重定向，剪贴板和对Unity Desktop的访问</em></p><h5 id="带参数的标准安装"><a href="#带参数的标准安装" class="headerlink" title="带参数的标准安装"></a>带参数的标准安装</h5><p>该脚本可用于执行标准安装，并且仍然传递一些参数以获取大多数xRDP软件包及其功能。对于所有Ubuntu版本，我们可以使用以下参数组合 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./xrdp-installer-1.2.2.sh -s       （这将启用声音重定向） </span><br><span class="line">./xrdp-installer-1.2.2.sh -l      （这将自定义xrdp登录屏幕-请参见此处）</span><br></pre></td></tr></table></figure><p>显然，您可以组合开关（任意顺序）以启用更多功能 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xrdp-installer-1.2.2.sh -s -l       （这将启用声音重定向并自定义xrdp登录屏幕）</span><br></pre></td></tr></table></figure><p><em><strong>重要笔记</strong></em></p><p><em>该脚本<strong>可以</strong>在同一台计算机上多次<strong>运行</strong>。如果最初运行的脚本没有参数，但是之后决定启用其他功能，则可以重新执行脚本并启用其他功能。</em> </p><h5 id="自定义安装–默认安装"><a href="#自定义安装–默认安装" class="headerlink" title="自定义安装–默认安装"></a>自定义安装–默认安装</h5><p>自定义安装脚本非常灵活。定制安装意味着脚本将从源二进制文件中编译xrdp软件包。定制安装脚本始终使用可用的最新xrdp软件包版本 </p><p>要执行<strong>自定义安装</strong>，您至少需要传递<strong>一个参数</strong>。以下命令行显示了如何执行自定义安装 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xrdp-installer-1.2.2.sh -c      （这将执行自定义安装，但不会启用声音重定向或自定义登录屏幕之类的adv功能）</span><br></pre></td></tr></table></figure><p><em><strong>重要笔记</strong></em></p><p><em>如果您在<strong>Ubuntu 16.04.x</strong>上<strong>运行脚本</strong>，则-c开关将被忽略，并将执行自定义安装过程。**这是因为Ubuntu 16.04.x附带了一个非常老的xrdp软件包（0.6版），并且没有提供所有必需的功能。定制安装提供驱动器重定向，剪贴板和对Unity Desktop的访问</em></p><h5 id="定制安装–其他选项"><a href="#定制安装–其他选项" class="headerlink" title="定制安装–其他选项"></a>定制安装–其他选项</h5><p>如果用户要启用其他功能，则将传递一些其他参数，如以下示例所示 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./xrdp-installer-1.2.2.sh -c -s      （将执行自定义安装并启用声音重定向）</span><br><span class="line">./xrdp-installer-1.2.2.sh -c -l      （将执行自定义安装并定制XRDP登录屏幕）</span><br><span class="line">./xrdp-installer-1.2.2.sh -C -l -S   （这会执行自定义安装，启用声音和自定义登录屏幕）</span><br></pre></td></tr></table></figure><p><em><strong>重要笔记</strong></em></p><p><em>该脚本<strong>可以</strong>在同一台计算机上多次<strong>运行</strong>。如果最初运行的脚本没有参数，但是之后决定启用其他功能，则可以重新执行脚本并启用其他功能。</em> </p><h5 id="删除安装选项"><a href="#删除安装选项" class="headerlink" title="删除安装选项"></a>删除安装选项</h5><p>此版本的脚本还附带删除xRDP软件包的选项。仅当您使用此脚本的此版本执行安装时，才应使用删除选项。要删除xrdp软件包，您只需执行以下命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xrdp-installer-1.2.2.sh -r      （删除xrdp软件包）</span><br></pre></td></tr></table></figure><h4 id="步骤5-–测试您的配置"><a href="#步骤5-–测试您的配置" class="headerlink" title="步骤5 –测试您的配置"></a>步骤5 –测试您的配置</h4><p>在脚本运行之后，以及在重新启动&#x2F;关闭和启动过程之后，就该进行测试了，看看您是否确实可以与Ubuntu计算机进行平滑的远程连接。请记住，使用xRDP解决方案时，用户可以在计算机<strong>上本地****登录</strong>或<strong>远程登录</strong>。如果执行远程连接的用户本地登录到系统，则远程连接将启动，但将立即终止。这就是如今的工作方式。 </p><p>因此，请确保执行测试的用户未在本地登录，请启动您喜欢的远程桌面客户端并执行连接。根据您的选择，将为您显示绿色的xrdp登录屏幕或自定义登录屏幕（紫色背景）。只需输入您的凭据并开始测试安装。如果一切正常，您将看到一个类似的桌面界面，其中使用了Gnome Desktop，并且可以看到Dock。 </p><h3 id="已知问题和局限性"><a href="#已知问题和局限性" class="headerlink" title="已知问题和局限性"></a>已知问题和局限性</h3><h4 id="已知的问题"><a href="#已知的问题" class="headerlink" title="已知的问题"></a>已知的问题</h4><h5 id="声音重定向问题"><a href="#声音重定向问题" class="headerlink" title="声音重定向问题"></a>声音重定向问题</h5><p>如果选择了<strong>声音重定向</strong>选项，则重启Ubuntu系统是不够的，声音重定向可能无法正常工作。如果选择了声音重定向选项，则必须<strong>关闭</strong>Ubuntu计算机，然后再次启动它，以确保声音重定向功能能够按预期工作。 </p><p><strong>声音重定向****在Ubuntu 19.10及更高版本上</strong>无法<strong>正常工作</strong> 。模块已创建并复制到正确的位置。但是，xrdp接收器模块永远不会加载到远程会话中，也不会随机加载到远程会话中。为了解决这个问题，您只需要在远程会话中执行以下命令，声音就会开始起作用 </p><h5 id="驱动器重定向"><a href="#驱动器重定向" class="headerlink" title="驱动器重定向"></a>驱动器重定向</h5><p>要将驱动器重定向到xrdp远程会话，必须 <strong>确保在“本地资源”选项卡中选择的唯一选项是“剪贴板”选项和“驱动器”选项。</strong>检查以下屏幕截图，并确保您具有相同的设置。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102309471.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102309501.png"></p><p>相应地设置了这些设置后，您应该会看到thin client文件夹中装有来自Windows计算机的重定向驱动器。</p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><h5 id="每个用户限制一个会话"><a href="#每个用户限制一个会话" class="headerlink" title="每个用户限制一个会话"></a>每个用户限制一个会话</h5><p>每个用户只允许一个会话。这意味着，如果用户在Ubuntu计算机上本地登录，则该用户将无法执行远程会话（xRDP连接将启动，但将立即终止）。如果用户在系统上远程登录，将无法在本地登录（如果用户尝试在本地登录，则登录屏幕将循环播放，并且将再次向用户显示登录屏幕） </p><h5 id="在标准和自定义安装之间切换"><a href="#在标准和自定义安装之间切换" class="headerlink" title="在标准和自定义安装之间切换"></a>在标准和自定义安装之间切换</h5><p>此版本的脚本可以在同一台计算机上多次运行。但是，由于这种新行为，您无法执行标准安装，然后决定执行自定义安装。一旦选择了安装模式，就必须坚持下去。这是由脚本检查的。 </p><p>因此，如果您执行了标准安装，但之后可能要使用自定义安装选项，则脚本将忽略该请求。如果要从标准安装模式转换为自定义模式（反之亦然），则正确的过程是 </p><ul><li>删除xrdp（使用xrdp-installer-1.2.2.sh -r选项） </li><li>使用您选择的安装模式（标准或自定义安装模式）执行新安装</li></ul><h3 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h3><p>该脚本可以在以下位置下载：  <a href="http://www.c-nergy.be/downloads/xrdp-installer-1.2.2.zip">xrdp-installer-1.2.2.zip</a> </p><p><em>注意：**所有xrdp脚本都可以在<a href="https://c-nergy.be/products.html">https://www.c-nergy.be/products.html</a>上找到</em></p><h3 id="最后说明"><a href="#最后说明" class="headerlink" title="最后说明"></a>最后说明</h3><p>这是这个职位！ </p><p>如果您有时间或想要帮助我们创建<strong>最佳的xrdp安装程序脚本</strong>，请下载该脚本，对其进行测试并提供建设性的反馈。如果您发现脚本有错误或问题，也请告知我们，以便我们对其进行修复。 </p><p>直到下一次</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> xrdp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH端口转发详解</title>
      <link href="/2021/cac946/"/>
      <url>/2021/cac946/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH端口转发详解"><a href="#SSH端口转发详解" class="headerlink" title="SSH端口转发详解"></a>SSH端口转发详解</h1><p>SSH端口转发(隧道)可以建立SSH通道，并将TCP链接放到这个通道中。</p><h2 id="man-ssh"><a href="#man-ssh" class="headerlink" title="man ssh"></a>man ssh</h2><h3 id="选项及参数解释"><a href="#选项及参数解释" class="headerlink" title="选项及参数解释"></a>选项及参数解释</h3><p>首先我们通过<code>man</code>命令来查看一下ssh关于转发部分的说明，然后再详细讲解不同的转发方式是什么意思。</p><ol><li>本地转发</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310135914.png" alt="image-20210110224549253"></p><p>本地转发通过<code>-L</code>选项指定</p><p><code>-L</code>选项后可跟多种形式的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-L [绑定地址:]端口:主机:主机端口</span><br><span class="line">-L [绑定地址:]端口:远端Socket</span><br><span class="line">-L 本地Socket:主机:主机端口</span><br><span class="line">-L 本地socket:远端socket</span><br></pre></td></tr></table></figure><blockquote><p>链接到<strong>本地(ssh客户端)主机</strong>上的给定的TCP端口(unix socket)将被转发到**远端的给定的主机和端口(unix socket)**。这一过程指定了本地这一侧的TCP端口(同时可以指定绑定的地址)，或unix socket。</p></blockquote><p>​(译注：就是指定<code>[绑定地址:]端口</code>这个参数，要么只提供端口，要么既提供地址也提供端口)</p><blockquote><p>一旦有连接到本地端口或socket的链接，这个链接就会通过安全的通道进行转发，相当于作用在远端主机对应的端口或socket上。</p></blockquote><p>​(译注：前两个参数(<code> [绑定地址:]端口</code>)指定本地的地址和端口，后两个参数指定远端的地址和端口(<code>主机:主机端口</code>)，对本地这个端口的访问，相当于作用在了远端的相应的端口上)</p><blockquote><p>端口转发同样也可以在配置文件中指定。只有超级用户可以转发特权端口。IPv6地址可以用方括号括起来指定。</p></blockquote><blockquote><p>默认情况下，本地端口按照<code>GatewayPorts</code>设置进行绑定。但是，可以使用显示的<code>绑定地址</code>将链接绑定到特定的地址。使用<code>localhost</code>这个<code>绑定地址</code>表示监听的端口仅能本地使用，而不指定地址或使用<code>*</code>则表示监听的端口可以被所有接口所访问。</p></blockquote><p>​(译注：使用<code>localhost</code>仅能本地访问，相当于<code>127.0.0.1</code>，不指定或使用<code>*</code>，则相当于<code>0.0.0.0</code>)</p><ol start="2"><li><p>远程转发</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310135083.png" alt="image-20210110224639362"></p><p>远程转发通过<code>-R</code>选项指定</p><p><code>-R</code>选项后可接多种形式的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-R [绑定地址:]端口:主机:主机端口</span><br><span class="line">-R [绑定地址:]端口:本地socket</span><br><span class="line">-R 远端socket:主机:主机端口</span><br><span class="line">-R 远端socket:本地socket</span><br><span class="line">-R [绑定地址:]端口</span><br></pre></td></tr></table></figure><blockquote><p>连接到<strong>远端(服务端)主机</strong>上给定TCP端口的链接会本转发到<strong>本地这一侧</strong>。这一过程分配了一个socket来在远端监听给定的TCP<code>端口</code>或unix socket。一旦有访问这个<code>端口</code>的链接，这个链接便会通过安全通道进行转发至本地这一侧，本地这一侧可以显示的指定<code>主机</code>及<code>主机端口</code>或本地socket，或者<em>如果没有显示指定本地这一侧的主机的话，ssh将充当<code>socks 4/5</code>代理，并将链接转发到远程socks客户机请求的目的地址</em></p></blockquote><p>​（译注：最后一句话如何使用暂不解释）。</p><blockquote><p>端口转发同样可以在配置文件中指定。特权端口只能登录远端机器的root用户进行转发。IPv6地址可以用方括号括起来指定。</p></blockquote><blockquote><p>默认情况下，TCP仅监听本地环回接口的sockets。这一情况可以通过<code>绑定地址</code>来进行覆盖，空的<code>绑定地址</code>或<code>*</code>，表示远端socket应该监听所有接口。只有远端服务的<code>GatewayPorts</code>选项打开，才可以指定远端的<code>绑定地址</code>。</p></blockquote><blockquote><p>如果<code>端口</code>参数是<code>0</code>，将会在服务端动态分配监听的端口，然后将端口返回客户端。如果同时使用<code>-O</code>选项，返回分配的端口将会输出在标准输出。</p></blockquote></li><li><p>动态转发</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310135778.png" alt="image-20210111144331152"></p><p>动态转发通过 <code>-D</code>选项指定</p><p><code>-D</code>选项后可跟如下形式的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-D [绑定地址:]端口</span><br></pre></td></tr></table></figure><blockquote><p>本地动态应用级端口转发。这一过程会分配一个socket来监听本地侧的<code>端口</code>，可选是否指定<code>绑定地址</code>。一旦有链接访问这个端口，这个链接将会通过安全通道进行转发，并且应用协议决定了随后访问远端机器的哪个端口。目前支持<code>SOCKS4</code> 和<code>SOCKS5</code>，并且ssh将作为<code>SOCKS</code>服务端。</p></blockquote><blockquote><p>只有root用户可以转发特权端口。动态端口转发可以通过配置文件指定。</p></blockquote><blockquote><p>IPv6地址可以用方括号括起来指定。只有超级用户可以转发特权端口。</p></blockquote><blockquote><p>默认情况下，本地端口受限于<code>GatewayPorts</code>的设置。但是显示的指定<code>绑定地址</code>可以用来指定具体的地址。使用<code>localhost</code>这个<code>绑定地址</code>表示监听的端口仅能本地使用，而不指定地址或使用<code>*</code>则表示监听的端口可以被所有接口所访问。</p></blockquote></li></ol><h3 id="TCP-FORWARDING"><a href="#TCP-FORWARDING" class="headerlink" title="TCP FORWARDING"></a>TCP FORWARDING</h3><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310135967.png" alt="image-20210111145707861"></p><blockquote><p>可以通过命令行或配置文件通过安全通道转发任意TCP链接。一个可能的TCP转发应用场景是通过安全链接访问邮件服务或穿透防火墙。</p><p>在下面的例子中，我们看一下IRC客户端与服务器之间的加密通信，即便IRC服务器不直接支持加密通信。</p><p>这一工作流程如下：用户通过ssh指定了一个端口用来转发链接到远程主机，随后，在客户端机器开启了一个被加密的服务，链接到相同的本地端口(译注：这个本地端口就是上一句话提到的<code>通过ssh指定了一个端口</code>)，ssh将会加密并转发链接</p><p>这个例子将从本地机器(<code>127.0.0.1</code>)到远程服务器(<code>server.example.com</code>)的IRC会话装入隧道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -f -L 1234:localhost:6667 server.example.com <span class="built_in">sleep</span> 10</span><br><span class="line">$ irc -c <span class="string">&#x27;#users&#x27;</span> -p 1234 <span class="built_in">pinky</span> 127.0.0.1</span><br></pre></td></tr></table></figure><p>这个隧道连接到IRC服务器“server.example.com”，加入通道“#users”，昵称“pinky”，使用端口1234。使用哪个端口无所谓，只要大于1023(只有root用户可以使用特权端口)，并且不能和其他已用的端口冲突。这个链接被转发到远程服务器的6667端口，这是IRC服务的标准端口</p><p><code>-f</code>选项在后台运行ssh，并且远端执行命令<code>sleep 10</code>指定了被装入隧道中的服务开启的时间。如果在指定时间内没有链接，ssh将会退出。</p></blockquote><h2 id="自定义用例"><a href="#自定义用例" class="headerlink" title="自定义用例"></a>自定义用例</h2><ol><li><p>本地转发</p><p>本地转发示例如下。</p><p><strong>场景1</strong></p><p>考虑这样一个场景，<code>主机A</code>需要访问<code>主机C</code>上的一些服务，但由于安全问题<code>主机C</code>仅将<code>主机B</code>的IP加入了白名单中，而这时我们又已知可以在<code>主机A</code>上通过ssh链接到<code>主机B</code>。这时我们在<code>主机A</code>上可以通过<code>主机B</code>去访问<code>主机C</code>上的一些服务。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/20210111153613-20221025020642141.svg"></p><p>我们在<code>主机A</code>上执行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 12345:ip_c:service_port user@ip_b</span><br></pre></td></tr></table></figure><p>其中，<code>ip_c</code>表示<code>主机C</code>的ip地址，<code>service_port</code>表示在<code>主机C</code>上运行的服务的访问端口，<code>user</code>表示<code>主机B</code>上你用的用户名，<code>ip_b</code>表示<code>主机B</code>的ip地址，<code>12345</code>表示<code>主机A</code>上的端口。这时，你访问<code>ip_a:12345</code>便相当于访问了<code>ip_c:service_port</code>。</p><p><strong>场景2</strong></p><p>当然，有的时候我们可能只是想穿透防火墙，如下图所示，<code>主机B</code>的防火墙仅打开了22端口，但<code>主机B</code>上运行着许多服务，在防火墙外的<code>主机A</code>无法直接访问。这时我们也可以通过本地转发的方式来访问<code>主机B</code>上的一些服务。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/20210111155514-20221025020650588.svg"></p><p>在<code>主机A</code>上执行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 12345:localhost:80 user@ip_b</span><br></pre></td></tr></table></figure><p>这样访问<code>主机A</code>的12345端口，便相当于访问<code>主机B</code>的80端口，从而达到了穿透防火墙的目的。</p></li><li><p>远程转发</p><p>在使用远程转发时，我们考虑这样一个场景，<code>主机C</code>上运行着一个服务，但是<code>主机C</code>没有公网ip，<code>主机A</code>无法直接访问服务。而<code>主机B</code>则有公网IP，这时又不想将<code>主机C</code>上的服务转移到<code>主机B</code>上。这时我们就可以考虑使用远程转发。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/20210111175702.svg"></p></li></ol><p>我们在**<code>主机C</code>**上执行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R [ip_b:]port_b:ip_c:port_c user@ip_b</span><br></pre></td></tr></table></figure><p>这样我们从<code>主机A</code>访问<code>主机B</code>的port_b端口，就相当于访问了<code>主机C</code>的<code>port_c</code>端口。</p><p>所以，通过这种方式也意味着，只要你有个公网ip的服务器，并不一定要将服务部署在服务器上，只要做好转发你就可以做很多事情。</p><h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><h3 id="持久化ssh链接（ssh保活）"><a href="#持久化ssh链接（ssh保活）" class="headerlink" title="持久化ssh链接（ssh保活）"></a>持久化ssh链接（ssh保活）</h3><p>以下两种方式均可，推荐使用<code>客户端配置</code>。</p><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>编辑服务器上<code>/etc/ssh/sshd_config</code>文件，增加如下内容，设置完成后需要重启sshd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器每隔60秒发送一次请求给客户端，实现保活</span></span><br><span class="line">ClientAliveInterval 60</span><br><span class="line"><span class="comment"># 服务端发出请求后，客户端如果3次都没有响应，则自动断开连接</span></span><br><span class="line">ClientAliveCountMax 3</span><br></pre></td></tr></table></figure><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><p>编辑客户端上的<code>/etc/ssh/ssh_config</code>文件，注意<strong>与服务端不是同一个文件</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端每隔60秒发送一次请求给服务端，实现保活</span></span><br><span class="line">ServerAliveInterval 60</span><br><span class="line"><span class="comment"># 客户端发出请求后，如果服务端3次都没有响应，则自动断开连接</span></span><br><span class="line">ServerAliveCountMax 3</span><br></pre></td></tr></table></figure><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><ul><li><p><code>-N</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136858.png" alt="image-20210112202116993"></p><p>不执行远程命令，表示仅用来进行端口转发，常常与<code>-T</code>结合使用</p></li><li><p><code>-T</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136963.png" alt="image-20210112202204575"></p><p>不分配伪终端，</p></li><li><p><code>-f</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136544.png" alt="image-20210112202347594"></p><p>请求ssh在命令执行之前转到后台，如果ssh要求输入密码或密码短语，但用户希望在后台输入密码，那么这是非常有用的。这表示<code>-n</code>，在远程站点启动X11程序的推荐方法是使用ssh -f host xterm之类的工具。</p><p>如果<code>ExitOnForwardFailure</code>选项被设置成<code>yes</code>，使用<code>-f</code>选项开启的客户端会等待所有远程端口转发成功建立链接后在将程序转入后台。</p><p><strong>要关闭这个后台链接，只能用kill命令去杀掉。</strong></p></li><li><p><code>-C</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310136387.png" alt="image-20210112204811052"></p><p>请求压缩所有数据，压缩算法和<code>gzip</code>相同，压缩在调制解调器线路和其他慢速连接上是可取的，但在高速网络上只会减慢速度。默认值可以在配置文件中按主机设置;请参阅压缩选项。</p></li></ul><h3 id="后台持久化执行端口转发"><a href="#后台持久化执行端口转发" class="headerlink" title="后台持久化执行端口转发"></a>后台持久化执行端口转发</h3><ul><li><p>修改&#x2F;etc&#x2F;ssh_config文件，设置保活时间</p></li><li><p>使用下面命令执行端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下ip和端口均为示例</span></span><br><span class="line">$ ssh -f -NTC -L 12345:192.168.2.123:12345 user@192.168.1.10</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
            <tag> 转发 </tag>
            
            <tag> 隧道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink 内存模型</title>
      <link href="/2021/9367e715/"/>
      <url>/2021/9367e715/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink内存模型"><a href="#Flink内存模型" class="headerlink" title="Flink内存模型"></a>Flink内存模型</h1><p>Flink1.12.0支持更为细粒度的内存配置，本文基于Flink1.12对现行的Flink内存管理机制进行介绍，主要内容来自<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/deployment/memory/mem_setup.html">Flink文档</a></p><h2 id="总内存说明"><a href="#总内存说明" class="headerlink" title="总内存说明"></a>总内存说明</h2><p>Flink JVM 进程的<em>进程总内存（Total Process Memory）</em>包含了由 Flink 应用使用的内存（<em>Flink 总内存</em>）以及由运行 Flink 的 JVM 使用的内存。 <em>Flink 总内存（Total Flink Memory）</em>包括 <em>JVM 堆内存（Heap Memory）</em>和<em>堆外内存（Off-Heap Memory）</em>。 其中堆外内存包括<em>直接内存（Direct Memory）</em>和<em>本地内存（Native Memory）</em>。</p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/process_mem_model.svg" style="width:35%" /><p>配置Flink内存使用的简单方法可以使用如下两个配置项</p><table><thead><tr><th align="left"><strong>Component</strong></th><th align="left"><strong>Option for TaskManager</strong></th><th align="left"><strong>Option for JobManager</strong></th></tr></thead><tbody><tr><td align="left">Total Flink memory</td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/deployment/config.html#taskmanager-memory-flink-size"><code>taskmanager.memory.flink.size</code></a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/deployment/config.html#jobmanager-memory-flink-size"><code>jobmanager.memory.flink.size</code></a></td></tr><tr><td align="left">Total process memory</td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/deployment/config.html#taskmanager-memory-process-size"><code>taskmanager.memory.process.size</code></a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/deployment/config.html#jobmanager-memory-process-size"><code>jobmanager.memory.process.size</code></a></td></tr></tbody></table><p>Flink会根据默认值或其他配置参数来调整剩余内存部分的大小。</p><ul><li><p>配置<code>Flink memory</code>对于<code>standalone deployments</code>更为合适，该参数可以声明为Flink本身提供多少内存，<code>total Flink memory</code>被划分为<code>JVM Heap</code>和<code>Off-heap</code>内存。</p></li><li><p>配置<code>total process memory</code>可以声明Flink JVM进程总计使用多少内存，对于容器话部署来说，这涉及请求多大的容器。</p></li><li><p>此外，可以通过设置<code>total Flink memory</code>中的特定内部组成部分来进行内存配置，JM及TM所需要设置的内存组成部分是不一样的。详情参考<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#configure-heap-and-managed-memory">TaskManager</a>和<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_jobmanager.html#configure-jvm-heap">JobManager</a>文档。</p></li></ul><p>用户需要选择至少一种方式进行配置，需要从以下无默认值的配置参数（参数组合中）选择一个给出明确的配置。</p><table><thead><tr><th align="left"><strong>TaskManager:</strong></th><th align="left"><strong>JobManager:</strong></th></tr></thead><tbody><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-flink-size"><code>taskmanager.memory.flink.size</code></a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#jobmanager-memory-flink-size"><code>jobmanager.memory.flink.size</code></a></td></tr><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-process-size"><code>taskmanager.memory.process.size</code></a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#jobmanager-memory-process-size"><code>jobmanager.memory.process.size</code></a></td></tr><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-task-heap-size"><code>taskmanager.memory.task.heap.size</code></a> 和 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-managed-size"><code>taskmanager.memory.managed.size</code></a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#jobmanager-memory-heap-size"><code>jobmanager.memory.heap.size</code></a></td></tr></tbody></table><p>同时进行<code>total process memory</code>及<code>total flink memory</code>配置时可能会造成配置冲突</p><p>Flink 进程启动时，会根据配置的和自动推导出的各内存部分大小，显式地设置以下 JVM 参数：</p><table><thead><tr><th align="left"><strong>JVM 参数</strong></th><th align="left"><strong>TaskManager 取值</strong></th><th align="left"><strong>JobManager 取值</strong></th></tr></thead><tbody><tr><td align="left"><em>-Xmx</em> 和 <em>-Xms</em></td><td align="left">框架堆内存 + 任务堆内存</td><td align="left">JVM 堆内存 (*)</td></tr><tr><td align="left"><em>-XX:MaxDirectMemorySize</em> （TaskManager 始终设置，JobManager 见注释）</td><td align="left">框架堆外内存 + 任务堆外内存(**) + 网络内存</td><td align="left">堆外内存 (**) (***)</td></tr><tr><td align="left"><em>-XX:MaxMetaspaceSize</em></td><td align="left">JVM Metaspace</td><td align="left">JVM Metaspace</td></tr></tbody></table><p>(*) 请记住，根据所使用的 GC 算法，你可能无法使用到全部堆内存。一些 GC 算法会为它们自身分配一定量的堆内存。这会导致<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/ops/metrics.html#memory">堆的指标</a>返回一个不同的最大值。<br>(**) 请注意，堆外内存也包括了用户代码使用的本地内存（非直接内存）。<br>(***) 只有在 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#jobmanager-memory-enable-jvm-direct-memory-limit"><code>jobmanager.memory.enable-jvm-direct-memory-limit</code></a> 设置为 <code>true</code> 时，JobManager 才会设置 <em>JVM 直接内存限制</em>。</p><h2 id="TaskManager内存模型"><a href="#TaskManager内存模型" class="headerlink" title="TaskManager内存模型"></a>TaskManager内存模型</h2><h3 id="配置堆内存和托管内存"><a href="#配置堆内存和托管内存" class="headerlink" title="配置堆内存和托管内存"></a>配置堆内存和托管内存</h3><p>另一种配置 Flink 内存的方式是同时设置<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#task-operator-heap-memory">任务堆内存</a>和<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#managed-memory">托管内存</a>。 通过这种方式，用户可以更好地掌控用于 Flink 任务的 JVM 堆内存及 Flink 的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#managed-memory">托管内存</a>大小。</p><p>Flink 会根据默认值或其他配置参数自动调整剩余内存部分的大小。 关于各内存部分的更多细节，请参考<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#detailed-memory-model">相关文档</a>。</p><p><strong>提示</strong> 如果已经明确设置了任务堆内存和托管内存，建议不要再设置<em>进程总内存</em>或 <em>Flink 总内存</em>，否则可能会造成内存配置冲突。</p><h4 id="任务-算子-堆内存"><a href="#任务-算子-堆内存" class="headerlink" title="任务(算子)堆内存"></a>任务(算子)堆内存</h4><p>如果希望确保指定大小的 JVM 堆内存给用户代码使用，可以明确指定<em>任务堆内存</em>（<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-task-heap-size"><code>taskmanager.memory.task.heap.size</code></a>）。 指定的内存将被包含在总的 JVM 堆空间中，专门用于 Flink 算子及用户代码的执行。</p><h4 id="托管内存"><a href="#托管内存" class="headerlink" title="托管内存"></a>托管内存</h4><p><em>托管内存</em>是由 Flink 负责分配和管理的本地（堆外）内存。 以下场景需要使用<em>托管内存</em>：</p><ul><li>流处理作业中用于 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/ops/state/state_backends.html#the-rocksdbstatebackend">RocksDB State Backend</a>。</li><li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/batch/">批处理作业</a>中用于排序、哈希表及缓存中间结果。</li><li>流处理和批处理作业中用于<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/python/table-api-users-guide/udfs/python_udfs.html">在 Python 进程中执行用户自定义函数</a>。</li></ul><p>可以通过以下两种范式指定<em>托管内存</em>的大小：</p><ul><li>通过 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-managed-size"><code>taskmanager.memory.managed.size</code></a> 明确指定其大小。</li><li>通过 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-managed-fraction"><code>taskmanager.memory.managed.fraction</code></a> 指定在<em>Flink 总内存</em>中的占比。</li></ul><p>当同时指定二者时，会优先采用指定的大小（Size）。 若二者均未指定，会根据<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-managed-fraction">默认占比</a>进行计算。</p><h4 id="消费者权重"><a href="#消费者权重" class="headerlink" title="消费者权重"></a>消费者权重</h4><p>对于包含不同种类的托管内存消费者的作业，可以进一步控制托管内存如何在消费者之间分配。 通过 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-managed-consumer-weights"><code>taskmanager.memory.managed.consumer-weights</code></a> 可以为每一种类型的消费者指定一个权重，Flink 会按照权重的比例进行内存分配。 目前支持的消费者类型包括：</p><ul><li><code>DATAPROC</code>：用于流处理中的 RocksDB State Backend 和批处理中的内置算法。</li><li><code>PYTHON</code>：用户 Python 进程。</li></ul><p>例如，一个流处理作业同时使用到了 RocksDB State Backend 和 Python UDF，消费者权重设置为 <code>DATAPROC:70,PYTHON:30</code>，那么 Flink 会将 <code>70%</code> 的托管内存用于 RocksDB State Backend，<code>30%</code> 留给 Python 进程。</p><p><strong>提示</strong> 只有作业中包含某种类型的消费者时，Flink 才会为该类型分配托管内存。 例如，一个流处理作业使用 Heap State Backend 和 Python UDF，消费者权重设置为 <code>DATAPROC:70,PYTHON:30</code>，那么 Flink 会将全部托管内存用于 Python 进程，因为 Heap State Backend 不使用托管内存。</p><p><strong>提示</strong> 对于未出现在消费者权重中的类型，Flink 将不会为其分配托管内存。 如果缺失的类型是作业运行所必须的，则会引发内存分配失败。 默认情况下，消费者权重中包含了所有可能的消费者类型。 上述问题仅可能出现在用户显式地配置了消费者权重的情况下。</p><h3 id="配置堆外内存-直接内存或本地内存"><a href="#配置堆外内存-直接内存或本地内存" class="headerlink" title="配置堆外内存(直接内存或本地内存)"></a>配置堆外内存(直接内存或本地内存)</h3><p>用户代码中分配的堆外内存被归为<em>任务堆外内存（Task Off-heap Memory）</em>，可以通过 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-task-off-heap-size"><code>taskmanager.memory.task.off-heap.size</code></a> 指定。</p><p><strong>提示</strong> 你也可以调整<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#framework-memory">框架堆外内存（Framework Off-heap Memory）</a>。 这是一个进阶配置，建议仅在确定 Flink 框架需要更多的内存时调整该配置。</p><p>Flink 将<em>框架堆外内存</em>和<em>任务堆外内存</em>都计算在 JVM 的<em>直接内存</em>限制中，请参考 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup.html#jvm-parameters">JVM 参数</a>。</p><p><strong>提示</strong> 本地内存（非直接内存）也可以被归在<em>框架堆外内存</em>或<em>任务堆外内存</em>中，在这种情况下 JVM 的<em>直接内存</em>限制可能会高于实际需求。</p><p><strong>提示</strong> <em>网络内存（Network Memory）</em>同样被计算在 JVM <em>直接内存</em>中。 Flink 会负责管理网络内存，保证其实际用量不会超过配置大小。 因此，调整<em>网络内存</em>的大小不会对其他堆外内存有实质上的影响。</p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/detailed-mem-model.svg" style="width:35%" /><p>如上图所示，下表中列出了 Flink TaskManager 内存模型的所有组成部分，以及影响其大小的相关配置参数。</p><table><thead><tr><th align="left"><strong>组成部分</strong></th><th align="left"><strong>配置参数</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#framework-memory">框架堆内存（Framework Heap Memory）</a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-framework-heap-size"><code>taskmanager.memory.framework.heap.size</code></a></td><td align="left">用于 Flink 框架的 JVM 堆内存（进阶配置）。</td></tr><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#task-operator-heap-memory">任务堆内存（Task Heap Memory）</a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-task-heap-size"><code>taskmanager.memory.task.heap.size</code></a></td><td align="left">用于 Flink 应用的算子及用户代码的 JVM 堆内存。</td></tr><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#managed-memory">托管内存（Managed memory）</a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-managed-size"><code>taskmanager.memory.managed.size</code></a> <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-managed-fraction"><code>taskmanager.memory.managed.fraction</code></a></td><td align="left">由 Flink 管理的用于排序、哈希表、缓存中间结果及 RocksDB State Backend 的本地内存。</td></tr><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#framework-memory">框架堆外内存（Framework Off-heap Memory）</a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-framework-off-heap-size"><code>taskmanager.memory.framework.off-heap.size</code></a></td><td align="left">用于 Flink 框架的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#configure-off-heap-memory-direct-or-native">堆外内存（直接内存或本地内存）</a>（进阶配置）。</td></tr><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#configure-off-heap-memory-direct-or-native">任务堆外内存（Task Off-heap Memory）</a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-task-off-heap-size"><code>taskmanager.memory.task.off-heap.size</code></a></td><td align="left">用于 Flink 应用的算子及用户代码的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#configure-off-heap-memory-direct-or-native">堆外内存（直接内存或本地内存）</a>。</td></tr><tr><td align="left">网络内存（Network Memory）</td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-network-min"><code>taskmanager.memory.network.min</code></a> <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-network-max"><code>taskmanager.memory.network.max</code></a> <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-network-fraction"><code>taskmanager.memory.network.fraction</code></a></td><td align="left">用于任务之间数据传输的直接内存（例如网络传输缓冲）。该内存部分为基于 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup.html#configure-total-memory">Flink 总内存</a>的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup.html#capped-fractionated-components">受限的等比内存部分</a>。</td></tr><tr><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup.html#jvm-parameters">JVM Metaspace</a></td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-jvm-metaspace-size"><code>taskmanager.memory.jvm-metaspace.size</code></a></td><td align="left">Flink JVM 进程的 Metaspace。</td></tr><tr><td align="left">JVM 开销</td><td align="left"><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-jvm-overhead-min"><code>taskmanager.memory.jvm-overhead.min</code></a> <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-jvm-overhead-max"><code>taskmanager.memory.jvm-overhead.max</code></a> <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html#taskmanager-memory-jvm-overhead-fraction"><code>taskmanager.memory.jvm-overhead.fraction</code></a></td><td align="left">用于其他 JVM 开销的本地内存，例如栈空间、垃圾回收空间等。该内存部分为基于<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup.html#configure-total-memory">进程总内存</a>的<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup.html#capped-fractionated-components">受限的等比内存部分</a>。</td></tr></tbody></table><h2 id="Web-UI-界面介绍"><a href="#Web-UI-界面介绍" class="headerlink" title="Web UI 界面介绍"></a>Web UI 界面介绍</h2><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/20210312150340.svg"></p><h3 id="内存根据Slot数量划分部分源码"><a href="#内存根据Slot数量划分部分源码" class="headerlink" title="内存根据Slot数量划分部分源码"></a>内存根据Slot数量划分部分源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/resourcemanager/slotmanager/SlotManagerImpl.java</span></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ResourceProfile <span class="title function_">generateDefaultSlotResourceProfile</span><span class="params">(WorkerResourceSpec workerResourceSpec, <span class="type">int</span> numSlotsPerWorker)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResourceProfile.newBuilder()</span><br><span class="line">        .setCpuCores(workerResourceSpec.getCpuCores().divide(numSlotsPerWorker))</span><br><span class="line">        .setTaskHeapMemory(workerResourceSpec.getTaskHeapSize().divide(numSlotsPerWorker))</span><br><span class="line">        .setTaskOffHeapMemory(workerResourceSpec.getTaskOffHeapSize().divide(numSlotsPerWorker))</span><br><span class="line">        .setManagedMemory(workerResourceSpec.getManagedMemSize().divide(numSlotsPerWorker))</span><br><span class="line">        .setNetworkMemory(workerResourceSpec.getNetworkMemSize().divide(numSlotsPerWorker))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取已用Managed内存核心源码"><a href="#获取已用Managed内存核心源码" class="headerlink" title="获取已用Managed内存核心源码"></a>获取已用Managed内存核心源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/MetricUtils.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getUsedManagedMemory</span><span class="params">(TaskSlotTable&lt;?&gt; taskSlotTable)</span> &#123;</span><br><span class="line">    Set&lt;AllocationID&gt; activeTaskAllocationIds = taskSlotTable.getActiveTaskSlotAllocationIds();</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">usedMemory</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (AllocationID allocationID : activeTaskAllocationIds) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MemoryManager</span> <span class="variable">taskSlotMemoryManager</span> <span class="operator">=</span> taskSlotTable.getTaskMemoryManager(allocationID);</span><br><span class="line">            usedMemory += taskSlotMemoryManager.getMemorySize() - taskSlotMemoryManager.availableMemory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SlotNotFoundException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;The task slot &#123;&#125; is not present anymore and will be ignored in calculating the amount of used memory.&quot;</span>, allocationID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> usedMemory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flink源码修改"><a href="#Flink源码修改" class="headerlink" title="Flink源码修改"></a>Flink源码修改</h3><ol><li><p>增加显示算子实例与slot之间的对应关系</p><p><code>请求地址</code>：</p></li></ol><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210107211317.png" alt="image-20210107211317693"></p><p>​<code>数据样例</code>：</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210107211257.png" alt="image-20210107211257448"></p><ol start="2"><li>增加Taskmanager中对slotsStatus的显示</li></ol><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210107213354.png" alt="image-20210107213354649"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 流处理 </category>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 流处理 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习相关调研笔记</title>
      <link href="/2020/b1d7d7b5/"/>
      <url>/2020/b1d7d7b5/</url>
      
        <content type="html"><![CDATA[<h1 id="调研笔记"><a href="#调研笔记" class="headerlink" title="调研笔记"></a>调研笔记</h1><h2 id="马尔科夫链"><a href="#马尔科夫链" class="headerlink" title="马尔科夫链"></a>马尔科夫链</h2><p><strong>马尔可夫链</strong>（英语：Markov chain），又称<strong>离散时间马可夫链</strong>（discrete-time Markov chain，缩写为<strong>DTMC</strong>[<a href="https://zh.wikipedia.org/wiki/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE#cite_note-1">1]</a>），因俄国数学家<a href="https://zh.wikipedia.org/wiki/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB">安德烈·马尔可夫</a>得名，为<a href="https://zh.wikipedia.org/wiki/%E7%8B%80%E6%85%8B%E7%A9%BA%E9%96%93_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">状态空间</a>中经过从一个状态到另一个状态的转换的<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B">随机过程</a>。该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。这种特定类型的“无记忆性”称作<a href="https://zh.wikipedia.org/wiki/%E9%A6%AC%E5%8F%AF%E5%A4%AB%E6%80%A7%E8%B3%AA">马可夫性质</a>。马尔科夫链作为实际过程的统计模型具有许多应用。</p><h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><h3 id="1-1-假设"><a href="#1-1-假设" class="headerlink" title="1.1 假设"></a>1.1 假设</h3><ul><li>奖励假设：强化学习的目的是最大化累积奖励的期望</li><li>Markov假设：转移只依赖当前状态和当前选择的动作，与之前的状态和动作无关</li></ul><h4 id="1-2环境模型的定义"><a href="#1-2环境模型的定义" class="headerlink" title="1.2环境模型的定义"></a>1.2环境模型的定义</h4><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201230121418.png" alt="image-20201230121418162"></p><h3 id="1-3目标"><a href="#1-3目标" class="headerlink" title="1.3目标"></a>1.3目标</h3><p>最大化累积奖励，叫做回报(return)<br>$$<br>R:&#x3D;\sum^{T}_{t&#x3D;1}{r_t}<br>$$<br><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201230121848.png" alt="image-20201230121848541"></p><p>【1】<a href="https://zhuanlan.zhihu.com/p/72234324">现代深度强化学习算法综述</a></p><p>【2】<a href="https://zhuanlan.zhihu.com/p/28549596">深度强化学习——从DQN到DDPG</a></p>]]></content>
      
      
      <categories>
          
          <category> 智能领域 </category>
          
          <category> 深度强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink Metrics REST API使用</title>
      <link href="/2020/c73cf02/"/>
      <url>/2020/c73cf02/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink-Metrics-REST-API使用"><a href="#Flink-Metrics-REST-API使用" class="headerlink" title="Flink Metrics REST API使用"></a>Flink Metrics REST API使用</h1><h2 id="Operator-Metrics采集"><a href="#Operator-Metrics采集" class="headerlink" title="Operator Metrics采集"></a>Operator Metrics采集</h2><ul><li>idletime</li><li>numRecords</li><li>queueLen</li></ul><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/ops/metrics.html#default-shuffle-service">https://ci.apache.org/projects/flink/flink-docs-release-1.12/ops/metrics.html#default-shuffle-service</a></p><h2 id="TaskManager-Metrics采集"><a href="#TaskManager-Metrics采集" class="headerlink" title="TaskManager Metrics采集"></a>TaskManager Metrics采集</h2><p>Flink基于JVM运行，对TM Metrics的分析实际上就是在进程及线程级别进行分析。</p><p>Flink采集TM的JVM指标时，是通过java自己的<code>OperatingSystemMXBean</code>来进行采集的，具体如下：</p><h4 id="JVM-CPU负载情况"><a href="#JVM-CPU负载情况" class="headerlink" title="JVM CPU负载情况"></a>JVM CPU负载情况</h4><p>Flink部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/MetricUtils.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">instantiateCPUMetrics</span><span class="params">(MetricGroup metrics)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> com.sun.management.<span class="type">OperatingSystemMXBean</span> <span class="variable">mxBean</span> <span class="operator">=</span> (com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line"></span><br><span class="line">        metrics.&lt;Double, Gauge&lt;Double&gt;&gt;gauge(<span class="string">&quot;Load&quot;</span>, mxBean::getProcessCpuLoad);</span><br><span class="line">        metrics.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(<span class="string">&quot;Time&quot;</span>, mxBean::getProcessCpuTime);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">&quot;Cannot access com.sun.management.OperatingSystemMXBean.getProcessCpuLoad()&quot;</span> +</span><br><span class="line">                 <span class="string">&quot; - CPU load metrics will not be available.&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jvm提供的<a href="https://docs.oracle.com/javase/7/docs/jre/api/management/extension/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()"><code>getProcessCpuLoad()</code>方法</a>，介绍如下</p><blockquote><p>返回Java虚拟机进程的“最近cpu使用量”。该值是[0.0,1.0]区间内的一个双精度值。0.0的值表示在最近观察的时间段内没有一个cpu运行来自JVM进程的线程，而1.0的值表示在最近观察的时间段内，所有cpu 100%都在活跃地运行来自JVM进程的线程。来自JVM的线程包括应用程序线程和JVM内部线程。根据JVM进程和整个系统中正在进行的活动，0.0到1.0之间的所有值都是可能的。如果Java虚拟机最近的CPU占用率不可用，该方法返回一个负数。</p><p>Returns the “recent cpu usage” for the Java Virtual Machine process. This value is a double in the [0.0,1.0] interval. A value of 0.0 means that none of the CPUs were running threads from the JVM process during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running threads from the JVM 100% of the time during the recent period being observed. Threads from the JVM include the application threads as well as the JVM internal threads. All values betweens 0.0 and 1.0 are possible depending of the activities going on in the JVM process and the whole system. If the Java Virtual Machine recent CPU usage is not available, the method returns a negative value.</p></blockquote><p>该方法返回整个JVM的CPU使用情况，要想获得进程级别的需要考虑其他方法。</p><ul><li>可以通过jps获得TaskManager的进程ID</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131222.png" alt="image-20201224222950624"></p><ul><li>然后根据进程ID通过<code>top -H -p 23621</code>可以看到线程对CPU的使用情况，这里可以看到每一个算子都是一个线程，但是使用程序导出时应考虑一下其他命令</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131259.png" alt="image-20201224222919852"></p><h4 id="JVM-内存使用情况"><a href="#JVM-内存使用情况" class="headerlink" title="JVM 内存使用情况"></a>JVM 内存使用情况</h4><h5 id="JVM-内存类型"><a href="#JVM-内存类型" class="headerlink" title="JVM 内存类型"></a>JVM 内存类型</h5><blockquote><p>参考<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/management/MemoryMXBean.html">https://docs.oracle.com/javase/8/docs/api/java/lang/management/MemoryMXBean.html</a></p></blockquote><ol><li><p>Heap</p><blockquote><p>Java虚拟机有一个堆，它是运行时数据区域，所有类实例和数组的内存都从这个堆中分配。它在Java虚拟机启动时创建。对象的堆内存由被称为垃圾收集器的自动内存管理系统回收。</p><p>堆的大小可以固定，也可以扩展或收缩。堆的内存不需要是连续的。</p><p>The Java virtual machine has a <em>heap</em> that is the runtime data area from which memory for all class instances and arrays are allocated. It is created at the Java virtual machine start-up. Heap memory for objects is reclaimed by an automatic memory management system which is known as a <em>garbage collector</em>.</p><p>The heap may be of a fixed size or may be expanded and shrunk. The memory for the heap does not need to be contiguous.</p></blockquote></li><li><p>Non-Heap</p><blockquote><p>Java虚拟机管理堆以外的内存(称为非堆内存)。</p><p>Java虚拟机有一个在所有线程之间共享的方法区域。方法区域属于非堆内存。它存储每个类的结构，比如运行时常量池、字段和方法数据，以及方法和构造函数的代码。它在Java虚拟机启动时创建。</p><p>方法区域在逻辑上是堆的一部分，但是Java虚拟机实现可以选择不进行垃圾收集或压缩它。与堆类似，方法区域可以是固定大小的，也可以扩展或收缩。方法区域的内存不需要是连续的。</p><p>除了方法区域，Java虚拟机实现可能需要内存用于内部处理或优化，这些内存也属于非堆内存。例如，JIT编译器需要内存来存储从Java虚拟机代码转换过来的本机机器代码，以获得高性能。</p><p>The Java virtual machine manages memory other than the heap (referred as <em>non-heap memory</em>).</p><p>The Java virtual machine has a <em>method area</em> that is shared among all threads. The method area belongs to non-heap memory. It stores per-class structures such as a runtime constant pool, field and method data, and the code for methods and constructors. It is created at the Java virtual machine start-up.</p><p>The method area is logically part of the heap but a Java virtual machine implementation may choose not to either garbage collect or compact it. Similar to the heap, the method area may be of a fixed size or may be expanded and shrunk. The memory for the method area does not need to be contiguous.</p><p>In addition to the method area, a Java virtual machine implementation may require memory for internal processing or optimization which also belongs to non-heap memory. For example, the JIT compiler requires memory for storing the native machine code translated from the Java virtual machine code for high performance.</p></blockquote></li></ol><h5 id="MemoryUsage"><a href="#MemoryUsage" class="headerlink" title="MemoryUsage"></a>MemoryUsage</h5><p>MemoryUsage对象包含四部分</p><ul><li><p>init</p><p>表示Java虚拟机在启动期间从操作系统请求内存管理的初始内存量(以字节为单位)。Java虚拟机可能会向操作系统请求额外的内存，也可能会随着时间的推移向系统释放内存。init的值可能是未定义的。</p></li><li><p>used</p><p>当前正在使用的内存量，字节数</p></li><li><p>committed</p><p>表示保证可由Java虚拟机使用的内存量(以字节为单位)。提交的内存数量可能会随时间变化(增加或减少)。Java虚拟机可能释放内存给系统，提交的内存可能小于init。committed总是大于或等于used。</p></li><li><p>max</p><p>表示可用于内存管理的最大内存量(以字节为单位)。它的值可能没有定义。如果定义了最大内存量，则可能随时间而改变。如果定义了max，则已使用和提交的内存总量将始终小于或等于max。如果试图增加已用内存使其大于提交内存，这样即使used &lt;&#x3D; max仍然为true(例如，当系统的虚拟内存不足时)，那么内存分配可能会失败。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131803.png" alt="image-20201228104216053"></p><p>对jvm内存的事情情况通过 OpenJDK管理工具获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/MetricUtils.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">instantiateMemoryUsageMetrics</span><span class="params">(<span class="keyword">final</span> MetricGroup metricGroup, <span class="keyword">final</span> Supplier&lt;MemoryUsage&gt; memoryUsageSupplier)</span> &#123;</span><br><span class="line">    metricGroup.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(MetricNames.MEMORY_USED, () -&gt; memoryUsageSupplier.get().getUsed());</span><br><span class="line">    metricGroup.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(MetricNames.MEMORY_COMMITTED, () -&gt; memoryUsageSupplier.get().getCommitted());</span><br><span class="line">    metricGroup.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(MetricNames.MEMORY_MAX, () -&gt; memoryUsageSupplier.get().getMax());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>关于堆内存、非堆内存等内存类型参考JVM虚拟机相关内容</strong></em></p><p>Status.Flink.Memory是<a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-102%3A+Add+More+Metrics+to+TaskManager">Flink1.12.0</a>新增加的<a href="https://issues.apache.org/jira/browse/FLINK-14406">特性</a></p><p>在获取Flink已用的内存大小时，是依次获得每个Slot所用的内存。</p><p>获得总计的Flink管理内存时，是直接获取配置文件中的<code>taskmanager.memory.managed.size</code></p><blockquote><p>TaskExecutor管理内存大小，是由memory manager管理的非堆内存大小，为排序、哈希表、中间结果缓存、RocksDB状态后端所保留的大小。</p><p>内存使用者可以从内存管理器中以MemorySegments的形式分配内存，也可以从内存管理器中保留字节，并将其内存使用保持在该边界内。如果未指定，则派生它，以构成总Flink内存的配置部分。</p><p>Managed Memory size for TaskExecutors. This is the size of off-heap memory managed by the memory manager, reserved for sorting, hash tables, caching of intermediate results and RocksDB state backend. Memory consumers can either allocate memory from the memory manager in the form of MemorySegments, or reserve bytes from the memory manager and keep their memory usage within that boundary. If unspecified, it will be derived to make up the configured fraction of the Total Flink Memory.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/MetricUtils.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getUsedManagedMemory</span><span class="params">(TaskSlotTable&lt;?&gt; taskSlotTable)</span> &#123;</span><br><span class="line">    Set&lt;AllocationID&gt; activeTaskAllocationIds = taskSlotTable.getActiveTaskSlotAllocationIds();</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">usedMemory</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (AllocationID allocationID : activeTaskAllocationIds) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MemoryManager</span> <span class="variable">taskSlotMemoryManager</span> <span class="operator">=</span> taskSlotTable.getTaskMemoryManager(allocationID);</span><br><span class="line">            usedMemory += taskSlotMemoryManager.getMemorySize() - taskSlotMemoryManager.availableMemory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SlotNotFoundException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;The task slot &#123;&#125; is not present anymore and will be ignored in calculating the amount of used memory.&quot;</span>, allocationID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> usedMemory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JVM垃圾回收情况"><a href="#JVM垃圾回收情况" class="headerlink" title="JVM垃圾回收情况"></a>JVM垃圾回收情况</h4><p>垃圾回收可以获得回收的次数以及总时间，其中<GarbageCollector>的名字是通过Jvm管理工具的如下方法获得的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GarbageCollectorMXBean::getName</span><br></pre></td></tr></table></figure><h4 id="TM网络情况"><a href="#TM网络情况" class="headerlink" title="TM网络情况"></a>TM网络情况</h4><p>这里会采集TM所用的网络内存的相关信息<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/ops/metrics.html#default-shuffle-service">https://ci.apache.org/projects/flink/flink-docs-release-1.12/ops/metrics.html#default-shuffle-service</a></p><p>通过下面的Flink源码增加了相关的Metrics</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/io/network/metrics/NettyShuffleMetricFactory.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">internalRegisterShuffleMetrics</span><span class="params">(</span></span><br><span class="line"><span class="params">    MetricGroup parentMetricGroup,</span></span><br><span class="line"><span class="params">    NetworkBufferPool networkBufferPool)</span> &#123;</span><br><span class="line">    <span class="type">MetricGroup</span> <span class="variable">shuffleGroup</span> <span class="operator">=</span> parentMetricGroup.addGroup(METRIC_GROUP_SHUFFLE);</span><br><span class="line">    <span class="type">MetricGroup</span> <span class="variable">networkGroup</span> <span class="operator">=</span> shuffleGroup.addGroup(METRIC_GROUP_NETTY);</span><br><span class="line"></span><br><span class="line">    networkGroup.gauge(METRIC_TOTAL_MEMORY_SEGMENT,</span><br><span class="line">                       networkBufferPool::getTotalNumberOfMemorySegments);</span><br><span class="line">    networkGroup.gauge(METRIC_TOTAL_MEMORY,</span><br><span class="line">                       networkBufferPool::getTotalMemory);</span><br><span class="line"></span><br><span class="line">    networkGroup.gauge(METRIC_AVAILABLE_MEMORY_SEGMENT,</span><br><span class="line">                       networkBufferPool::getNumberOfAvailableMemorySegments);</span><br><span class="line">    networkGroup.gauge(METRIC_AVAILABLE_MEMORY,</span><br><span class="line">                       networkBufferPool::getAvailableMemory);</span><br><span class="line"></span><br><span class="line">    networkGroup.gauge(METRIC_USED_MEMORY_SEGMENT,</span><br><span class="line">                       networkBufferPool::getNumberOfUsedMemorySegments);</span><br><span class="line">    networkGroup.gauge(METRIC_USED_MEMORY,</span><br><span class="line">                       networkBufferPool::getUsedMemory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getTotalNumberOfMemorySegments</code>与<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/deployment/config.html#taskmanager-memory-network-min"><code>taskmanager.memory.network.min</code></a>配置项相关</p><blockquote><p>TaskExecutors的最小网络内存大小。网络内存是为ShuffleEnvironment预留的堆外内存(例如，网络缓冲区)。网络内存大小是由总链接内存的配置部分组成的。如果导出的大小小于&#x2F;大于配置的最小&#x2F;最大大小，则使用最小&#x2F;最大大小。网络内存的确切大小可以通过设置相同的最小&#x2F;最大值来显式指定</p><p>Min Network Memory size for TaskExecutors. Network Memory is off-heap memory reserved for ShuffleEnvironment (e.g., network buffers). Network Memory size is derived to make up the configured fraction of the Total Flink Memory. If the derived size is less&#x2F;greater than the configured min&#x2F;max size, the min&#x2F;max size will be used. The exact size of Network Memory can be explicitly specified by setting the min&#x2F;max to the same value.</p></blockquote><h4 id="Metrics-列表"><a href="#Metrics-列表" class="headerlink" title="Metrics 列表"></a>Metrics 列表</h4><h5 id="JVM-CPU指标"><a href="#JVM-CPU指标" class="headerlink" title="JVM CPU指标"></a>JVM CPU指标</h5><table><thead><tr><th align="center">Scope</th><th align="left">Infix</th><th align="left">Metrics</th><th align="left">Description</th><th align="left">Type</th></tr></thead><tbody><tr><td align="center"><strong>Job-&#x2F;TaskManager</strong></td><td align="left">Status.JVM.CPU</td><td align="left">Load</td><td align="left">The recent CPU usage of the JVM.</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Time</td><td align="left">The CPU time used by the JVM.</td><td align="left">Gauge</td></tr></tbody></table><h5 id="JVM-Memory"><a href="#JVM-Memory" class="headerlink" title="JVM Memory"></a>JVM Memory</h5><table><thead><tr><th align="center">Scope</th><th align="left">Infix</th><th align="left">Metrics</th><th align="left">Description</th><th align="left">Type</th></tr></thead><tbody><tr><td align="center"><strong>Job-&#x2F;TaskManager</strong></td><td align="left">Status.JVM.Memory</td><td align="left">Heap.Used</td><td align="left">The amount of heap memory currently used (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Heap.Committed</td><td align="left">The amount of heap memory guaranteed to be available to the JVM (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Heap.Max</td><td align="left">The maximum amount of heap memory that can be used for memory management (in bytes). This value might not be necessarily equal to the maximum value specified through -Xmx or the equivalent Flink configuration parameter. Some GC algorithms allocate heap memory that won’t be available to the user code and, therefore, not being exposed through the heap metrics.</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">NonHeap.Used</td><td align="left">The amount of non-heap memory currently used (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">NonHeap.Committed</td><td align="left">The amount of non-heap memory guaranteed to be available to the JVM (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">NonHeap.Max</td><td align="left">The maximum amount of non-heap memory that can be used for memory management (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Metaspace.Used</td><td align="left">The amount of memory currently used in the Metaspace memory pool (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Metaspace.Committed</td><td align="left">The amount of memory guaranteed to be available to the JVM in the Metaspace memory pool (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Metaspace.Max</td><td align="left">The maximum amount of memory that can be used in the Metaspace memory pool (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Direct.Count</td><td align="left">The number of buffers in the direct buffer pool.</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Direct.MemoryUsed</td><td align="left">The amount of memory used by the JVM for the direct buffer pool (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Direct.TotalCapacity</td><td align="left">The total capacity of all buffers in the direct buffer pool (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Mapped.Count</td><td align="left">The number of buffers in the mapped buffer pool.</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Mapped.MemoryUsed</td><td align="left">The amount of memory used by the JVM for the mapped buffer pool (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Mapped.TotalCapacity</td><td align="left">The number of buffers in the mapped buffer pool (in bytes).</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left">Status.Flink.Memory</td><td align="left">Managed.Used</td><td align="left">The amount of managed memory currently used.</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Managed.Total</td><td align="left">The total amount of managed memory.</td><td align="left">Gauge</td></tr></tbody></table><h5 id="GarbageCollection"><a href="#GarbageCollection" class="headerlink" title="GarbageCollection"></a>GarbageCollection</h5><table><thead><tr><th align="center">Scope</th><th align="left">Infix</th><th align="left">Metrics</th><th align="left">Description</th><th align="left">Type</th></tr></thead><tbody><tr><td align="center"><strong>Job-&#x2F;TaskManager</strong></td><td align="left">Status.JVM.GarbageCollector</td><td align="left"><GarbageCollector>.Count</td><td align="left">The total number of collections that have occurred.</td><td align="left">Gauge</td></tr><tr><td align="center"></td><td align="left"></td><td align="left"><GarbageCollector>.Time</td><td align="left">The total time spent performing garbage collection.</td><td align="left">Gauge</td></tr></tbody></table><h4 id="使用RestAPI获取TM-JVM性能指标"><a href="#使用RestAPI获取TM-JVM性能指标" class="headerlink" title="使用RestAPI获取TM JVM性能指标"></a>使用RestAPI获取TM JVM性能指标</h4><h5 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h5><p><code>url</code>: <code>http://&lt;jobmanager&gt;:&lt;port&gt;/taskmanagers/:taskmanagerid/metrics</code></p><p><code>params</code>:</p><ul><li><code>Status.JVM.CPU.Time</code></li><li><code>Status.JVM.CPU.Load</code>获取jvm进程的CPU负载，要想获得线程级的需要进一步考虑</li></ul><h2 id="System-Metrics采集"><a href="#System-Metrics采集" class="headerlink" title="System Metrics采集"></a>System Metrics采集</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>Flink使用<code>OSHI</code>来采集系统硬件信息</p><h4 id="CPU使用率获取方式"><a href="#CPU使用率获取方式" class="headerlink" title="CPU使用率获取方式"></a>CPU使用率获取方式</h4><p>Flink中关于CPU负载部分的采集源码如下，其中<code>getSystemCpuLoadTicks()</code>方法为<a href="https://oshi.github.io/oshi/apidocs/oshi/hardware/CentralProcessor.html#getSystemCpuLoadTicks()">OSHI的方法</a>。</p><p>该方法返回的指标中，<code>irq</code>为<code>Hardware interrupts</code>，<code>SoftIRQ</code>为<code>Software interrupts</code>。</p><p>oshi访问<code>/proc/stat</code>文件获取CPU信息</p><p><code>/proc/stat</code>文件部分截图</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131765.png" alt="image-20201223170433096"></p><p><em><strong>重要</strong></em></p><p><code>oshi</code>在对<code>cpuUsage</code>使用的<code>getSystemCpuLoad()</code>方法调用了调用了<code>com.sun.management.OperatingSystemMXBean</code>中的<a href="https://docs.oracle.com/javase/7/docs/jre/api/management/extension/com/sun/management/OperatingSystemMXBean.html#getSystemCpuLoad()"><code>getSystemCpuLoad()</code>方法</a>来获得负载。该方法说明如下：</p><blockquote><p>返回整个系统的“最近的CPU使用情况”。 此值是[0.0,1.0]区间中的小数。 值0.0表示在最近观察到的时间内所有CPU都处于空闲状态，而值1.0表示在观察到的最近一段时间内所有CPU 100％处于活动状态。 介于0.0到1.0之间的所有值都是可能的，具体取决于系统中正在进行的活动。 如果系统最近的CPU使用率不可用，则该方法返回负值。</p><p>Returns the “recent cpu usage” for the whole system. This value is a double in the [0.0,1.0] interval. A value of 0.0 means that all CPUs were idle during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running 100% of the time during the recent period being observed. All values betweens 0.0 and 1.0 are possible depending of the activities going on in the system. If the system recent cpu usage is not available, the method returns a negative value.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/SystemResourcesCounter.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calculateCPUUsage</span><span class="params">(CentralProcessor processor)</span> &#123;</span><br><span class="line"><span class="type">long</span>[] ticks = processor.getSystemCpuLoadTicks();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.previousCpuTicks == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.previousCpuTicks = ticks;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用两次检测之间的时钟数来计算百分比</span></span><br><span class="line"><span class="type">long</span> <span class="variable">userTicks</span> <span class="operator">=</span> ticks[TickType.USER.getIndex()] - previousCpuTicks[TickType.USER.getIndex()];</span><br><span class="line"><span class="type">long</span> <span class="variable">niceTicks</span> <span class="operator">=</span> ticks[TickType.NICE.getIndex()] - previousCpuTicks[TickType.NICE.getIndex()];</span><br><span class="line"><span class="type">long</span> <span class="variable">sysTicks</span> <span class="operator">=</span> ticks[TickType.SYSTEM.getIndex()] - previousCpuTicks[TickType.SYSTEM.getIndex()];</span><br><span class="line"><span class="type">long</span> <span class="variable">idleTicks</span> <span class="operator">=</span> ticks[TickType.IDLE.getIndex()] - previousCpuTicks[TickType.IDLE.getIndex()];</span><br><span class="line"><span class="type">long</span> <span class="variable">iowaitTicks</span> <span class="operator">=</span> ticks[TickType.IOWAIT.getIndex()] - previousCpuTicks[TickType.IOWAIT.getIndex()];</span><br><span class="line"><span class="type">long</span> <span class="variable">irqTicks</span> <span class="operator">=</span> ticks[TickType.IRQ.getIndex()] - previousCpuTicks[TickType.IRQ.getIndex()];</span><br><span class="line"><span class="type">long</span> <span class="variable">softIrqTicks</span> <span class="operator">=</span> ticks[TickType.SOFTIRQ.getIndex()] - previousCpuTicks[TickType.SOFTIRQ.getIndex()];</span><br><span class="line">        <span class="comment">// 这说明user、nice、sys、idle、iow、irq、softirq之和应为100%。</span></span><br><span class="line">        <span class="comment">// 在flink提供的指标中，放弃了getSystemCpuLoadTicks()方法返回的Steal时间，Steal时间表示有虚拟机的时候，被虚拟机占用的时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">totalCpuTicks</span> <span class="operator">=</span> userTicks + niceTicks + sysTicks + idleTicks + iowaitTicks + irqTicks + softIrqTicks;</span><br><span class="line"><span class="built_in">this</span>.previousCpuTicks = ticks;</span><br><span class="line"></span><br><span class="line">cpuUser = <span class="number">100d</span> * userTicks / totalCpuTicks;</span><br><span class="line">cpuNice = <span class="number">100d</span> * niceTicks / totalCpuTicks;</span><br><span class="line">cpuSys = <span class="number">100d</span> * sysTicks / totalCpuTicks;</span><br><span class="line">cpuIdle = <span class="number">100d</span> * idleTicks / totalCpuTicks;</span><br><span class="line">cpuIOWait = <span class="number">100d</span> * iowaitTicks / totalCpuTicks;</span><br><span class="line">cpuIrq = <span class="number">100d</span> * irqTicks / totalCpuTicks;</span><br><span class="line">cpuSoftIrq = <span class="number">100d</span> * softIrqTicks / totalCpuTicks;</span><br><span class="line"></span><br><span class="line">cpuUsage = processor.getSystemCpuLoad() * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] loadAverage = processor.getSystemLoadAverage(<span class="number">3</span>);</span><br><span class="line">cpuLoad1 = (loadAverage[<span class="number">0</span>] &lt; <span class="number">0</span> ? Double.NaN : loadAverage[<span class="number">0</span>]);</span><br><span class="line">cpuLoad5 = (loadAverage[<span class="number">1</span>] &lt; <span class="number">0</span> ? Double.NaN : loadAverage[<span class="number">1</span>]);</span><br><span class="line">cpuLoad15 = (loadAverage[<span class="number">2</span>] &lt; <span class="number">0</span> ? Double.NaN : loadAverage[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] load = processor.getProcessorCpuLoadBetweenTicks();</span><br><span class="line">checkState(load.length == cpuUsagePerProcessor.length());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; load.length; i++) &#123;</span><br><span class="line">cpuUsagePerProcessor.set(i, load[i] * <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内存使用率获取方式"><a href="#内存使用率获取方式" class="headerlink" title="内存使用率获取方式"></a>内存使用率获取方式</h4><p>oshi访问文件<code>/proc/meminfo</code>来获取内存信息</p><p><code>/proc/meminfo</code>文件部分截图</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131311.png" alt="image-20201223165623999"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/SystemResourcesMetricsInitializer.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">instantiateMemoryMetrics</span><span class="params">(MetricGroup metrics, GlobalMemory memory)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取Available大小，这与Free不同，Free表示一直没有被使用过的内存，如果有一个程序之前使用了部分内存，现在不用了，Linux也不会将这部分内存算成Free</span></span><br><span class="line">    <span class="comment">// 而Available包含了这部分可以回收的内存，因此Available要大于Free</span></span><br><span class="line">    metrics.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(<span class="string">&quot;Available&quot;</span>, memory::getAvailable);</span><br><span class="line">    metrics.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(<span class="string">&quot;Total&quot;</span>, memory::getTotal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="swap交换分区使用率获取方式"><a href="#swap交换分区使用率获取方式" class="headerlink" title="swap交换分区使用率获取方式"></a>swap交换分区使用率获取方式</h4><p>oshi访问文件<code>/proc/meminfo</code>来获取内存信息，与获取内存使用相同</p><p>这里直接调用<code>oshi</code>的<code>getSwapUsed</code>方法，在<code>oshi</code>中，<code>SwapUsed</code>是通过<code>/proc/meminfo</code>文件中的<code>Total</code>和<code>Free</code>相减得到的。</p><p>Swap的使用，能表现出系统内存是否够用，如果频繁使用Swap，则表示<em>系统内存不足</em>。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310131950.png" alt="image-20201223170913324"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/SystemResourcesMetricsInitializer.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">instantiateSwapMetrics</span><span class="params">(MetricGroup metrics, GlobalMemory memory)</span> &#123;</span><br><span class="line">    metrics.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(<span class="string">&quot;Used&quot;</span>, memory::getSwapUsed);</span><br><span class="line">    metrics.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(<span class="string">&quot;Total&quot;</span>, memory::getSwapTotal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网络使用情况获取方式"><a href="#网络使用情况获取方式" class="headerlink" title="网络使用情况获取方式"></a>网络使用情况获取方式</h4><p><code>oshi</code>通过<code>getNetworkIFs()</code>方法获取网络接口列表，包括本地接口。访问以下这些文件获取接口数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// oshi/hardware/platform/linux/LinuxNetworks.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateNetworkStats</span><span class="params">(NetworkIF netIF)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">txBytesPath</span> <span class="operator">=</span> String.format(<span class="string">&quot;/sys/class/net/%s/statistics/tx_bytes&quot;</span>, netIF.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">rxBytesPath</span> <span class="operator">=</span> String.format(<span class="string">&quot;/sys/class/net/%s/statistics/rx_bytes&quot;</span>, netIF.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">txPacketsPath</span> <span class="operator">=</span> String.format(<span class="string">&quot;/sys/class/net/%s/statistics/tx_packets&quot;</span>, netIF.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">rxPacketsPath</span> <span class="operator">=</span> String.format(<span class="string">&quot;/sys/class/net/%s/statistics/rx_packets&quot;</span>, netIF.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">txErrorsPath</span> <span class="operator">=</span> String.format(<span class="string">&quot;/sys/class/net/%s/statistics/tx_errors&quot;</span>, netIF.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">rxErrorsPath</span> <span class="operator">=</span> String.format(<span class="string">&quot;/sys/class/net/%s/statistics/rx_errors&quot;</span>, netIF.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">speed</span> <span class="operator">=</span> String.format(<span class="string">&quot;/sys/class/net/%s/speed&quot;</span>, netIF.getName());</span><br><span class="line"></span><br><span class="line">    netIF.setTimeStamp(System.currentTimeMillis());</span><br><span class="line">    netIF.setBytesSent(FileUtil.getLongFromFile(txBytesPath));</span><br><span class="line">    netIF.setBytesRecv(FileUtil.getLongFromFile(rxBytesPath));</span><br><span class="line">    netIF.setPacketsSent(FileUtil.getLongFromFile(txPacketsPath));</span><br><span class="line">    netIF.setPacketsRecv(FileUtil.getLongFromFile(rxPacketsPath));</span><br><span class="line">    netIF.setOutErrors(FileUtil.getLongFromFile(txErrorsPath));</span><br><span class="line">    netIF.setInErrors(FileUtil.getLongFromFile(rxErrorsPath));</span><br><span class="line">    netIF.setSpeed(FileUtil.getLongFromFile(speed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Flink中，获得每个接口的发送接收的速率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org/apache/flink/runtime/metrics/util/SystemResourcesMetricsInitializer.java</span></span><br><span class="line"><span class="comment">// 这里分别获取不同网卡的信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">instantiateNetworkMetrics</span><span class="params">(MetricGroup metrics, SystemResourcesCounter usageCounter)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; usageCounter.getNetworkInterfaceNames().length; i++) &#123;</span><br><span class="line">        <span class="type">MetricGroup</span> <span class="variable">interfaceGroup</span> <span class="operator">=</span> metrics.addGroup(usageCounter.getNetworkInterfaceNames()[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">interfaceNo</span> <span class="operator">=</span> i;</span><br><span class="line">        interfaceGroup.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(<span class="string">&quot;ReceiveRate&quot;</span>, () -&gt; usageCounter.getReceiveRatePerInterface(interfaceNo));</span><br><span class="line">        interfaceGroup.&lt;Long, Gauge&lt;Long&gt;&gt;gauge(<span class="string">&quot;SendRate&quot;</span>, () -&gt; usageCounter.getSendRatePerInterface(interfaceNo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calculateNetworkUsage</span><span class="params">(NetworkIF[] networkIFs)</span> &#123;</span><br><span class="line">    checkState(networkIFs.length == receiveRatePerInterface.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; networkIFs.length; i++) &#123;</span><br><span class="line">        <span class="type">NetworkIF</span> <span class="variable">networkIF</span> <span class="operator">=</span> networkIFs[i];</span><br><span class="line">        networkIF.updateNetworkStats();</span><br><span class="line"><span class="comment">// 在这里设置每个接口发送接收的速率</span></span><br><span class="line">        receiveRatePerInterface.set(i, (networkIF.getBytesRecv() - bytesReceivedPerInterface[i]) * <span class="number">1000</span> / probeIntervalMs);</span><br><span class="line">        sendRatePerInterface.set(i, (networkIF.getBytesSent() - bytesSentPerInterface[i]) * <span class="number">1000</span> / probeIntervalMs);</span><br><span class="line"></span><br><span class="line">        bytesReceivedPerInterface[i] = networkIF.getBytesRecv();</span><br><span class="line">        bytesSentPerInterface[i] = networkIF.getBytesSent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置Flink"><a href="#配置Flink" class="headerlink" title="配置Flink"></a>配置Flink</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FLINK_HOME/lib文件夹下</span></span><br><span class="line">wget https://repo1.maven.org/maven2/com/github/oshi/oshi-core/3.4.0/oshi-core-3.4.0.jar</span><br><span class="line">wget https://repo1.maven.org/maven2/net/java/dev/jna/jna-platform/4.2.2/jna-platform-4.2.2.jar</span><br><span class="line">wget https://repo1.maven.org/maven2/net/java/dev/jna/jna/4.2.2/jna-4.2.2.jar</span><br></pre></td></tr></table></figure><h3 id="Metrics列表"><a href="#Metrics列表" class="headerlink" title="Metrics列表"></a>Metrics列表</h3><h4 id="System-CPU"><a href="#System-CPU" class="headerlink" title="System CPU"></a>System CPU</h4><table><thead><tr><th align="center">Scope</th><th align="left">Infix</th><th align="left">Metrics</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><strong>Job-&#x2F;TaskManager</strong></td><td align="left">System.CPU</td><td align="left">Usage</td><td align="left">总体CPU使用。Overall % of CPU usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Idle</td><td align="left">CPU空闲半分比，% of CPU Idle usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Sys</td><td align="left">CPU内核时间占用百分比，% of System CPU usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">User</td><td align="left">CPU用户空间占用百分比，% of User CPU usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">IOWait</td><td align="left">CPU等待输入输出百分比，% of IOWait CPU usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Irq</td><td align="left">% of Irq CPU usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">SoftIrq</td><td align="left">% of SoftIrq CPU usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Nice</td><td align="left">% of Nice Idle usage on the machine.</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Load1min</td><td align="left">Average CPU load over 1 minute</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Load5min</td><td align="left">Average CPU load over 5 minute</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Load15min</td><td align="left">Average CPU load over 15 minute</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">UsageCPU*</td><td align="left">% of CPU usage per each processor</td></tr></tbody></table><h4 id="System-memory"><a href="#System-memory" class="headerlink" title="System memory"></a>System memory</h4><table><thead><tr><th align="center">Scope</th><th align="left">Infix</th><th align="left">Metrics</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><strong>Job-&#x2F;TaskManager</strong></td><td align="left">System.Memory</td><td align="left">Available</td><td align="left">Available memory in bytes</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Total</td><td align="left">Total memory in bytes</td></tr><tr><td align="center"></td><td align="left">System.Swap</td><td align="left">Used</td><td align="left">Used swap bytes</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">Total</td><td align="left">Total swap in bytes</td></tr></tbody></table><h4 id="System-network"><a href="#System-network" class="headerlink" title="System network"></a>System network</h4><table><thead><tr><th align="center">Scope</th><th align="left">Infix</th><th align="left">Metrics</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><strong>Job-&#x2F;TaskManager</strong></td><td align="left">System.Network.INTERFACE_NAME</td><td align="left">ReceiveRate</td><td align="left">Average receive rate in bytes per second</td></tr><tr><td align="center"></td><td align="left"></td><td align="left">SendRate</td><td align="left">Average send rate in bytes per second</td></tr></tbody></table><h3 id="使用REST-API获取TM系统性能指标"><a href="#使用REST-API获取TM系统性能指标" class="headerlink" title="使用REST API获取TM系统性能指标"></a>使用REST API获取TM系统性能指标</h3><p>举例部分API</p><h4 id="获取TM列表"><a href="#获取TM列表" class="headerlink" title="获取TM列表"></a>获取TM列表</h4><p><code>url</code>: <code>http://&lt;jobmanager&gt;:&lt;port&gt;/taskmanagers</code></p><h4 id="获取TM系统信息"><a href="#获取TM系统信息" class="headerlink" title="获取TM系统信息"></a>获取TM系统信息</h4><h5 id="CPU-1"><a href="#CPU-1" class="headerlink" title="CPU"></a>CPU</h5><p><code>url</code>: <code>http://&lt;jobmanager&gt;:&lt;port&gt;/taskmanagers/:taskmanagerid/metrics</code></p><p><code>params</code>: </p><ul><li><code>System.CPU.Usage</code>，这一指标显示可能与Top不同</li><li><code>System.CPU.Idle</code>，采集空闲指标</li></ul><h5 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h5><p><code>url</code>: <code>http://&lt;jobmanager&gt;:&lt;port&gt;/taskmanagers/:taskmanagerid/metrics</code></p><p><code>params</code>: </p><ul><li><code>System.Memory.Total</code>，字节数</li><li><code>System.Memory.Available</code>，采集空闲内存，字节数</li><li><code>System.Swap.Used</code>，使用Swap是否被使用，来考虑系统内存是否足够用，如果系统内存不足，则会使用Swap分区</li><li><code>System.Swap.Total</code>，</li></ul><h6 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h6><p><code>url</code>: <code>http://&lt;jobmanager&gt;:&lt;port&gt;/taskmanagers/:taskmanagerid/metrics</code></p><p><code>params</code>: </p><ul><li><code>System.Network.&lt;interface_name&gt;.ReceiveRate</code>，每秒字节数</li><li><code>System.Network.&lt;interface_name&gt;.SendRate</code>，发送字节数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 流处理 </category>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 流处理 </tag>
            
            <tag> metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Top 命令详解</title>
      <link href="/2020/8649918/"/>
      <url>/2020/8649918/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下Top命令详解"><a href="#Linux下Top命令详解" class="headerlink" title="Linux下Top命令详解"></a>Linux下Top命令详解</h1><h2 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h2><p><strong>top命令</strong> 可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。通过top命令所提供的互动式界面，用热键可以管理。</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-b：以批处理模式操作；</span><br><span class="line">-c：显示完整的治命令；</span><br><span class="line">-d：屏幕刷新间隔时间；</span><br><span class="line">-I：忽略失效过程；</span><br><span class="line">-s：保密模式；</span><br><span class="line">-S：累积模式；</span><br><span class="line">-i&lt;时间&gt;：设置间隔时间；</span><br><span class="line">-u&lt;用户名&gt;：指定用户名；</span><br><span class="line">-p&lt;进程号&gt;：指定进程；</span><br><span class="line">-n&lt;次数&gt;：循环显示的次数。</span><br></pre></td></tr></table></figure><h2 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">h：显示帮助画面，给出一些简短的命令总结说明；</span><br><span class="line">k：终止一个进程；</span><br><span class="line">i：忽略闲置和僵死进程，这是一个开关式命令；</span><br><span class="line">q：退出程序；</span><br><span class="line">r：重新安排一个进程的优先级别；</span><br><span class="line">S：切换到累计模式；</span><br><span class="line">s：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s；</span><br><span class="line">f或者F：从当前显示中添加或者删除项目；</span><br><span class="line">o或者O：改变显示项目的顺序；</span><br><span class="line">l：切换显示平均负载和启动时间信息；</span><br><span class="line">m：切换显示内存信息；</span><br><span class="line">t：切换显示进程和CPU状态信息；</span><br><span class="line">c：切换显示命令名称和完整命令行；</span><br><span class="line">M：根据驻留内存大小进行排序；</span><br><span class="line">P：根据CPU使用百分比大小进行排序；</span><br><span class="line">T：根据时间/累计时间进行排序；</span><br><span class="line">w：将当前设置写入~/.toprc文件中。</span><br><span class="line">I: 切换Irix模式和Solaris模式</span><br></pre></td></tr></table></figure><h2 id="显示结果介绍"><a href="#显示结果介绍" class="headerlink" title="显示结果介绍"></a>显示结果介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133699.png" alt="image-20201223140206196"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">top - 14:12:41 up 40 days,  8:58,  1 user,  load average: 0.01, 0.04, 0.05</span><br><span class="line">Tasks: 150 total,   1 running, 149 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 16265208 total, 13027888 free,  1907500 used,  1329820 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used. 14028784 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">31413lsy       20   0 7789400 810980  28092 S   1.7  5.0   0:38.60 java</span><br><span class="line">14052lsy       20   0 6060348 282744  22764 S   0.7  1.7  96:03.88 java</span><br><span class="line">31983root      20   0  162152   2288   1548 R   0.3  0.0   0:00.50 top</span><br><span class="line">1root      20   0  191284   4280   2596 S   0.0  0.0   0:15.67 systemd</span><br><span class="line">2root      20   0       0      0      0 S   0.0  0.0   0:00.60 kthreadd</span><br><span class="line">4root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H</span><br><span class="line">5root      20   0       0      0      0 S   0.0  0.0   0:10.16 kworker/u16:0</span><br></pre></td></tr></table></figure><p><strong>第一行</strong></p><ul><li><code>top - 14:09:28</code>：显示当前系统时间</li><li><code>up 40 days,  8:57</code>：系统已经运行了16天</li><li><code> 1 user</code>：一个用户登录</li><li><code>load average: 0.04, 0.05, 0.05</code>：系统负载，即任务队列的平均长度，三个数值分别为截止目前1分钟，5分钟，15分钟内的平均值</li></ul><p><strong>第二行</strong></p><ul><li><code>Tasks: 150 total</code>：总进程数</li><li><code>1 running</code>：正在运行的进程数</li><li><code>149 sleeping</code>：睡眠进程数</li><li><code>0 stopped</code>：停止进程数</li><li><code>0 zombie</code>：冻结进程数</li></ul><p><strong>第三行</strong></p><ul><li><p><code>%Cpu(s):  0.2 us</code>：用户空间进程占用CPU时间的百分比</p></li><li><p><code>0.1 sy</code>：内核空间进程占用CPU时间的百分比</p></li><li><p><code>0.0 ni</code>：ni表示nice的意思，也就是哪些用户进程被提升优先级之后，占用的CPU运行时间</p></li><li><p><code>99.7 id</code>：系统空闲时间</p></li><li><p><code>0.0 wa</code>：等待输入输出的CPU百分比</p></li><li><p><code>0.0 hi</code>：CPU处理硬中断(hard interrupt）的时间百分比</p></li><li><p><code> 0.0 si</code>：CPU处理软中断(soft interrupt）的时间百分比</p></li><li><p><code>0.0 st</code>：这个表示在有虚拟机的时候，被虚拟机占用的CPU时间。st表示窃取的意思，steal的意思。</p><p><em><strong>上面这些百分比相加的话，是等于100%的，按数字键 1 可以看到不同核心的负载</strong></em></p></li></ul><p><strong>第四行</strong></p><ul><li><code>KiB Mem : 16265208 total</code>：表示系统可用的物理内存总量</li><li><code>13027888 free</code>：表示当前空闲的内存总量</li><li><code>1907500 used</code>：表示当前已用的内存总量</li><li><code>1329820 buff/cache</code>：用作系统内核缓存的物理内存总量</li></ul><p><strong>第五行</strong></p><ul><li><code>KiB Swap:  2097148 total</code>：交换区总量</li><li><code>2097148 free</code>：交换区空闲</li><li><code>      0 used</code>：交换区使用</li><li><code>14028784 avail Mem</code>：avail number是在不进行交换的情况下，用于启动新应用程序的可用物理内存的估计。与free字段不同，它试图考虑容易回收的页面缓存和内存。它在内核3.14上可用，在内核2.6.27+上可模拟，否则就像free一样</li></ul><p><strong>第七行以下</strong></p><ul><li><code>PID</code>：进程id</li><li><code>USER</code>：进程所有者</li><li><code>PR</code>：进程优先级</li><li><code>NI</code>：nice值。负值表示高优先级，正值表示低优先级</li><li><code>VIRT</code>：进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</li><li><code>RES</code>：进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</li><li><code>SHR</code>：共享内存大小，单位kb</li><li><code>S</code>：进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</li><li><code>%CPU</code>：上次更新到现在的CPU时间占用百分比，对一个多线程程序，如果不是在线程模式下，这个数值是可能超过100%的。对于多处理器环境，如果<code>Irix</code>模式是关闭状态，top将在<code>Solaris</code>模式下工作，任务的CPU使用率将除以CPU数量，可以通过交互命令<code>I</code>来更改状态</li><li><code>%MEM</code>：进程使用的物理内存百分比</li><li><code>TIME+</code>：进程使用的CPU时间总计，单位1&#x2F;100秒</li><li><code>COMMAND</code>：进程名称（命令名&#x2F;命令行）</li></ul><p>参考：</p><p>[1] <a href="https://wangchujiang.com/linux-command/c/top.html">https://wangchujiang.com/linux-command/c/top.html</a></p><p>[2] <a href="https://www.cnblogs.com/taobataoma/archive/2007/12/26/1015167.html">https://www.cnblogs.com/taobataoma/archive/2007/12/26/1015167.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言学习笔记-基础</title>
      <link href="/2020/e5c841b2/"/>
      <url>/2020/e5c841b2/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言学习笔记-基础内容"><a href="#Go语言学习笔记-基础内容" class="headerlink" title="Go语言学习笔记-基础内容"></a>Go语言学习笔记-基础内容</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>通道</strong>是一种允许某一例程向另一例程传递指定类型的值的通信机制。</p><p>当一个goroutine试图在一个通道上进行发送或接收操作时，它会阻塞，直到另一个goroutine试图进行接收或发送操作才传递值，并开始处理两个goroutine。</p><h3 id="一些习惯"><a href="#一些习惯" class="headerlink" title="一些习惯"></a>一些习惯</h3><ul><li>Go语言使用<strong>驼峰式</strong>风格</li><li>包名称本身总是由小写字母组成。</li><li>通常名称的作用域越大，就使用越长且更有意义的名称。</li></ul><h3 id="生命周期问题"><a href="#生命周期问题" class="headerlink" title="生命周期问题"></a>生命周期问题</h3><ul><li>如果一个实体在函数中声明，那么它仅对函数局部有效。如果一个实体在函数外部声明，它将对&#x3D;&#x3D;<strong>包</strong>&#x3D;&#x3D;里所有源文件可见。</li><li>实体第一个字母的大小写决定其可见性是否跨包。</li></ul><h3 id="作用域与生命周期"><a href="#作用域与生命周期" class="headerlink" title="作用域与生命周期"></a>作用域与生命周期</h3><p>声明的作用域是声明在程序文本中出现的区域，它是一个编译时属性。变量的生命周期是变量在程序执行期间能被程序的其他部分所引用的起止时间，它是一个运行时属性。</p><p>在包级别声明，可以被同一个包里的任何文件引用；导入的包是文件级别的，所以可以在同一个文件内引用；</p><p>内部的声明会覆盖外层的。</p><h2 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h2><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>for是go里面唯一的循环语句，有以下形式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 第一种，与其他语言的for循环类似</span></span><br><span class="line"><span class="keyword">for</span> initialization;condition;post&#123;</span><br><span class="line">    <span class="comment">// 0个或多个语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 第二种，其他语言的while语句</span></span><br><span class="line"><span class="keyword">for</span> condition&#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 第三种，传统的无限循环</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 第四种，在字符串或slice数据上迭代</span></span><br><span class="line"><span class="keyword">for</span> _,_ := <span class="keyword">range</span> os.Args[<span class="number">1</span>:]&#123;</span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="new-函数"><a href="#new-函数" class="headerlink" title="new 函数"></a>new 函数</h3><p>使用new函数创建变量，表达式<code>new(T)</code>创建一个未命名的T类型变量，初始化未T类型的零值，<strong>并返回其地址</strong>。</p><h2 id="一些待解决的问题"><a href="#一些待解决的问题" class="headerlink" title="一些待解决的问题"></a>一些待解决的问题</h2><h3 id="1-URL响应问题"><a href="#1-URL响应问题" class="headerlink" title="1. URL响应问题"></a>1. URL响应问题</h3><p>使用go做服务器时，<strong>以<code>/</code>结尾的处理模式匹配所有含有这个前缀的URL</strong>，比如下面这个例子，会触发两次处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler2)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/count&quot;</span>,counter)</span><br></pre></td></tr></table></figure><p>但有个问题，使用<code>http.Get</code>对url进行请求时，就不会触发<code>/</code>。服务器与客户端代码如下，访问结果在代码下方。</p><p>服务端代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 问题：这种方式处理，是否两个处理函数都会触发</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler2)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/count&quot;</span>,counter)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8000&quot;</span>,<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler2</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">mu.Lock()</span><br><span class="line">count++</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)</span><br><span class="line">fmt.Println(<span class="string">&quot;this is path &#x27;/&#x27;&quot;</span>)</span><br><span class="line">mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">counter</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">mu.Lock()</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Count %d\n&quot;</span>,count)</span><br><span class="line">fmt.Println(<span class="string">&quot;this is path &#x27;count&#x27;&quot;</span>)</span><br><span class="line">mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> getURL(ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getURL</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">url := <span class="string">&quot;http://localhost:8000/count&quot;</span></span><br><span class="line">start := time.Now()</span><br><span class="line">resp, err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Sprint(os.Stderr, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">reader := <span class="built_in">new</span>(strings.Builder)</span><br><span class="line">io.Copy(reader, resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line">secs := time.Since(start).Seconds()</span><br><span class="line">ch &lt;- fmt.Sprintf(<span class="string">&quot;%.2fs %s&quot;</span>, secs, reader.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310132710.png" alt="image-20201120172805036"></p><h3 id="2-算法原理"><a href="#2-算法原理" class="headerlink" title="2. 算法原理"></a>2. 算法原理</h3><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310132305.png" alt="image-20201127210210047"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户权限&#39;/etc/sudoer&#39;配置</title>
      <link href="/2020/4adf7b4/"/>
      <url>/2020/4adf7b4/</url>
      
        <content type="html"><![CDATA[<h1 id="【转载】Linux-x2F-etc-x2F-sudoer-配置"><a href="#【转载】Linux-x2F-etc-x2F-sudoer-配置" class="headerlink" title="【转载】Linux &#x2F;etc&#x2F;sudoer 配置"></a>【转载】Linux &#x2F;etc&#x2F;sudoer 配置</h1><blockquote><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/43934300">https://zhuanlan.zhihu.com/p/43934300</a></p></blockquote><p>当普通用户向其他的用户获取它的权限的时候，其他用户怎么去判断是不是需要给这样的权限给这个普通用户。其中的权限分配体现在给予权限者的<code>/etc/sudoers</code>文件当中。</p><p>比如在文件中配置有这样一条信息。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310135159.png" alt="v2-aabac307640f3d2f50be74d9c6cc2497_r"></p><ul><li><code>zhang</code>：表示用户名</li><li><code>ALL=(ALL)</code>：第一个<code>ALL</code>表示所有的主机，第二个<code>ALL</code>表示所有的用户</li><li>NOPASSWD：表示不需要密码就能切换到用户</li><li><code>/usr/bin/bash,/usr/bin/sh</code>：表示能够执行的命令</li></ul><p>这个配置的意思就是，<code>zhang</code>用户可以在任意主机上不输入密码的情况下以任意用户执行<code>/usr/bin/bash,/usr/bin/sh</code></p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/v2-df97d0ae89d65a68445075be4e4a7304_r.jpg" alt="v2-df97d0ae89d65a68445075be4e4a7304_r"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 用户权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流处理弹性相关论文阅读笔记</title>
      <link href="/2020/575ad623/"/>
      <url>/2020/575ad623/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据流处理弹性伸缩论文阅读笔记"><a href="#大数据流处理弹性伸缩论文阅读笔记" class="headerlink" title="大数据流处理弹性伸缩论文阅读笔记"></a>大数据流处理弹性伸缩论文阅读笔记</h1><h2 id="1-Multi-Level-Elasticity-for-Data-Stream-Processing-IEEE-Transactions-on-Parallel-and-Distributed-Systems-TPDS-2019-A"><a href="#1-Multi-Level-Elasticity-for-Data-Stream-Processing-IEEE-Transactions-on-Parallel-and-Distributed-Systems-TPDS-2019-A" class="headerlink" title="[1] Multi-Level Elasticity for Data Stream Processing. IEEE Transactions on Parallel and Distributed Systems(TPDS).2019.A"></a>[1] Multi-Level Elasticity for Data Stream Processing. IEEE Transactions on Parallel and Distributed Systems(TPDS).2019.A</h2><h3 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h3><p>更改不同的执行容器(虚拟机、进程、线程)的数量来影响容器的性能。基本的想法是不同的执行容器会有不同的性能，但是也会带来不同的开销。作者的想法是自动提供最少的资源来满足应用所需的性能。在作者的方法中，使用低级别的容器组合来充分利用高级别容器的资源。</p><h3 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h3><p>多层次扩展的主要思路是，检查当前节点是否达到阈值，如果达到了就扩展节点，如果没达到就考虑增加一个进程。主要是在进行进程与虚拟机之间的调度。</p><p>文章中的应用程序主要考虑处理大量小信息的流处理程序(比如，推特消息，传感器日志)。文章提出了使用环境是非多租户环境，并且节点是应用专用(这个应该就是为了避免CPU等信息受干扰的问题)。算子实例之间平均分配数据流(不考虑数据倾斜)。</p><p>作者提出的方法依次执行以下步骤，（1）评估不同层次的执行容器的性能（2）为给定的负载提供适当的配置（3）构造具体应用的弹性控制器。</p><p>为了决定提供什么样的执行容器，需要知道不同级别的执行容器的并行度如何影响性能，作者获得这个信息的方式是通过平台提供，或进行基准测试。在考虑瓶颈算子的时候，是从离源算子近的地方开始考虑，避免上游影响下游。</p><h4 id="什么时候决定扩展"><a href="#什么时候决定扩展" class="headerlink" title="什么时候决定扩展"></a>什么时候决定扩展</h4><p>作者在考虑是否进行扩展时，是按照算子实例逐个考虑，通过比较实例的$Health$值是否低于$minHealth$来判断实例是否需要扩展。</p><h4 id="如何进行扩展"><a href="#如何进行扩展" class="headerlink" title="如何进行扩展"></a>如何进行扩展</h4><p>首先找到具有最小资源负载的节点(也就是当前空闲资源最多的节点)。当具有最多资源的节点的CPU与内存的占用超过设定的阈值，则会扩展起一个新的节点。如果节点还有资源，则会根据最优容器配置部署一个新的实例来提增加性能，这个最优信息是通过第一步中获得的。算法也会更新新的配置信息。</p><p>为了防止震荡发生，不是每次观察时都会进行缩放，而是对多个观察值进行线性回归来计算变化趋势。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><h3 id="论文内容"><a href="#论文内容" class="headerlink" title="论文内容"></a>论文内容</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>文章研究了在低延迟和最小资源使用情况下，以分析大量数据为目标的流处理环境的被动弹性问题。文章提出了一种弹性管理策略，该策略可以太藕节应用程序组件的并行度，同时明确解决执行容器的层次结构(虚拟机、进程、线程)。展示了错误提供执行容器所导致的性能衰减，并提出了一种方法来使用最少的资源增加性能。文章描述了监控指标并展示了如何考虑执行环境的细节。通过使用真实应用程序进行实验验证了方法的有效性。</p><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>在不同的计算系统领域，大数据都是一个挑战。随着互连设备的普及，它出现在物联网中，随着高性能计算系统规模的增长而增长，并伴随着互联网和社交网络活动的扩展。也是数据只能的主要主题。</p><p>处理大数据有两种主要技术：批处理和流处理。批处理是先将数据存储在巨大的数据库中，然后再进行处理，通常使用可扩展的编程模型，例如Google的MapReduce。 但是，随着数据规模的不断增长，数据传输和存储的成本变得令人望而却步。</p><p>作者关注于执行环境，并研究如何更改不同执行容器的数量来影响程序的性能。</p><h4 id="Motivation-for-Multi-level-Elasticity"><a href="#Motivation-for-Multi-level-Elasticity" class="headerlink" title="Motivation for Multi-level Elasticity"></a>Motivation for Multi-level Elasticity</h4><h5 id="System-Model"><a href="#System-Model" class="headerlink" title="System Model"></a>System Model</h5><p>主要介绍了流处理模型，并引出多级并行实例及弹性等。</p><h5 id="Preformance-mertrics"><a href="#Preformance-mertrics" class="headerlink" title="Preformance mertrics"></a>Preformance mertrics</h5><p>在流处理环境下，主要的性能评价是应用程序处理输入负载并及时产生结果的能力。文章主要考虑单个算子实例的处理活动。提出以下指标：</p><ul><li>元组接收数量：使用$received_T(c)$表示，量化实例$c$在时间$T$内所接收到的元组数量。</li><li>元组处理数量：$processed_T(c)$，量化实例$c$在时间$T$内所处理的元组数量。</li><li>处理活性：定义$health$指标，用来表示实例在时间$T$内所处理的元组与收到的元组的比例$health_T(c)&#x3D;\frac{processed_T(c)}{received_T(c)}$。如果一个实例的$为$$health_T(c)&#x3D;100%$，则表示实例能够及时处理所有输入，相反，如果$health_T(c)&lt;100%$，则说明有些元组需要等待。如果这种情况持续，则这个实例则会变成应用的瓶颈。</li></ul><p>应用程序能否满足具体的时间约束，依赖于多种因素，包括执行节点的可用资源、网络链接属性、输入负载的波动、应用程序的计算。文章中的应用程序主要考虑处理大量小信息的流处理程序(比如，推特消息，传感器日志)。这种应用程序的性能受限于计算资源的可用性，而不是网络。由于为应用程序配置的资源是分配给应用程序的执行容器的资源，因此在执行节点级别，它们受节点的内存和CPU容量的限制。因此监控如下资源：</p><ul><li>$CPU occupation$. 使用$totalCPU_T(n)$表示在给定执行节点$n$上在时间$T$内的平均$CPU$使用率。</li><li>$Memory occupation$. 使用$totalMem_T(n)$表示在给定执行节点$n$上在时间$T$内的平均内存使用。</li></ul><p>使用这两个指标可以跟踪节点的情况，如果这两个指标都没有饱和，则说明可以分配新的执行容器，否则，需要考虑扩展决定。</p><h5 id="Preformances-of-Storm"><a href="#Preformances-of-Storm" class="headerlink" title="Preformances of Storm"></a>Preformances of Storm</h5><ul><li><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201111230437.png"></p><p>这张图在更改任务并行度，1-4-4表示1个worker(进程)，4个executors(线程)，4个task，说明每个线程执行一个Task，1-4-16表示每个线程执行4个任务，1-4-64表示每个线程执行16个任务。三条线有着类似的表现，这说明只增加Task并行度对任务的性能没有影响。在Storm拓扑的实际使用中，任务的数量实际上定义了这个任务所用的最大的执行器(线程)的数量。</p></li><li><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201111232803371.png" alt="image-20201111232803371"></p><p>线程级别的并行度变化能够改变性能，只要线程没有达到CPU核数限制。（实验环境是四核的机器）可以从b中看到，提升了线程数量后任务的出性能有提升，而当线程数量为8时，和4的表现基本一致。当CPU饱和时，health下降，当内存饱和时节点宕机。</p></li><li><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201111231828781.png" alt="image-20201111231828781"></p><p>过量提供进程资源反而导致了性能下降，而且更多的进程导致了性能不稳定，这是因为多个进程占用更多的内存，导致了到达了节点的极限。</p></li></ul><h4 id="A-Strategty-for-multi-level-elasticity"><a href="#A-Strategty-for-multi-level-elasticity" class="headerlink" title="A Strategty for multi-level elasticity"></a>A Strategty for multi-level elasticity</h4><p>文章提出了使用环境是非多租户环境，并且节点是应用专用(这个应该就是为了避免CPU等信息受干扰的问题)。算子实例之间平均分配数据流(不考虑数据倾斜)。</p><p>作者提出的方法依次执行以下步骤，（1）评估不同层次的执行容器的性能（2）为给定的负载提供适当的配置（3）构造具体应用的弹性控制器。</p><p>第一步解决了系统模型中的执行容器的层次结构，为了决定提供什么样的执行容器，需要知道不同级别的执行容器的并行度如何影响性能，作者获得这个信息的方式是通过平台提供，或进行基准测试。</p><p>在第二步中，作者自动测试应用程序，以建立给定级别的输入负载和合适应用程序配置之间的映射关系。这个想法是为了变化输入负载然后发现指定算子所需的并行度级别(相关的执行容器)。</p><p>测试程序如算法1所示，使用线性负载为应用程序提供输入。作者在考虑是否进行扩展时，是按照算子实例逐个考虑，通过比较实例的$Health$值是否低于$minHealth$来判断实例是否需要扩展。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201112110527246.png" alt="image-20201112110527246"></p><p>扩展算法如算法2所示。首先找到具有最小资源负载的节点(也就是当前空闲资源最多的节点)。当具有最多资源的节点的CPU与内存的占用超过设定的阈值，则会扩展起一个新的节点。如果节点还有资源，则会根据最优容器配置部署一个新的实例来提增加性能，这个最优信息是通过第一步中获得的。算法也会更新新的配置信息。在进行向下扩展时，会尽快释放新分配的节点，主要目的是使用更少的节点。为了防止震荡发生，不是每次观察时都会进行缩放，而是对多个观察值进行线性回归来计算变化趋势。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201112111630936.png" alt="image-20201112111630936"></p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><h4 id="Experimental-Evaluation"><a href="#Experimental-Evaluation" class="headerlink" title="Experimental Evaluation"></a>Experimental Evaluation</h4><h4 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h4><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><h2 id="2-Joker-Elastic-stream-processing-with-organic-adaptation-Journal-of-Parallel-and-Distributed-Computing（JPDC）-2020-x2F-03-x2F-01-B"><a href="#2-Joker-Elastic-stream-processing-with-organic-adaptation-Journal-of-Parallel-and-Distributed-Computing（JPDC）-2020-x2F-03-x2F-01-B" class="headerlink" title="[2] Joker: Elastic stream processing with organic adaptation. Journal of Parallel and Distributed Computing（JPDC）,2020&#x2F;03&#x2F;01.B"></a>[2] Joker: Elastic stream processing with organic adaptation. Journal of Parallel and Distributed Computing（JPDC）,2020&#x2F;03&#x2F;01.B</h2><h3 id="作者信息"><a href="#作者信息" class="headerlink" title="作者信息"></a>作者信息</h3><p>毕尔肯大学，是土耳其最好的大学之一，世界排名501-600th</p><h3 id="研究内容-1"><a href="#研究内容-1" class="headerlink" title="研究内容"></a>研究内容</h3><p>通过弹性方法来解决流处理应用中数据流图子图并行度及算子并行度的弹性问题。</p><h3 id="技术路线-1"><a href="#技术路线-1" class="headerlink" title="技术路线"></a>技术路线</h3><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><h3 id="论文内容-1"><a href="#论文内容-1" class="headerlink" title="论文内容"></a>论文内容</h3><h4 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h4><p>作者提出一种在线并行度优化算法，以联合方式调整流水线和数据并行度。作者提出的并行执行模型将数据流图划分为多个区域。一个区域包含一系列可以兼容的算子，这些算子采用相同的数据并行度，并且作为一个整体进行流水线并行化。作者提出的运行时Joker可以持续监控运行时性能，并运行优化算法来解决瓶颈，并通过调整数据并行度和流水线并行度来扩展应用程序。</p><h4 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h4><p>随着世界万物互联的变化，现在越来越多的人关注可以接近实时计算连续数据的系统。电信，金融，制造系统，网络监控系统，医疗健康系统都是使用这种连续流数据的一个领域，这些领域都要求快速分析高速率的数据流，并提取其中的有用信息。</p><p>流处理是一种处理大规模连续流数据的计算范式。高吞吐量的处理要求流处理程序必须利用多个处理器或多个机器。流处理应用通常使用数据流图表示，其中算子是数据的处理者，通过FIFO语义的流将算子链接起来。但利用并行度对数据流进行扩展还有一些问题。</p><p>缺少直接的方式找到流处理应用合适的并行数量，并且流处理任务是在负载变动的情况下长时间运行。有效的方式是连续应用并行优化，并调整逻辑应用与计算资源的映射，来实现弹性。</p><p>作者扩展了流水线分裂模型，将数据流图划分为区域。一个区域包含最长的兼容序列，这些算子总体上适合数据并行，并且可以进一步实现子流水线并行。其次，并行优化算法检测流应用中的瓶颈，并通过联合调整流水线并行度和数据并行度来解决瓶颈。</p><h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><h4 id="Solution-overview"><a href="#Solution-overview" class="headerlink" title="Solution overview"></a>Solution overview</h4><p>从源算子开始考虑形成区域，只要算子与当前区域兼容，就加入区域，当遇到不兼容的算子则终止当前区域的构建，而建立一个新的区域。作者自己定义了一个兼容性规则，主要思想是流应用程序应该减少数据交换。作者的方法是在早期形成较长的区域，并分配更多的处理资源，以便有更多的扩展机会。作者区域构造的规则如下：</p><ul><li>源算子有独立区域，称之为源区域$source\ regions$。源区域不在优化范围内</li><li>区域中的算子有至多一个上游或至多一个下游，如果需要构造分支，则会中断当前的区域并开始一个新的区域。这表示每个区域只会有一个入口和一个出口。如果一个算子有多个下游，那下游算子会开始自己的区域。</li><li>数据并行区域开始于无状态或已分区的状态算子，并且只会包含这两种算子。</li><li>数据并行区域的第一个分区状态算子的$Key$为该区域的$Key$属性，随后加入的分区状态算子必须与当前区域兼容。(其实是在物理执行图上进行区域划分)</li></ul><p>下图包含两个区域，其中黑点为区域分隔符，第一个区域是源算子区域，第二个是包含三个算子的区域，第二个区域中有两个流水线，第一个流水线包含$O_2$和$O_3$，第二个流水线只包含$O_4$。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201112220629106.png" alt="image-20201112220629106"></p><h5 id="Organic-adaptation"><a href="#Organic-adaptation" class="headerlink" title="Organic adaptation"></a>Organic adaptation</h5><p>在开始运行时，为每个区域创建一个流水线和一个副本，然后运行一个三阶段的步骤来改变应用程序并行度。</p><ul><li><p>分析阶段：探查器收集适应阶段要使用的指标。收集三个类型的指标。</p><ul><li>收集流水线副本线程的CPU使用率，使用副本线程利用CPU的时间处理CPU时钟数来计算CPU利用率，线程的CPU时间是通过JMX接口获取的。</li><li>定义算子成本$operator\ cost$，作为流水线实例线程在算子上花费的CPU时间的一部分。例如，一个流水线包含两个算子$O_1$和$O_2$，他们的成本估计是0.4和0.5，这表示算子$O_1$消耗了$40%$的流水线是来CPU时间。算子成本之和并不等于1，这是因为流水线包含了其他的CPU开销。将这一部分开销称之为流水线开销$pipeline\ overhead$，使用$1-\sum_{i&#x3D;1}^{n}{cost_i}$。算子成本的计算会遍历流水线中的所有算子，在遍历过程中，采样线程会不断检查算子的指标值，如果在最后一秒内，采样线程访问了N次数据，而其中有C次发生了改变，则说明此算子的开销为$C&#x2F;N$。</li><li>吞吐量以一个时间段内处理的元组数量来衡量，我们使用区域吞吐量作为评估指标。作者尝试通过调整数据流图中每个区域的流水线程度和数据并行度来优化区域吞吐量。</li></ul><p>分析阶段会对采集的指标进行平均。</p></li><li><p>自适应阶段：第二阶段开始识别瓶颈流水线，然后自适应算法将可能的并行度更改来解决存在的瓶颈。并尽可能最大程度的提高执行性能。</p><p>区域中的流水线可能会利用流水线并行数量被进一步分割，自适应阶段的目标时为了解决瓶颈，并增加吞吐量来改变流水线程度和数据并行数量。如果一个区域包含了瓶颈流水线，则认为该区域是瓶颈区域。算法采用贪婪策略，通过并行度更改来改变流应用程序吞吐量。在每个阶段，会同时改变所有需要改变的瓶颈。</p><p>在对瓶颈区域进行处理时，会开始寻找区域内的瓶颈流水线，会返回CPU使用率比配置阈值高的流水线。然后会尝试将流水线分割为两个更小的流水线，然后会对其中的副本数量进行更改。在对流水线进行分割时，会考虑使用算子成本，在分割时定义了一个新的指标，称之为分割效用$split\ utility$，这一指标用来预测当流水线在指定算子分割时，吞吐量的增加比率。例如，如果有一个3算子的流水线，其算子成本分别为0.2,0.1,0.4，流水线开销为0.3，如果我们在第二个算子处分割流水线，那第一个流水线运行第一个算子，第二个流水线运行第二和第三个算子，因为第二个流水线的总算子成本大于第一个流水线，我们推测第二条流水线将限制新的吞吐量值，那么在第二个算子处的分割效用$split\ utility&#x3D;1&#x2F;(0.3+max(0.2,0.1+0.4))$，同样的，如果在第三个算子处进行分割，分割效用为$split\ utility&#x3D;1&#x2F;(0.3+max(0.2+0.1,0.4))$在第三个算子处分割会导致更高的分割效用，所以我们选择使用第三个算子作为分割点。</p></li><li><p>评估和控制阶段：在最后的阶段，来评估新的并行化配置，如果新配置提高了性能，则算法将强制应用更改，否则将返回第二阶段来寻找其他可能的更改。</p></li></ul><h1 id="流处理算子放置、分割论文阅读"><a href="#流处理算子放置、分割论文阅读" class="headerlink" title="流处理算子放置、分割论文阅读"></a>流处理算子放置、分割论文阅读</h1><h2 id="可能需要阅读的一些论文"><a href="#可能需要阅读的一些论文" class="headerlink" title="可能需要阅读的一些论文"></a>可能需要阅读的一些论文</h2><p>Placement strategies for Internet-scale  data  stream  systems,</p><p>Optimal operator placement for distributed stream processing applications, 证明了最优算子放置问题是NP难问题。</p><p>“Optimal operator replication and placement for distributed stream processing systems,</p><p>很久之前的论文：</p><p>Amarasinghe, Exploiting coarse-grained task, data, and pipeline parallelism in stream programs</p><h2 id="1-Efficient-Operator-Placement-for-DistributedData-Stream-Processing-Applications-TPDS-2019"><a href="#1-Efficient-Operator-Placement-for-DistributedData-Stream-Processing-Applications-TPDS-2019" class="headerlink" title="[1]Efficient Operator Placement for DistributedData Stream Processing Applications.TPDS.2019"></a>[1]Efficient Operator Placement for DistributedData Stream Processing Applications.TPDS.2019</h2><h3 id="研究内容-2"><a href="#研究内容-2" class="headerlink" title="研究内容"></a>研究内容</h3><p>论文提出了几个启发式算法，能够解决在异构应用要求及计算资源情况下的算子放置问题。</p><h3 id="论文内容-2"><a href="#论文内容-2" class="headerlink" title="论文内容"></a>论文内容</h3><h4 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h4><p>过去也曾有一些启发式的方法，但是其中都是在集群环境下，没有考虑网络延迟。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116172209.png" alt="image-20201116172209198"></p><p>还有一些缺少灵活性，不能简单的优化新的放置目标。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116172322.png" alt="image-20201116172322456"></p><p>论文提出了几个启发式算法，能够解决在异构应用要求及计算资源情况下的算子放置问题。作者提出的启发式方法遵循三个规则：灵活性，计算资源高质量的放置，最优模型开发。</p><ul><li><p>对于灵活性，现有的一些方法主要都是为具体的QOS指标进行优化，而不能容易的定制或扩展使用新的指标。而作者想提出一种通用的框架能够容易调整不同指标的最优方法(响应时间、可用性、网络使用、组合参数)。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116182511.png" alt="image-20201116182511348"></p></li><li><p>对于服务质量，大多数现有的启发式方法通常确定尽力而为解决方案，这意味着它们不提供有关其计算近似最优解的能力的保证，定量或定性信息。比如很多的工作都是基于贪婪策略，通过本地的优化来改善，但这样可能会忽略一些全局优化配置。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116182839.png" alt="image-20201116182839537"></p></li><li><p>关于最优模型开发，作者在探索使用有效最优模型的可能性，为了确定高质量的放置方案。<img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116183126.png" alt="image-20201116183126412"></p></li></ul><h4 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h4><p>算子放置问题已经在不同的模型假设和优化目标下呗广泛讨论，【2】【17】对此作了综述。下面主要使用三个维度对本领域的相关工作进行回顾。</p><ol><li><p>放置目标：最优化的目标</p><p>现存的方案主要是优化一个多样性的目标，比如最小化应用响应时间，节点之间的流量，网络使用率，或者包含不同qos指标的通用开销函数。作者提出的优化目标也是多参数组合的多目标优化方法。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116185522.png" alt="image-20201116185521976"></p></li><li><p>定义应用程序放置的方法论</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116185831.png" alt="image-20201116185831900"></p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201116190020.png" alt="image-20201116190020805"></p></li><li><p>放置解决方案管理的分布式计算基础架构的特征</p></li></ol><p>方案也需要考虑在线重新部署的状态迁移的网络开销，以及再额外考虑副本数量。</p><h4 id="Systemc-model-and-problem-statement"><a href="#Systemc-model-and-problem-statement" class="headerlink" title="Systemc model and problem statement"></a>Systemc model and problem statement</h4><h5 id="Data-Stream-process-DSP数据流模型"><a href="#Data-Stream-process-DSP数据流模型" class="headerlink" title="Data Stream process DSP数据流模型"></a>Data Stream process DSP数据流模型</h5><p>DSP应用通过由数据流链接起来的算子网络组成。算子是执行特定操作的独立的处理单元(filtering aggregation merging等)。流是只无限的数据队列。由于难以抽象化抽象运算符的非功能属性，因此我们对其非功能属性进行了特征描述：</p><p>$C_i$表示执行所需要的资源数量，$R_i$表示算子处理每单元数据的平均延迟。在本文中，假设资源数量$C_i$足够保持算子$i$输入速率，</p><h5 id="Resource-Model资源模型"><a href="#Resource-Model资源模型" class="headerlink" title="Resource Model资源模型"></a>Resource Model资源模型</h5><p>计算资源和网络资源也可以使用有标记的、全连接的、有向图来表示。图中的每个节点可以使用以下变量作为特征，$C_u$表示可用资源数量，$S_u$表示响应处理器上处理速度的提高，$A_u$表示可用性概率，比如节点$u$是否启动和运行。</p><h5 id="算子放置问题"><a href="#算子放置问题" class="headerlink" title="算子放置问题"></a>算子放置问题</h5><p>放置问题主要是确定流处理执行图与资源图之间的映射关系。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201117133603.png" alt="image-20201117133603759"></p><h4 id="The-Placement-Problem"><a href="#The-Placement-Problem" class="headerlink" title="The Placement Problem"></a>The Placement Problem</h4><p>正式提出算子放置问题，并提出启发式方法的概述，同时定义资源惩罚函数。</p><h5 id="Optimal-Placement-Formulation"><a href="#Optimal-Placement-Formulation" class="headerlink" title="Optimal Placement Formulation"></a>Optimal Placement Formulation</h5><p>最优流处理放置问题(ODP)，可以被方便的定义为整数数问题，其中算子放置可以使用二元变量建模$x_{i,u}$，$i\in V_{dsp}$，$u \in V_{res}^{i}$。$x_{i,u}&#x3D;1$表示算子$i$在节点$u$上，否则$x_{i,u}&#x3D;0$。</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201117135021.png" alt="image-20201117135021000"></p><p>其中$F(x)$表示最合适的目标函数，$x$为放置向量。公式1表示节点资源限制，根据其可用资源对放置在节点$u$上的资源进行限制。公式（2）保证了每个算子$i$被放置在1个且仅1个节点$u$上。目标函数$F(x)$定义了放置策略目标。在本文中，作者考虑了应用响应时间$R(x)$，应用可用性$A(x)$，网络使用率$Z(x)$。这就产生了多目标优化问题，但是可以使用简单的加法加权技术转换为单目标优化问题。因此，我们定义了$F(x)$作为加权和的应用的标准化服务质量属性：<br>$$<br>F(x)&#x3D;w_r \frac{R(x)-R_{min}}{R_{max}-R_{min}}+w_a \frac{logA_{max}-logA(x)}{logA_{max}-logA_{min}}+w_z \frac{Z(x)-Z_{min}}{Z_{max}-Z_{min}}<br>$$</p><p>其中$w_r$，$w_a$，$w_z \geq 0$，$w_r+w_a+w_z&#x3D;1$，是服务质量$QoS$参数的权重。$R_{max}(R_{min}), A_{max}(A_{min}), Z_{max}(Z_{min})$分别表示期望响应时间、可用性、网络使用率的最大（最小）值。这里使用对数表达式对可用性进行描述，是为了获得线性表达式。</p><p>目标函数会在$[0,1]$范围内，其中值0对应最佳指标，1对应最差指标。</p><h5 id="Heuristics：Overview"><a href="#Heuristics：Overview" class="headerlink" title="Heuristics：Overview"></a>Heuristics：Overview</h5><p>作者主要提出了基于模型及不基于模型的启发式方法。都是为了最小化目标函数$F(x)$，为此，启发式方法使用了一个特殊的惩罚函数，其定义了资源之间的顺序关系。</p><p>基于模型的启发式方法尝试限制计算资源的备用资源集，层次化的最优资源方法表示按虚拟数据中心中的层次结构组织的计算体系结构。</p><p>无模型的启发式方法实现的著名的元启发式方法来解决最优放置问题。贪婪和首次适应算法是解决装箱问题最流行的方法。也广泛的用于解决算子放置问题【4】【20】。</p><h5 id="Resource-Penalty-Function"><a href="#Resource-Penalty-Function" class="headerlink" title="Resource Penalty Function"></a>Resource Penalty Function</h5><p>启发式方法包含了不同阶段的选择，节点是否合适会指引放置的决定。为此，我们需要一个指标来比较不同的方案。</p><p>引入链路开销函数$\delta (u,v) \in [0,1]$，作为链路$link(u,v) \in E_{res}$的惩罚。同样的，与定义$QoS$属性的加权组合类似，链路惩罚函数$\delta (u,v)$如下：<br>$$<br>\delta (u,v) &#x3D; w_r\delta _R(u,v)+w_a\delta_A(u,v)+w_z\delta_Z(u,v)<br>$$<br>其中$w_r$，$w_a$，$w_z \in [0,1]$，</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201117152931.png" alt="image-20201117152931510"></p><p>链路$link(u,v)$上的响应时间$\widetilde R(u,v)$依赖于网络延迟$d_{(u,v)}$以及参考算子的执行时间</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201117153457.png" alt="image-20201117153457707"></p><h4 id="Model-Based-Heuristics"><a href="#Model-Based-Heuristics" class="headerlink" title="Model-Based Heuristics"></a>Model-Based Heuristics</h4><h5 id="Hierarchical-ODP"><a href="#Hierarchical-ODP" class="headerlink" title="Hierarchical ODP"></a>Hierarchical ODP</h5><p>分层最优算子放置(hierarchical ODP)表示以有限数量的实体(虚拟数据中心VDC)组织的基础架构。VDC可以将许多节点及其相应的网络链接抽象成为能力更强的计算节点。</p><h5 id="Model-free-Heuristics"><a href="#Model-free-Heuristics" class="headerlink" title="Model-free Heuristics"></a>Model-free Heuristics</h5><h5 id="Greedy-First-fit"><a href="#Greedy-First-fit" class="headerlink" title="Greedy First-fit"></a>Greedy First-fit</h5><h5 id="local-search"><a href="#local-search" class="headerlink" title="local search"></a>local search</h5><h4 id="Experimental-Results"><a href="#Experimental-Results" class="headerlink" title="Experimental Results"></a>Experimental Results</h4><h5 id="Experimental-Setup"><a href="#Experimental-Setup" class="headerlink" title="Experimental Setup"></a>Experimental Setup</h5><h5 id="Application-Topologies-and-network-size"><a href="#Application-Topologies-and-network-size" class="headerlink" title="Application Topologies and network size"></a>Application Topologies and network size</h5><h5 id="Optimization-Objectives"><a href="#Optimization-Objectives" class="headerlink" title="Optimization Objectives"></a>Optimization Objectives</h5><h5 id="Heuristics-Overall-Performance"><a href="#Heuristics-Overall-Performance" class="headerlink" title="Heuristics Overall Performance"></a>Heuristics Overall Performance</h5><h2 id="2-B-Gedik-H-G-Ozsema-O-Ozturk-Pipelined-fission-for-stream-programs-with-dynamic-selectivity-and-partitioned-state-Journal-of-Parallel-and-Distributed-Computing-2016-x2F-10-x2F-01-x2F-B"><a href="#2-B-Gedik-H-G-Ozsema-O-Ozturk-Pipelined-fission-for-stream-programs-with-dynamic-selectivity-and-partitioned-state-Journal-of-Parallel-and-Distributed-Computing-2016-x2F-10-x2F-01-x2F-B" class="headerlink" title="[2] B. Gedik, H. G. Özsema, Ö Öztürk. Pipelined fission for stream programs with dynamic selectivity and partitioned state. Journal of Parallel and Distributed Computing,2016&#x2F;10&#x2F;01&#x2F;.B"></a>[2] B. Gedik, H. G. Özsema, Ö Öztürk. Pipelined fission for stream programs with dynamic selectivity and partitioned state. Journal of Parallel and Distributed Computing,2016&#x2F;10&#x2F;01&#x2F;.B</h2><h3 id="研究内容-3"><a href="#研究内容-3" class="headerlink" title="研究内容"></a>研究内容</h3><h3 id="技术路线-2"><a href="#技术路线-2" class="headerlink" title="技术路线"></a>技术路线</h3><h3 id="论文内容-3"><a href="#论文内容-3" class="headerlink" title="论文内容"></a>论文内容</h3><h4 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h4><p>本文解决了流水线分割的问题，利用管道并行性和数据并行来并行化程序。将流水线分割问题表达为优化问题，使用一种启发式算法。</p><h4 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h4><p>在本文中，主要研究流水线分割问题，自动寻找组合流水线的最优配置和数据并行度来优化应用吞吐量。流水线并行度是流处理应用自然而然的问题【39】。本文的目标是确定如何在流应用程序中在数据和流水线并行方面分配处理资源，以便最佳地优化吞吐量。由于数据并行被应用与拓扑中算子的自己，因此性能仍然受到无法进行数据并行的运算符的限制，正是这一点激发了流水线分割的重要性，即组合流水线与数据并行的需求。</p><p>本文主要专注于链式拓扑的流应用程序，将其中多个阶段组织为一系列，每个阶段消费前个阶段的数据，然后将数据输出到下一阶段。每一阶段可以是单个算子或组合的算子。</p><p>本文工作适用于具有以下特性的流处理系统：</p><ul><li>动态选择性：消费的输入数据数目或算子产生的输出数据项目未固定，并可能会更根据输入数据的内容而变化，则算子具有动态选择性。</li><li>背压</li><li>流分区</li></ul><p>在解决流水线分割方面面临的挑战，首先通过DSPS所用的执行模型来正式定义有效的并行化配置，这涉及对线程和应用并行部分进行映射的定义。其次，需要对流水线分割的配置与吞吐量进行建模，以便比较不同配置方案之间的区别。最后，即便是小规模的算子、处理器核心、线程，组合起来也有多种方案，重要的是要快速找到可以提供接近最佳吞吐量的配置。</p><p>这一问题有两个强烈的动机，首先是对应用程序有快速的编辑-调试周期，第二是动态进行流水线分割的开销较低，即能够在运行时更新并行化配置。在本文中，重点是在合理的时间范围、高吞吐量的解决流水线分割的问题。</p><p>解决方案包含三个部分，首先，我们基于应用融合和算子分割定义有效的流水线分割配置，融合是一种用于最小化调度开销和以流水线方式执行流应用的一项技术【25，13】。使用分割，复制形成并行区域的流水线，来实现数据并行性。其次，我们对相关概念进行建模，比如算子兼容性(用于定义并行区域)、背压(定义吞吐量的关键因素)、系统开销（线程切换和副本开销），并使用推导出来的公式计算吞吐量。最后，我们提出一个启发式算法可以快速定位流水线分割配置，并提供近似最优的性能。算法依赖于三个主要想法：1.基于最长兼容队列规则形成区域，其中兼容式形成的区域具有使之适合整体数据并行的特性。2.使用贪婪瓶颈解决方法来将区域分割为流水线，该过程使用可变的基于利用率的上限作为停止条件，来执行迭代流水线操作。3.使用贪婪的方式通过增加区域副本数量解决剩下的瓶颈。</p><h4 id="BackGround"><a href="#BackGround" class="headerlink" title="BackGround"></a>BackGround</h4><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201117220238.png" alt="image-20201117220238360"></p><h4 id="Problem-Formulation"><a href="#Problem-Formulation" class="headerlink" title="Problem Formulation"></a>Problem Formulation</h4><p>扩展函数</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201117222551.png" alt="image-20201117222551835"></p><p>区域和流水线</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20201118095712.png" alt="image-20201118095712355"></p><h1 id="算子性能模型相关论文"><a href="#算子性能模型相关论文" class="headerlink" title="算子性能模型相关论文"></a>算子性能模型相关论文</h1><h2 id="1-An-Experiment-Driven-Performance-Model-of-StreamProcessing-Operators-in-Fog-Computing-Environments-ACM-SAC-2020"><a href="#1-An-Experiment-Driven-Performance-Model-of-StreamProcessing-Operators-in-Fog-Computing-Environments-ACM-SAC-2020" class="headerlink" title="[1]An Experiment-Driven Performance Model of StreamProcessing Operators in Fog Computing Environments.ACM SAC.2020"></a>[1]An Experiment-Driven Performance Model of StreamProcessing Operators in Fog Computing Environments.ACM SAC.2020</h2><p>法国数字科学与技术研究创新实验室</p><p><strong>论文仅考虑无状态算子</strong></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>flink1.7.0</li><li>使用docker，每个docker中放置一个TM，每个TM中有一个slot。(没有进行slotgroup设置)</li><li>使用nc命令来进行网络延迟的仿真，仿真的数据来自Global ping statistics. <a href="https://wondernetwork.com/pings">https://wondernetwork.com/pings</a></li><li>使用数据生成器生成数据</li><li>使用斐波那契函数作为处理算子</li><li>每次实验执行4次，然后舍弃第一次的数据，当做系统热身</li><li>输入系统100_000个记录</li><li>假设source、sink处理时间忽略不计</li></ul><h3 id="性能参数"><a href="#性能参数" class="headerlink" title="性能参数"></a>性能参数</h3><p>文中主要关注吞吐量</p><ul><li>定义处理时间PT，为每个算子定义处理时间PT，从上一个算子输出到当前算子输出的时间间隔。包含了网络延迟。</li><li>任务运行时间JRT，从第一个记录进入到flink，到最后一个记录输出。</li></ul><h3 id="性能模型"><a href="#性能模型" class="headerlink" title="性能模型"></a>性能模型</h3><h4 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h4><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118142727.png" alt="image-20210118142727549"></p><p>此时所有算子都运行在一个TM中，然后衡量处理全部输入所用的时间$\alpha$，这也表示了一个节点的全部处理能力。</p><p>如果增加算子副本，理论上会按比例减少时间</p><ul><li>初始简单性能模型如下：</li></ul><p>$$<br>\Pi_n &#x3D; \frac{\alpha}{n}<br>$$</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118143244.png" alt="image-20210118143244205"></p><p>​由于实际情况并不是线性，所以提出并行开销参数$\beta$</p><ul><li><p>第二个版本的性能模型如下：<br>$$<br>\Pi_n &#x3D; \frac{\alpha}{n^{\beta}}<br>$$<br><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118144823.png" alt="image-20210118144823615"></p><p>当$\Pi$是所选算子的处理全部数据所需时间时，$\alpha$表示单一实例的处理能力。（因为无论是$\Pi$还是$\alpha$表示的都是处理一定量数据所需的时间）。对$\alpha$以及$\beta$进行拟合，可以得到算子的性能预测模型。实验表明$\beta \in[0.8,0.9]$</p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118150032.png" alt="image-20210118150032046" style="zoom:50%;" /></li></ul><h4 id="考虑异构网络延迟"><a href="#考虑异构网络延迟" class="headerlink" title="考虑异构网络延迟"></a>考虑异构网络延迟</h4><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118150631.png" alt="image-20210118150631438"></p><p>提出了一个线性模型来表示网络延迟对两个TM之间的处理时间的影响<br>$$<br>\Pi_2&#x3D;a \times ND+b<br>$$<br>$ND$表示两个TM之间的网络延迟，$\Pi_2$表示有两个副本的算子的处理时间。$a$和$b$是两个常数。</p><p>下图表示了两个TM之间不同延迟的影响</p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118151615.png" alt="image-20210118151615736" style="zoom:50%;" /><p>下图表示了不同延迟以及不同数量的TM对处理时间的影响</p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118151640.png" alt="image-20210118151640450" style="zoom:50%;" /><p>当每个节点之间的网络延迟都不同时，我们观察到主导因素是source与任意TM之间最大的延迟。这是因为整体的处理时间是由最慢的算子副本所决定的。</p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118152041.png" alt="image-20210118152041838" style="zoom:50%;" /><p>因此提出的更新版本的性能模型：<br>$$<br>\Pi_n &#x3D; \frac{\alpha}{n^{\beta}}+\gamma \times ND_{max}<br>$$<br><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118152418.png" alt="image-20210118152418370"></p><p>其中$\gamma$通过实验表明$\gamma \in [50,150]$</p><h4 id="多源情况"><a href="#多源情况" class="headerlink" title="多源情况"></a>多源情况</h4><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118153015.png" alt="image-20210118153015222"></p><p>使用不同网络延迟增加源算子数量没有更改通用模式，因此可以使用上述的模型，仅需要更新$ND_{max}$参数</p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118153147.png" alt="image-20210118153147809" style="zoom:50%;" /><h3 id="模型参数校准"><a href="#模型参数校准" class="headerlink" title="模型参数校准"></a>模型参数校准</h3><p>以上模型需要推测$\alpha , \beta , \gamma$三个参数。</p><ul><li>如果进行了一次测量，在这种情况下，我们只能将单个模型参数拟合到数据中。因此我们提供了默认值$\beta&#x3D;1$以及$\gamma&#x3D;0$，只拟合$\alpha$参数。这样使得模型简化为简单模型$\Pi_n &#x3D; \frac{\alpha}{n}$，该模型没有处理复杂的长江，但是可以提供良好的性能预测。</li><li>如果可以进行两次测量，在这种情况下，我们可以拟合两个参数$\alpha$和$\beta$或$\alpha$和$\gamma$。剩下的那个参数使用默认值。在实验中发现，拟合$\alpha$以及$\gamma$会获得更好的结果，因此模型更改为$\Pi_n&#x3D;\frac{\alpha}{n}+\gamma \times ND_{max}$</li><li>如果可以进行三次或更多次测量，就可以使用完整模型。</li></ul><h3 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h3><h4 id="1-流处理性能分析"><a href="#1-流处理性能分析" class="headerlink" title="1. 流处理性能分析"></a>1. 流处理性能分析</h4><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118134629.png" alt="image-20210118134629173"></p><h4 id="2-各种方法的调度"><a href="#2-各种方法的调度" class="headerlink" title="2.各种方法的调度"></a>2.各种方法的调度</h4><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/20210118134954.png" alt="image-20210118134954888"></p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读笔记 </category>
          
          <category> 流处理 </category>
          
          <category> 弹性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记-基本</title>
      <link href="/2020/42d8e328/"/>
      <url>/2020/42d8e328/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108236.png"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>镜像(image)：docker镜像就是一个模板，可以通过这个镜像来创建容器服务。</p><p>容器(container)：把容器理解为简易的linux，独立的运行一个或一组应用，通过镜像来创建</p><p>仓库：存放镜像的位置，分为公有和私有</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>Linux环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1062.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@centos7vm ~]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://docs.docker.com/engine/install/centos/">官网帮助文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 卸载旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="comment"># 2. 需要的安装包</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"><span class="comment"># 3. 设置镜像仓库</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo <span class="comment"># 默认是国外的</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  </span><br><span class="line"><span class="comment"># 这里用阿里云的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 安装docker相关的包  docker-ce 社区  ee企业版</span></span><br><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 5. 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 6. 使用docker version测试是否成功    </span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.13</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        4484c46d9d</span><br><span class="line"> Built:             Wed Sep 16 17:03:45 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.13</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       4484c46d9d</span><br><span class="line">  Built:            Wed Sep 16 17:02:21 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.3.7</span><br><span class="line">  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc10</span><br><span class="line">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683    </span><br><span class="line"><span class="comment"># 7. 使用Hello world测试是否安装成功</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108047.png" alt="image-20201107230858385"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8. 查看下载的helloworld镜像</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        10 months ago       13.3kB</span><br></pre></td></tr></table></figure><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://l5e8i15v.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p><strong>Docker是怎么工作的？</strong></p><p>Docker是一个Client-server结构的系统，Docker守护进程运行在主机上，通过Socket从客户端访问。</p><p>DockerServer接收到Docker-client的指令，就会执行这个命令。</p><p><strong>Docker为什么比VM快？</strong></p><ol><li>Docker比虚拟机更少的抽象层</li><li>Docker利用的是宿主机的内核，vm需要的是Guest os</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108495.png" alt="image-20201107232451728"></p><p>所以，新建一个容器的时候，Docker不需要像虚拟机一样重新加载一个操作系统，避免引导。虚拟机是加载Guest os，分钟级别，而Docker是利用宿主机的操作系统 ，省略这个过程，秒级。</p><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><hr><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version<span class="comment"># 版本信息</span></span><br><span class="line">docker info<span class="comment"># 显示Docker系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span>    <span class="comment"># 帮助命令</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/reference/">官方帮助文档</a></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><hr><p><strong>docker images 查看所有本地的主机上的镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm docker]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        10 months ago       13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY镜像的仓库源</span><br><span class="line">TAG镜像的标签</span><br><span class="line">IMAGE ID镜像的ID</span><br><span class="line">CREATED镜像的创建时间</span><br><span class="line">SIZE镜像的大小</span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">-a, --all<span class="comment"># 列出所有镜像</span></span><br><span class="line">-q, --quiet<span class="comment"># 只显示镜像id</span></span><br></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm docker]<span class="comment"># docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10134               [OK]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项，通过收藏来过滤</span></span><br><span class="line">--filter=stars=3000 <span class="comment">#搜索3000以上的</span></span><br></pre></td></tr></table></figure><p><strong>docker pull 下载镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm docker]<span class="comment"># docker pull mysql</span></span><br><span class="line">Using default tag: latest <span class="comment"># 不写tag 默认是latest</span></span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">bb79b6b2107f: Pull complete <span class="comment"># 分层下载，联合文件系统</span></span><br><span class="line">49e22f6fb9f7: Pull complete</span><br><span class="line">842b1255668c: Pull complete</span><br><span class="line">9f48d1f43000: Pull complete</span><br><span class="line">c693f0615bce: Pull complete</span><br><span class="line">8a621b9dbed2: Pull complete</span><br><span class="line">0807d32aef13: Pull complete</span><br><span class="line">a56aca0feb17: Pull complete</span><br><span class="line">de9d45fd0f07: Pull complete</span><br><span class="line">1d68a49161cc: Pull complete</span><br><span class="line">d16d318b774e: Pull complete</span><br><span class="line">49e112c55976: Pull complete</span><br><span class="line">Digest: sha256:8c17271df53ee3b843d6e16d46cff13f22c9c04d6982eb15a9a47bd5c9ac7e2d <span class="comment"># 签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest <span class="comment">#真实地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest  <span class="comment"># 这两个命令等价</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本下载</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi 删除镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm docker]<span class="comment"># docker rmi -f db2b37ec6181 # 删除指定镜像</span></span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker rmi -f 镜像id 镜像id 镜像id  # 删除多个镜像</span></span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker rmi -f $(docker images -aq)  # 删除全部镜像</span></span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><hr><p><em>说明：我们有了镜像才能创建容器，下载一个centos测试学习</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">--name=<span class="string">&quot;Name&quot;</span>  容器名字，用来区分容器</span><br><span class="line">-d后台方式运行</span><br><span class="line">-it使用交互方式运行，进入容器查看内容</span><br><span class="line">-p指定容器端口  -p 8080:8080</span><br><span class="line">-p ip:主机端口:端口</span><br><span class="line">-p 主机端口:容器  (常用)</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P随机指定端口</span><br><span class="line"><span class="comment"># 测试 启动并进入容器</span></span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line">[root@02861391cd3a /]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容器退回主机</span></span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 停止容器并退出</span></span><br><span class="line">ctrl + p + q  <span class="comment">#退出容器不停止</span></span><br></pre></td></tr></table></figure><p><strong>列出所有运行容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker ps 命令</span><br><span class="line"><span class="comment"># 列出当前正在运行的容器</span></span><br><span class="line">-a  <span class="comment"># 列出当前正在运行的+历史运行过的容器</span></span><br><span class="line">-n=? <span class="comment">#显示最近创建的容器</span></span><br><span class="line">-q <span class="comment"># 只显示容器的不编号</span></span><br><span class="line"></span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker ps  </span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                      PORTS               NAMES</span><br><span class="line">02861391cd3a        centos              <span class="string">&quot;/bin/bash&quot;</span>         About a minute ago   Exited (0) 41 seconds ago                       brave_wright</span><br><span class="line">67d2c31f379c        bf756fb1ae65        <span class="string">&quot;/hello&quot;</span>            48 minutes ago       Exited (0) 48 minutes ago                       exciting_mirzakhani</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span> <span class="comment"># 删除指定容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq) <span class="comment">#删除所有容器</span></span><br><span class="line">docker ps -aq | xargs docker <span class="built_in">rm</span> <span class="comment">#删除所有容器</span></span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器<span class="built_in">id</span><span class="comment">#启动容器</span></span><br><span class="line">docker restart  容器<span class="built_in">id</span><span class="comment"># 重启容器</span></span><br><span class="line">docker stop  容器<span class="built_in">id</span> <span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span>  容器<span class="built_in">id</span><span class="comment"># 强制停止容器</span></span><br></pre></td></tr></table></figure><p><strong>后台启动容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题 docker ps 发现容器停止了</span></span><br><span class="line"><span class="comment"># 常见的问题，docker容器后台运行，必须要有一个前台进程，docker发现没有对外提供服务的应用，就会停止</span></span><br><span class="line"><span class="comment"># nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br><span class="line"><span class="comment"># 显示日志</span></span><br><span class="line">docker logs -tf --<span class="built_in">tail</span> 10 19d1483e6662</span><br><span class="line">-tf   <span class="comment"># 显示日志</span></span><br><span class="line">--<span class="built_in">tail</span> number  <span class="comment"># 要显示日志的跳数</span></span><br><span class="line"><span class="comment"># 自己写一段脚本</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看容器中进程信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令 docker top 容器id</span></span><br><span class="line">[root@centos7vm docker]<span class="comment">#  docker top 19d1483e6662</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                21885               21867               0                   17:02               ?                   00:00:00            /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> 123;<span class="built_in">sleep</span> 1;<span class="keyword">done</span></span><br><span class="line">root                22090               21885               0                   17:04               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=<span class="built_in">sleep</span> /usr/bin/sleep 1</span><br></pre></td></tr></table></figure><p><strong>查看镜像元数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm docker]<span class="comment"># docker inspect --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"></span><br><span class="line">Return low-level information on Docker objects</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --format string   Format the output using the given Go template</span><br><span class="line">  -s, --size            Display total file sizes <span class="keyword">if</span> the <span class="built_in">type</span> is container</span><br><span class="line">      --<span class="built_in">type</span> string     Return JSON <span class="keyword">for</span> specified <span class="built_in">type</span></span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">19d1483e6662        centos              <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   4 minutes ago       Up 4 minutes                            confident_murdock</span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker inspect 19d1483e6662</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;19d1483e66621a38c4e175b4c4615adb3427eaaa07a632f3fa5835ff264a639a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-11-08T09:02:27.513000805Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;while true;do echo 123;sleep 1;done&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 21885,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2020-11-08T09:02:28.217868188Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:0d120b6ccaa8c5e149176798b3501d4dd1885f961922497cd0abef155c869566&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ResolvConfPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/19d1483e66621a38c4e175b4c4615adb3427eaaa07a632f3fa5835ff264a639a/resolv.conf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostnamePath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/19d1483e66621a38c4e175b4c4615adb3427eaaa07a632f3fa5835ff264a639a/hostname&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostsPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/19d1483e66621a38c4e175b4c4615adb3427eaaa07a632f3fa5835ff264a639a/hosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LogPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/19d1483e66621a38c4e175b4c4615adb3427eaaa07a632f3fa5835ff264a639a/19d1483e66621a38c4e175b4c4615adb3427eaaa07a632f3fa5835ff264a639a-json.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;/confident_murdock&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RestartCount&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Platform&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;MountLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ProcessLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;AppArmorProfile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ExecIDs&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;HostConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Binds&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;ContainerIDFile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LogConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Config&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;NetworkMode&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PortBindings&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;no&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MaximumRetryCount&quot;</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;AutoRemove&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;VolumeDriver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VolumesFrom&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapDrop&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Capabilities&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Dns&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsOptions&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsSearch&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;ExtraHosts&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;GroupAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IpcMode&quot;</span>: <span class="string">&quot;private&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Cgroup&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomScoreAdj&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;PidMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Privileged&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PublishAllPorts&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ReadonlyRootfs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;SecurityOpt&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;UTSMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UsernsMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ShmSize&quot;</span>: 67108864,</span><br><span class="line">            <span class="string">&quot;Runtime&quot;</span>: <span class="string">&quot;runc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ConsoleSize&quot;</span>: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Isolation&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpuShares&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Memory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;NanoCpus&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CgroupParent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BlkioWeight&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;BlkioWeightDevice&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuPeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuQuota&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimePeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimeRuntime&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpusetCpus&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpusetMems&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Devices&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DeviceCgroupRules&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;DeviceRequests&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;KernelMemory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;KernelMemoryTCP&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemoryReservation&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwap&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwappiness&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomKillDisable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PidsLimit&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Ulimits&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuCount&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuPercent&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumIOps&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumBandwidth&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MaskedPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/asound&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/acpi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/kcore&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/keys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/latency_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_list&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sched_debug&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/scsi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/sys/firmware&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;ReadonlyPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/bus&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/fs&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/irq&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sysrq-trigger&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/86b18b8dd45c45fd5ed8e6d2ed808c689e9061e61c6526c055637d349d4f98dc-init/diff:/var/lib/docker/overlay2/b61e299d2bb31a1fb57bbdf890f6d559b1a92394e98c4b2463c1e0c34ed37341/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/86b18b8dd45c45fd5ed8e6d2ed808c689e9061e61c6526c055637d349d4f98dc/merged&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/86b18b8dd45c45fd5ed8e6d2ed808c689e9061e61c6526c055637d349d4f98dc/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/86b18b8dd45c45fd5ed8e6d2ed808c689e9061e61c6526c055637d349d4f98dc/work&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;19d1483e6662&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;while true;do echo 123;sleep 1;done&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;centos&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;org.label-schema.build-date&quot;</span>: <span class="string">&quot;20200809&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.license&quot;</span>: <span class="string">&quot;GPLv2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.name&quot;</span>: <span class="string">&quot;CentOS Base Image&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.schema-version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.vendor&quot;</span>: <span class="string">&quot;CentOS&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;NetworkSettings&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Bridge&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SandboxID&quot;</span>: <span class="string">&quot;06d26833c3845620a37f361cda733999dba841c8f80bd14691d7a6275e2f0430&quot;</span>,</span><br><span class="line">            <span class="string">&quot;HairpinMode&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Ports&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;SandboxKey&quot;</span>: <span class="string">&quot;/var/run/docker/netns/06d26833c384&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;SecondaryIPv6Addresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;990d153ba0bf1db91808560d3f87069dda4a2d98f8d614bf50dcde4e9e95d9a2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">            <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;8c37dffaecb4dec076d5745cb032f23a991ec67976c1e2ae78e837d60075d48c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;990d153ba0bf1db91808560d3f87069dda4a2d98f8d614bf50dcde4e9e95d9a2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前运行的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器通常都是后台运行，需要进入容器修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bashshell</span><br><span class="line">[root@centos7vm docker]<span class="comment"># docker exec -it 19d1483e6662 /bin/bash</span></span><br><span class="line">[root@19d1483e6662 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@19d1483e6662 /]<span class="comment"># ps -ef</span></span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 09:02 ?        00:00:00 /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> 123;<span class="built_in">sleep</span> 1;<span class="keyword">done</span></span><br><span class="line">root        448      0  0 09:09 pts/0    00:00:00 /bin/bash</span><br><span class="line">root        465      1  0 09:09 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=<span class="built_in">sleep</span> /usr/bin/sleep 1</span><br><span class="line">root        466    448  3 09:09 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker attach -it 19d1483e6662</span><br><span class="line">正在执行的代码....</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区别</span></span><br><span class="line"><span class="comment"># docker exec  # 进入容器后开启一个新的终端，可以在里面操作</span></span><br><span class="line"><span class="comment"># docker attach# 进入容器正在执行的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器ID:容器内路径   目的主机路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">df42673d50f2        centos              <span class="string">&quot;/bin/bash&quot;</span>         28 seconds ago      Up 25 seconds                           magical_jones</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker attach df42673d50f2</span></span><br><span class="line"><span class="comment"># 新建一个文件测试，将文件copy出来</span></span><br><span class="line">[root@df42673d50f2 /]<span class="comment"># touch test.java</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker cp df42673d50f2:/test.java ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy是一个手动过程，未来使用卷的技术来对路径做映射</span></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><hr><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108501.png" alt="image-20201108173050520"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 搜索镜像   建议在Docker Hub上搜索  能够看到详细信息</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker search -f stars=1000 nginx</span></span><br><span class="line">NAME                  DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                 Official build of Nginx.                        13977               [OK]                </span><br><span class="line">jwilder/nginx-proxy   Automated Nginx reverse proxy <span class="keyword">for</span> docker con…   1906                                    [OK]</span><br><span class="line"><span class="comment"># 2. 下载镜像</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">bb79b6b2107f: Pull complete </span><br><span class="line">5a9f1c0027a7: Pull complete </span><br><span class="line">b5c20b2b484f: Pull complete </span><br><span class="line">166a2418f7e8: Pull complete </span><br><span class="line">1966ea362d23: Pull complete </span><br><span class="line">Digest: sha256:aeade65e99e5d5e7ce162833636f692354c227ff438556e5f3ed0335b7cc2f1b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"><span class="comment"># 3. 启动容器</span></span><br><span class="line">-d<span class="comment"># 后台运行</span></span><br><span class="line">--name <span class="comment"># 为容器起名字</span></span><br><span class="line">-p <span class="comment"># 暴露端口   宿主机端口：容器内部端口</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">cb3b7175c1b43ee40bd2f398ed24854eb1a487ee305cec13735603ed5ab8c8e6</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">cb3b7175c1b4        nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   6 seconds ago       Up 4 seconds        0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line"><span class="comment"># 4. 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> nginx01 /bin/bash</span><br></pre></td></tr></table></figure><h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方的使用</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们之前的启动都是后台，停止了容器后，容器还是可以查到  docker run -it --rm， 一般用来测试，用完即删</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载再启动</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -p 3355:8080 --name tomcat01 tomcat</span></span><br><span class="line"><span class="comment"># 测试访问没有问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec -it tomcat01 /bin/bash</span></span><br><span class="line"><span class="comment"># linux命令少、没有webapps   默认是最小的镜像，不必要的都剔除</span></span><br><span class="line"><span class="comment"># 保证最小可运行的环境</span></span><br></pre></td></tr></table></figure><h3 id="部署es-kibana"><a href="#部署es-kibana" class="headerlink" title="部署es+kibana"></a>部署es+kibana</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es占内存多</span></span><br><span class="line"><span class="comment"># es暴露端口多</span></span><br><span class="line"><span class="comment"># es的数据一般需要放置到安全目录 挂载</span></span><br><span class="line"><span class="comment"># --net somenetwork 网络配置</span></span><br><span class="line">$ docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动elasticsearch</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker stats查看CPU状态</span></span><br><span class="line">docker stats</span><br><span class="line"><span class="comment"># 增加内存的限制  -e参数进行环境修改</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch</span><br><span class="line"><span class="comment"># 查看状态</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108534.png" alt="image-20201108180804691"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm ~]<span class="comment"># curl localhost:9211</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;UrvHV2Q&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;NHWT8qNERMe9UhNZSUSGpw&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;5.6.12&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;cfe3d9f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2018-09-10T20:12:43.732Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;6.6.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li>portainer</li><li>Rancher(CI&#x2F;CD再用)</li></ul><p>什么是portainer？</p><p>Docker图形化界面管理工具，提供一个后台面板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer-ce</span></span><br></pre></td></tr></table></figure><h2 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令和git类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID  目标镜像名：[TAG]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个默认的tomcat</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认的tomcat没有webapps应用，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自己将webapps.dist内容拷贝进去</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过commit提交了一个新的镜像</span></span><br><span class="line">docker commit -a=&quot;halfcoke&quot; -m=&quot;add webapps app&quot; 容器ID tomcat01:1.1</span><br><span class="line"></span><br><span class="line">[root@centos7vm ~]# docker commit -a=&quot;halfcoke&quot; -m=&quot;add webapps app&quot; d59f955ed1ac tomcat_test:1.0</span><br><span class="line">sha256:8119e221b3f258d762ca461759af00417f2ea2e3d6eccf0b7dee850c5cb7ee53</span><br><span class="line">[root@centos7vm ~]# docker images</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">tomcat_test              1.0                 8119e221b3f2        7 seconds ago       653MB</span><br><span class="line">tomcat                   9.0                 dab3cf97dd54        39 hours ago        648MB</span><br><span class="line">tomcat                   latest              dab3cf97dd54        39 hours ago        648MB</span><br></pre></td></tr></table></figure><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h3><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108967.png" alt="image-20201108195121399"></p><p>容器内的目录映射到外部目录，为了容器的持久化和同步操作，容器间数据能够共享</p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><p><strong>方式一</strong>：使用命令挂载 -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录：容器内目录 -p 主机端口：容器端口</span><br><span class="line"> </span><br><span class="line">docker run -it -v /root/test:/home centos /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过inspect 查看容器信息</span></span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108732.png" alt="image-20201108195708778"></p><p>其中source是主机内的地址，Destination是容器内的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108813.png" alt="image-20201108200240055"></p><p>之后修改直接在本地修改</p><p><strong>练习</strong> <strong>安装mysql</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方测试</span></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line"><span class="comment"># 运行容器，需要数据挂载</span></span><br><span class="line">-d 后台运行</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 名字</span><br><span class="line">-v 卷挂载</span><br><span class="line">-p 端口映射</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -p 3310:3306 -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123 --name mysql01 mysql:5.7</span></span><br><span class="line"><span class="comment"># 启动成功后，链接测试</span></span><br><span class="line"><span class="comment"># 容器删除后，数据也不会丢失</span></span><br></pre></td></tr></table></figure><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">-P 随机指定端口</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前挂载的卷</span></span><br><span class="line">docker volume --<span class="built_in">help</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker volume --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker volume COMMAND</span><br><span class="line"></span><br><span class="line">Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  <span class="built_in">ls</span>          List volumes</span><br><span class="line">  prune       Remove all unused <span class="built_in">local</span> volumes</span><br><span class="line">  <span class="built_in">rm</span>          Remove one or more volumes</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker volume COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br><span class="line"><span class="comment"># 查看所有的卷的情况</span></span><br><span class="line"><span class="comment"># 这里发现volume name都是加密后的，没有指定容器外的路径，就是匿名挂载</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               4ec45c6cdf92869673d25a42192fb0fe4d272e90343a4ca55650364e4ffda7fc</span><br><span class="line"><span class="built_in">local</span>               5b4a7949963490b29a916aec8dbac7e552bbf915fb3863da2902475d2c9483c2</span><br><span class="line"><span class="built_in">local</span>               5dfa3b399cff8cc630c709e738ace5feacd91085f0e2aad61f7cc7353abf3fa1</span><br><span class="line"><span class="built_in">local</span>               d5cdb69a6cc404ebb990956c8c8132e589010d1176e3a0a4bf3624992f74c236</span><br><span class="line"><span class="built_in">local</span>               f258608b52225ead6f764860b476f188cd1794e1533e667953fb6b98855b09ee</span><br><span class="line"><span class="built_in">local</span>               fece1a11094a2f65d572ea20c0e2561efc4a738a9a84667f5f6d5d9d0bf9a6a8</span><br><span class="line"><span class="comment"># 可以直接以  名字:容器内路径 的方式指定数据卷挂载，这就是具名挂载</span></span><br><span class="line"><span class="comment"># docker -v 卷名：容器内路径</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -P --name nginx02 -v juming:/etc/nginx nginx</span></span><br><span class="line">7dba2abd87dfd70ea89c957b03dd797a3b9a8ae9597ed478dc22155c4676eb05</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               4ec45c6cdf92869673d25a42192fb0fe4d272e90343a4ca55650364e4ffda7fc</span><br><span class="line"><span class="built_in">local</span>               5b4a7949963490b29a916aec8dbac7e552bbf915fb3863da2902475d2c9483c2</span><br><span class="line"><span class="built_in">local</span>               5dfa3b399cff8cc630c709e738ace5feacd91085f0e2aad61f7cc7353abf3fa1</span><br><span class="line"><span class="built_in">local</span>               d5cdb69a6cc404ebb990956c8c8132e589010d1176e3a0a4bf3624992f74c236</span><br><span class="line"><span class="built_in">local</span>               f258608b52225ead6f764860b476f188cd1794e1533e667953fb6b98855b09ee</span><br><span class="line"><span class="built_in">local</span>               fece1a11094a2f65d572ea20c0e2561efc4a738a9a84667f5f6d5d9d0bf9a6a8</span><br><span class="line"><span class="built_in">local</span>               juming</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过docker volume inspect 来查看卷名的具体位置</span></span><br><span class="line"><span class="comment"># 在没有指定目录的情况下，都是在/var/lib/docker/volumes/xxxx/_data</span></span><br><span class="line"><span class="comment"># 我们通过具名挂载可以方便的找一个卷，大多数情况都是具名挂载</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker volume inspect juming</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2020-11-08T20:25:02+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/juming/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;juming&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">-v 容器内路径  <span class="comment"># 匿名挂载</span></span><br><span class="line">-v 卷名：容器内路径 <span class="comment"># 具名挂载</span></span><br><span class="line">-v /宿主机路径：容器路径  <span class="comment"># 指定路径挂载</span></span><br></pre></td></tr></table></figure><p>拓展</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径  ro rw 改变读写权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一旦设置了容器权限，容器对我们挂载出来的内容就有限定了</span></span><br><span class="line">[root@centos7vm ~]# docker run -d -P --name nginx02 -v juming:/etc/nginx:ro nginx</span><br><span class="line">[root@centos7vm ~]# docker run -d -P --name nginx02 -v juming:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro只能从外部改变，只能从宿主机修改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rw则可读可写</span></span><br></pre></td></tr></table></figure><h3 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h3><p><strong>方式二：使用DockerFile挂载</strong></p><p>通过dokerFile这个脚本可以生成镜像，每个命令都是一层</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim dockerfile01内容</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;----------end------------&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="comment"># 使用如下命令生成镜像</span></span><br><span class="line">-f 指定从那个文件生成</span><br><span class="line">-t 镜像名</span><br><span class="line">. 位置</span><br><span class="line">[root@centos7vm docker-test-volume]<span class="comment"># docker build -f dockerfile1 -t test_os/centos:1.0 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"> ---&gt; 0d120b6ccaa8</span><br><span class="line">Step 2/4 : VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 6e98aba39de7</span><br><span class="line">Removing intermediate container 6e98aba39de7</span><br><span class="line"> ---&gt; e2b73d377118</span><br><span class="line">Step 3/4 : CMD <span class="built_in">echo</span> <span class="string">&quot;----------end------------&quot;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> b36b63a3e0e8</span><br><span class="line">Removing intermediate container b36b63a3e0e8</span><br><span class="line"> ---&gt; f5f1b57f30fa</span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> f5ac620b0aac</span><br><span class="line">Removing intermediate container f5ac620b0aac</span><br><span class="line"> ---&gt; 22cd294f67ad</span><br><span class="line">Successfully built 22cd294f67ad</span><br><span class="line">Successfully tagged test_os/centos:1.0</span><br><span class="line"><span class="comment"># 执行自己的镜像</span></span><br><span class="line">[root@centos7vm docker-test-volume]<span class="comment"># docker run -it 22cd294f67ad /bin/bash</span></span><br><span class="line">[root@08b42c895f34 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02</span><br><span class="line"><span class="comment"># 最后面两个文件夹就是自动挂载的数据卷目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后两个卷一定与外部有同步的。</p><p>没有写名字，这是匿名挂载</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108237.png" alt="image-20201108210619365"></p><p>查看容器属性，确定是匿名挂载</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310108658.png" alt="image-20201108210750028"></p><p>这种使用方式非常多，如果构建镜像的时候没有挂载，就要手动挂载 -v 卷名:容器内路径。</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>两个mysql之间同步数据</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109275.png" alt="image-20201108211127849"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动容器，通过自己写的镜像启动</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109026.png" alt="image-20201108211313942"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再新建一个容器，从docker01中继承数据卷</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -it --name docker02 --volumes-from docker01 test_os/centos:1.0</span></span><br><span class="line">同一个目录数据可以同步</span><br><span class="line"></span><br><span class="line">这里面docker01就叫做数据卷容器</span><br></pre></td></tr></table></figure><p>多个mysql数据共享</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -p 3310:3306 --volumes-from mysql01 -e MYSQL_ROOT_PASSWORD=123 --name mysql01 mysql:5.7</span></span><br></pre></td></tr></table></figure><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><hr><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>DockerFile是用来构建Docker镜像的文件，是一种命令参数脚本</p><p>构建步骤：</p><ol><li>编写一个dockerfile文件</li><li>docker build构建成为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像(Docker Hub、阿里云镜像仓库)</li></ol><h3 id="dockerfile构建过程"><a href="#dockerfile构建过程" class="headerlink" title="dockerfile构建过程"></a>dockerfile构建过程</h3><p><strong>基础知识：</strong></p><ol><li>保留关键字(指令)都必须是大写字母</li><li>指令顺序执行</li><li># 表示注释</li><li>每一个指令都是一个镜像层</li></ol><p>DockerFile是面向开发的，以后发布项目，做镜像，就需要编写dockerfile文件。</p><p>DockerFile： 构建文件，定义了一切步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行的产品</p><p>Docker容器：容器就是镜像运行起来提供服务的</p><p><strong>DockerFile命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM <span class="comment"># 基础镜像，一切从这里开始构建</span></span><br><span class="line">MAINTAINER<span class="comment"># 镜像是谁写的，姓名+邮箱</span></span><br><span class="line">RUN<span class="comment"># 镜像构建的时候需要运行的命令</span></span><br><span class="line">ADD<span class="comment"># 步骤：tomcat镜像，这个tomcat压缩包，添加内容</span></span><br><span class="line">WORKDIR<span class="comment"># 镜像的工作目录   进入镜像时的目录</span></span><br><span class="line">VOLUME<span class="comment"># 挂载的目录位置</span></span><br><span class="line">EXPOSE<span class="comment"># 暴露端口配置</span></span><br><span class="line">CMD<span class="comment"># 指定容器启动的时候要运行的命令，CMD只有最后一个会生效，而且可被替代</span></span><br><span class="line">ENTRYPOINT   <span class="comment"># 容器启动的时候要运行的命令，可以追加命令  </span></span><br><span class="line"><span class="comment"># CMD 与ENTRYPOINT 区别，比如说   ls -l   如果是使用CMD 写ls -a  则执行docker run 会替换掉ls -l   如果是ENTRYPOINT则会变成 ls -a  ls -l 下面详细介绍</span></span><br><span class="line">ONBUILD <span class="comment"># 当构建一个被继承DockerFile的时候，就会歘ONBUILD执行，触发指令</span></span><br><span class="line">COPY <span class="comment">#  类似ADD,将我们的文件拷贝到镜像中</span></span><br><span class="line">ENV <span class="comment"># 构建的时候，设置的环境变量    </span></span><br></pre></td></tr></table></figure><p>这里放的图片比较多，更全面的写展示各种命令</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109001.png" alt="image-20201108213930017"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109418.png" alt="image-20201108213418167"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109331.png" alt="image-20201108213512266"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109341.png" alt="image-20201108213536145"></p><h3 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h3><p>Docker Hub中绝大多数镜像都是从基础镜像过来的FROM scratch，然后配置需要的软件和环境</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109369.png" alt="image-20201108214918038"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建自己的centos</span></span><br><span class="line"><span class="comment"># 1. 编写dockerfile文件</span></span><br><span class="line">[root@centos7vm dockerfile]<span class="comment"># cat mycentos.dockerfile </span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER halfcoke&lt;halfcoke@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD ECHO <span class="string">&quot;------END-----&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="comment"># 2. 通过文件构建镜像</span></span><br><span class="line">docker build -f mycentos.dockerfile -t mycentos:0.1 .</span><br><span class="line"><span class="comment"># 3. 测试运行一下</span></span><br></pre></td></tr></table></figure><h3 id="CMD-和-ENTRYPOINT区别"><a href="#CMD-和-ENTRYPOINT区别" class="headerlink" title="CMD 和 ENTRYPOINT区别"></a>CMD 和 ENTRYPOINT区别</h3><p>CMD 只有最后一个CMD会生效</p><h4 id="测试cmd"><a href="#测试cmd" class="headerlink" title="测试cmd"></a>测试cmd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerfile文件内容</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -f file -t cmdtest .</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">[root@centos7vm dockerfile]<span class="comment"># docker run cmdtest</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">.........</span><br><span class="line"><span class="comment"># 想追加一个命令 -l</span></span><br><span class="line">[root@centos7vm dockerfile]<span class="comment"># docker run cmdtest -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="string">&quot;exec: \&quot;-l\&quot;: executable file not found in <span class="variable">$PATH</span>&quot;</span>: unknown.</span><br><span class="line">ERRO[0000] error waiting <span class="keyword">for</span> container: context canceled </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试entrypoint"><a href="#测试entrypoint" class="headerlink" title="测试entrypoint"></a>测试entrypoint</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerfile文件内容</span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -f file -t cmdtest .</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"></span><br><span class="line">[root@centos7vm dockerfile]<span class="comment"># docker run entrytest</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">...............</span><br><span class="line"><span class="comment"># 想追加一个命令 -l</span></span><br><span class="line">[root@centos7vm dockerfile]<span class="comment"># docker run entrytest -l</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x   1 root root   6 Nov  8 14:08 .</span><br><span class="line">drwxr-xr-x   1 root root   6 Nov  8 14:08 ..</span><br><span class="line">-rwxr-xr-x   1 root root   0 Nov  8 14:08 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root   7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root 340 Nov  8 14:08 dev</span><br><span class="line">drwxr-xr-x   1 root root  66 Nov  8 14:08 etc</span><br><span class="line">drwxr-xr-x   2 root root   6 May 11  2019 home</span><br><span class="line">lrwxrwxrwx   1 root root   7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root   9 May 11  2019 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root   6 Aug  9 21:40 lost+found</span><br><span class="line">drwxr-xr-x   2 root root   6 May 11  2019 media</span><br><span class="line">drwxr-xr-x   2 root root   6 May 11  2019 mnt</span><br><span class="line">drwxr-xr-x   2 root root   6 May 11  2019 opt</span><br><span class="line">dr-xr-xr-x 301 root root   0 Nov  8 14:08 proc</span><br><span class="line">dr-xr-x---   2 root root 162 Aug  9 21:40 root</span><br><span class="line">drwxr-xr-x  11 root root 163 Aug  9 21:40 run</span><br><span class="line">lrwxrwxrwx   1 root root   8 May 11  2019 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root   6 May 11  2019 srv</span><br><span class="line">dr-xr-xr-x  13 root root   0 Nov  8 13:12 sys</span><br><span class="line">drwxrwxrwt   7 root root 145 Aug  9 21:40 tmp</span><br><span class="line">drwxr-xr-x  12 root root 144 Aug  9 21:40 usr</span><br><span class="line">drwxr-xr-x  20 root root 262 Aug  9 21:40 var</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习：TomCat镜像"><a href="#练习：TomCat镜像" class="headerlink" title="练习：TomCat镜像"></a>练习：TomCat镜像</h3><ol><li><p>准备压缩文件</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109751.png" alt="image-20201109103657554"></p></li><li><p>编写Dockerfile文件 官方命名<code>Dockerfile</code>，build就会自动寻找这个文件，不需要<code>-f</code>指定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER halcoke&lt;halfcoke@163.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u271-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.39.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_271</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.39</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.39</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.39/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -F /usr/localapache-tomcat-9.0.39/bin/logs/catalina.out</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t diytomcat .</span><br></pre></td></tr></table></figure></li><li><p>启动镜像</p></li><li><p>访问测试</p></li><li><p>发布项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello World!&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(<span class="string">&quot;你的 IP 地址 &quot;</span> + request.getRemoteAddr());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h3><p><strong>发布到阿里云</strong></p><p>参考阿里云官方文档</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109789.png" alt="image-20201109135918607"></p></li></ol><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><hr><h3 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h3><p>docker生成的网卡</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201109140804266.png" alt="image-20201109140804266"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 是如何处理网络链接的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器内部的ip地址  ip addr， 发现容器启动的时候会得到一个eth0@if97ip地址</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line">Unable to find image <span class="string">&#x27;tomcat:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/tomcat</span><br><span class="line">e4c3d3e4f7b0: Pull complete </span><br><span class="line">101c41d0463b: Pull complete </span><br><span class="line">8275efcd805f: Pull complete </span><br><span class="line">751620502a7a: Pull complete </span><br><span class="line">a59da3a7d0e7: Pull complete </span><br><span class="line">9c0f1dffe039: Pull complete </span><br><span class="line">474314d81831: Pull complete </span><br><span class="line">90ee5d998c5c: Pull complete </span><br><span class="line">a79c7e2a85e1: Pull complete </span><br><span class="line">1e48dd1bb576: Pull complete </span><br><span class="line">Digest: sha256:ad82afe54f2aa67167e873162578a751aed3173e42250a9ed68f306aa4b83025</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> tomcat:latest</span><br><span class="line">04c9ac8b93a7efd8c19b0932bcfe5803be94d059fb6f365dd47d2ee63e935fe8</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec -it 04c9a /bin/bash</span></span><br><span class="line">root@04c9ac8b93a7:/usr/local/tomcat<span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">96: eth0@if97: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@04c9ac8b93a7:/usr/local/tomcat<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux能够ping通容器内部</span></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li><p>每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要安装了docker，就会有一个docker0</p></li><li><p>启动一个容器后，会多出一对网卡，容器内一个，主机上一个</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201109143414467.png" alt="image-20201109143414467"></p></li></ol><p>我们先这个容器网卡，都是一对一对的</p><p>evth-pair就是一对虚拟设备接口，他们都是成对出现的，</p><p>evth-pair充当一个桥梁，链接各种虚拟网络设备</p><ol start="3"><li>两个容器之间也能够ping通</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用tcpdump 抓包</span></span><br><span class="line">root@60f31d3cc794:/usr/local/tomcat<span class="comment"># tcpdump -i eth0</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">06:51:02.491361 ARP, Request who-has 172.17.0.3 tell 60f31d3cc794, length 28</span><br><span class="line">06:51:02.491396 ARP, Reply 172.17.0.3 is-at 02:42:ac:11:00:03 (oui Unknown), length 28</span><br><span class="line">06:51:02.491398 IP 60f31d3cc794 &gt; 172.17.0.3: ICMP <span class="built_in">echo</span> request, <span class="built_in">id</span> 371, <span class="built_in">seq</span> 1, length 64</span><br><span class="line">06:51:02.491420 IP 172.17.0.3 &gt; 60f31d3cc794: ICMP <span class="built_in">echo</span> reply, <span class="built_in">id</span> 371, <span class="built_in">seq</span> 1, length 64</span><br><span class="line">06:51:02.491718 IP 60f31d3cc794.47353 &gt; 192.168.3.1.domain: 56068+ PTR? 3.0.17.172.in-addr.arpa. (41)</span><br><span class="line">06:51:02.502944 IP 192.168.3.1.domain &gt; 60f31d3cc794.47353: 56068 NXDomain* 0/1/0 (95)</span><br><span class="line">06:51:02.503226 IP 60f31d3cc794.52337 &gt; 192.168.3.1.domain: 16962+ PTR? 1.3.168.192.in-addr.arpa. (42)</span><br><span class="line">06:51:02.504061 IP 192.168.3.1.domain &gt; 60f31d3cc794.52337: 16962 NXDomain- 0/0/0 (42)</span><br><span class="line">06:51:03.494530 IP 60f31d3cc794 &gt; 172.17.0.3: ICMP <span class="built_in">echo</span> request, <span class="built_in">id</span> 371, <span class="built_in">seq</span> 2, length 64</span><br><span class="line">06:51:03.494575 IP 172.17.0.3 &gt; 60f31d3cc794: ICMP <span class="built_in">echo</span> reply, <span class="built_in">id</span> 371, <span class="built_in">seq</span> 2, length 64</span><br><span class="line">06:51:07.501141 ARP, Request who-has 172.17.0.1 tell 60f31d3cc794, length 28</span><br><span class="line">06:51:07.501159 ARP, Request who-has 60f31d3cc794 tell 172.17.0.3, length 28</span><br><span class="line">06:51:07.501165 ARP, Reply 60f31d3cc794 is-at 02:42:ac:11:00:04 (oui Unknown), length 28</span><br><span class="line">06:51:07.501246 ARP, Reply 172.17.0.1 is-at 02:42:65:8d:e1:2b (oui Unknown), length 28</span><br><span class="line">06:51:07.501342 IP 60f31d3cc794.56205 &gt; 192.168.3.1.domain: 41516+ PTR? 1.0.17.172.in-addr.arpa. (41)</span><br><span class="line">06:51:07.507059 IP 192.168.3.1.domain &gt; 60f31d3cc794.56205: 41516 NXDomain* 0/1/0 (95)</span><br><span class="line">06:51:12.522774 ARP, Request who-has 60f31d3cc794 tell 172.17.0.1, length 28</span><br><span class="line">06:51:12.522783 ARP, Reply 60f31d3cc794 is-at 02:42:ac:11:00:04 (oui Unknown), length 28</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>evth-pair有点类似于一个虚拟交换机，为每个虚拟设备建立一对端口，虚拟设备上一个，宿主机上一个，相当于用网线链接起来。<a href="https://www.cnblogs.com/bakari/p/10613710.html">参考链接</a></p><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><p>容器之间不通过ip可以互相ping通</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接ping无法ping通</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec tomcat01 ping tomcat02</span></span><br><span class="line">ping: tomcat02: Name or service not known</span><br><span class="line"><span class="comment"># 如何解决？</span></span><br><span class="line"><span class="comment"># 通过--link的方式可以连接</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -P --name tomcat03 --link tomcat02 tomcat</span></span><br><span class="line">adde4bc5e9fb8e398bbaba77f889819d623df12190f42a4c9eaa93e910ad2bf4</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">adde4bc5e9fb        tomcat              <span class="string">&quot;catalina.sh run&quot;</span>   4 seconds ago       Up 3 seconds        0.0.0.0:32781-&gt;8080/tcp   tomcat03</span><br><span class="line">f7fa8f2e44a8        tomcat              <span class="string">&quot;catalina.sh run&quot;</span>   5 hours ago         Up 5 hours          0.0.0.0:32778-&gt;8080/tcp   tomcat02</span><br><span class="line">04c9ac8b93a7        tomcat              <span class="string">&quot;catalina.sh run&quot;</span>   5 hours ago         Up 5 hours          0.0.0.0:32777-&gt;8080/tcp   tomcat01</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec -it tomcat03 ping tomcat02</span></span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.251 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.097 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat02 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 6ms</span><br><span class="line">rtt min/avg/max/mdev = 0.080/0.142/0.251/0.078 ms</span><br><span class="line"><span class="comment"># 反向无法连通</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec -it tomcat02 ping tomcat03</span></span><br><span class="line">ping: tomcat03: Name or service not known</span><br><span class="line"><span class="comment"># --link 是在host文件中进行了配置</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec tomcat03 cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.3tomcat02 f7fa8f2e44a8</span><br><span class="line">172.17.0.4adde4bc5e9fb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>现在不建议使用–link</strong></p><p>docker0问题，不支持容器名链接访问</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有的网络模式</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8c37dffaecb4        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">35c2a571afd2        host                host                <span class="built_in">local</span></span><br><span class="line">b9de4a74c582        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>网络模式</strong></p><p>bridge： 桥接</p><p>none：不配置网络</p><p>host：和宿主机共享网络</p><p>container：容器内网络连通</p><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是默认增加了--net bridge， 这个就是docker0</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -P --name tomcat01  tomcat </span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -P --name tomcat01 --net bridge tomcat </span></span><br><span class="line"><span class="comment"># docker0特点，默认，域名不能访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义网络</span></span><br><span class="line"><span class="comment"># --driver bridge</span></span><br><span class="line"><span class="comment"># --subnet 192.168.0.0/16</span></span><br><span class="line"><span class="comment"># --gateway 192.168.0.1</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span></span><br><span class="line">8df9a7ad718555216a856cf0c5fa4cf02788f4c840a2d832453a4ab3d3ef3ef6</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8c37dffaecb4        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">35c2a571afd2        host                host                <span class="built_in">local</span></span><br><span class="line">8df9a7ad7185        mynet               bridge              <span class="built_in">local</span></span><br><span class="line">b9de4a74c582        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109378.png" alt="image-20201109192308737"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加两个容器</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -P --name tomcat01 --net mynet tomcat</span></span><br><span class="line">54c6db4b62e6ea50dbbffb7559a08f93ff62d3944e10ffa6a32dbec56dc70a22</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker run -d -P --name tomcat02 --net mynet tomcat</span></span><br><span class="line">80b3e7d6343eca724f0c99c43dfeb0df985163dea8b207046bf375b724a25f6e</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mynet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;8df9a7ad718555216a856cf0c5fa4cf02788f4c840a2d832453a4ab3d3ef3ef6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-11-09T19:21:57.212203173+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;54c6db4b62e6ea50dbbffb7559a08f93ff62d3944e10ffa6a32dbec56dc70a22&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;967a2066e520708347d6b4f7ce52d3eb0d6284684808a6f7222f96f5461dc424&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;80b3e7d6343eca724f0c99c43dfeb0df985163dea8b207046bf375b724a25f6e&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;758970ddbc8affa25a1de8a36ce9e013863dc1769694081713affd587cfdf81e&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 现在不需要使用--link，也能ping名字了</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec tomcat01 ping 192.168.0.3</span></span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.067 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.055 ms</span><br><span class="line">^C</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec tomcat01 ping tomcat02</span></span><br><span class="line">PING tomcat02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.039 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.073 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们自定义网络都已经帮我们维护好了对应的关系，推荐使用。</p><p>好处：</p><p>不同集群使用不同网络，这样能保证网络健康</p><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109757.png" alt="image-20201109192920354"></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310109184.png" alt="image-20201109192945986"></p><p><strong>测试打通</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7vm ~]<span class="comment"># docker network connect mynet tomcat03</span></span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mynet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;8df9a7ad718555216a856cf0c5fa4cf02788f4c840a2d832453a4ab3d3ef3ef6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-11-09T19:21:57.212203173+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;4fb292c8352c281860cb89dd8be171bdc4872f5bca008dc3924256fc6ac7a32a&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;bcc695da7144029eb0fc674249d3286fb8cc2bba863ef5e1c1197f579e9e6d76&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.4/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;54c6db4b62e6ea50dbbffb7559a08f93ff62d3944e10ffa6a32dbec56dc70a22&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;967a2066e520708347d6b4f7ce52d3eb0d6284684808a6f7222f96f5461dc424&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;80b3e7d6343eca724f0c99c43dfeb0df985163dea8b207046bf375b724a25f6e&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;758970ddbc8affa25a1de8a36ce9e013863dc1769694081713affd587cfdf81e&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec tomcat03 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">111: eth0@if112: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">113: eth1@if114: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:c0:a8:00:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 192.168.0.4/16 brd 192.168.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec tomcat03 ping tomcat01</span></span><br><span class="line">PING tomcat01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.108 ms</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.048 ms</span><br><span class="line">^C</span><br><span class="line">[root@centos7vm ~]<span class="comment"># docker exec tomcat03 ping tomcat02</span></span><br><span class="line">PING tomcat02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.057 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.063 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论，假设跨网络操作，就需要这么操作。</p><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建redis配置文件</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 6);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf</span><br><span class="line"><span class="built_in">touch</span> /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span></span><br><span class="line"><span class="string">cluster-announce-port 6379</span></span><br><span class="line"><span class="string">cluster-announce-bus-port 16379</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 6);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">docker run -p 637<span class="variable">$&#123;n&#125;</span>:6379 -p 1637<span class="variable">$&#123;n&#125;</span>:16379 --name redis-<span class="variable">$&#123;n&#125;</span> \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$&#123;n&#125;</span>/data:/data \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$&#123;n&#125;</span>/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1<span class="variable">$&#123;n&#125;</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">/data <span class="comment"># redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>定义运行多个容器</p><p>YAML file配置文件</p><p>single command 命令？</p><h3 id="使用compose三个步骤"><a href="#使用compose三个步骤" class="headerlink" title="使用compose三个步骤"></a>使用compose三个步骤</h3><blockquote><p>官方说明：</p><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker-compose up</code> and Compose starts and runs your entire app.</li></ol></blockquote><p><code>dockerfile</code> 保证我们的项目在任何地方都可以运行</p><p>docker-compose.yaml怎么写</p><p>使用docker-compose up命令启动compose</p><h3 id="其他介绍"><a href="#其他介绍" class="headerlink" title="其他介绍"></a>其他介绍</h3><p>compose 是docker官方的开源项目，需要安装。</p><p><code>docker-compose.yml</code>文件格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Compose：重要的概念</p><ul><li>服务service：容器，应用</li><li>项目project。一组关联的容器。</li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://docs.docker.com/compose/install/#install-compose-on-linux-systems">官方链接</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p><a href="https://docs.docker.com/compose/gettingstarted/">官方链接</a></p><h3 id="yaml规则"><a href="#yaml规则" class="headerlink" title="yaml规则"></a>yaml规则</h3><p><code>docker-compose.yml</code>核心</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3层</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 版本  根据docker版本来</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 服务</span></span><br><span class="line">  <span class="string">服务1:</span> <span class="string">web</span></span><br><span class="line">    <span class="comment"># 服务配置</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">images:</span> <span class="string">....</span></span><br><span class="line">  <span class="string">服务2:</span> <span class="string">redis</span></span><br><span class="line">  <span class="string">....</span></span><br><span class="line"><span class="comment"># 其他配置  网络/卷/全局规则</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">configs:</span></span><br></pre></td></tr></table></figure><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><h3 id="创建Swarm集群"><a href="#创建Swarm集群" class="headerlink" title="创建Swarm集群"></a>创建Swarm集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker swarm init 初始化一个集群</span></span><br><span class="line">[root@docker-0 ~]<span class="comment"># docker swarm init</span></span><br><span class="line">Swarm initialized: current node (0onzn4z1ljxw7delulxewvnvk) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm <span class="built_in">join</span> --token SWMTKN-1-3vk8ohuxr68hy9o6udjzfi5q8dmasvapcu500tzvs22vpijnny-7qt31z6lamb831ym9qjd23s3y 192.168.3.20:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br><span class="line"><span class="comment"># 使用下面命令可以生成加入集群的命令</span></span><br><span class="line">docker swarm join-token manager</span><br><span class="line">docker swarm join-token worker</span><br></pre></td></tr></table></figure><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 ~]<span class="comment"># docker service --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker service COMMAND</span><br><span class="line"></span><br><span class="line">Manage services</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a new service</span><br><span class="line">  inspect     Display detailed information on one or more services</span><br><span class="line">  logs        Fetch the logs of a service or task</span><br><span class="line">  <span class="built_in">ls</span>          List services</span><br><span class="line">  ps          List the tasks of one or more services</span><br><span class="line">  <span class="built_in">rm</span>          Remove one or more services</span><br><span class="line">  rollback    Revert changes to a service<span class="string">&#x27;s configuration</span></span><br><span class="line"><span class="string">  scale       Scale one or multiple replicated services</span></span><br><span class="line"><span class="string">  update      Update a service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run &#x27;</span>docker service COMMAND --<span class="built_in">help</span><span class="string">&#x27; for more information on a command.</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结"></a>概念总结</h3><h4 id="swarm"><a href="#swarm" class="headerlink" title="swarm"></a>swarm</h4><p>集群的管理和编号，docker可以初始化一个集群，其他节点可以加入</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>就是一个docker节点，多个节点就组成了一个网络集群(管理者，工作者)</p><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>任务，可以在管理节点或工作节点来运行，</p><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux如何使用LVM进行磁盘扩容</title>
      <link href="/2020/189b3b4/"/>
      <url>/2020/189b3b4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux如何使用LVM进行磁盘扩容"><a href="#Linux如何使用LVM进行磁盘扩容" class="headerlink" title="Linux如何使用LVM进行磁盘扩容"></a>Linux如何使用LVM进行磁盘扩容</h1><p><em><strong>提醒：操作磁盘的工作都需要小心谨慎，避免数据丢失损坏，下文涉及到分区表的操作请再三确认</strong></em></p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>关于LVM的介绍请参考<a href="https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)">维基百科</a>或<a href="https://baike.baidu.com/item/LVM">百度百科</a>。</p><p>本文不提供如何将现有的非LVM分区转换为LVM分区的方法，本文主要解决现有LVM如何进行扩容的问题。</p><h2 id="磁盘状态查看"><a href="#磁盘状态查看" class="headerlink" title="磁盘状态查看"></a>磁盘状态查看</h2><p><em><strong>注意：磁盘操作需要有管理员权限，请确认你有管理员权限再执行如下操作。</strong></em></p><p>我们可以使用这个命令来查看当前硬盘的详细信息，包括当前磁盘容量以及分区信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p>命令执行结果与下图类似：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133707.png" alt="image-20201106185215998"></p><p>可以看到我们这块磁盘有<code>268.4GB</code>大小的空间，但只有两个分区<code>vda1</code>和<code>vda2</code>。我们同样可以使用<span id="lsblk"><code>lsblk</code></span>来查看当前分区状态。执行结果应该类似下图：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133939.png" alt="image-20201106190400637"></p><p>通过这里我们看到，主要要解决的问题是，如何把我们这200多GB的空间都用上。</p><h2 id="磁盘扩容"><a href="#磁盘扩容" class="headerlink" title="磁盘扩容"></a>磁盘扩容</h2><p>根据我们的硬盘名称，执行下面的命令进入磁盘分区管理。其中<code>/dev/vda</code>应该更换为你自己查询到的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/vda</span><br></pre></td></tr></table></figure><p>命令执行后的状态应该类似下图：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133328.png" alt="image-20201106190949198"></p><p>我们可以在这里输入<code>p</code>来查看当前硬盘的信息，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310133271.png" alt="image-20201106191051650"></p><p>接下来执行我们的扩容过程。</p><h3 id="新建一块分区"><a href="#新建一块分区" class="headerlink" title="新建一块分区"></a>新建一块分区</h3><p>新建分区的过程如下图所示，输入<code>n</code>，然后输入<code>P</code>（最多四个分区）。接下来的<code>Partition number</code>、<code>First sector</code>及<code>Last sector</code>我这里选择的都是默认值，因为我要用到剩下全部的磁盘空间，你在设置的时候根据你自己的情况决定。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134519.png" alt="image-20201106191356630"></p><p>再次输入<code>p</code>，我们可以看到新建的分区。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134126.png" alt="image-20201106191912730"></p><h3 id="修改分区类型"><a href="#修改分区类型" class="headerlink" title="修改分区类型"></a>修改分区类型</h3><p>我们这里的分区类型有问题，需要修改分区类型为<code>8e</code>。</p><p>输入<code>t</code>，选择新建出来的分区号，我这里是<code>3</code>，然后输入<code>8e</code>，再输入<code>p</code>查看分区类型，我们可以看到新建的分区的类型已经更改过来了。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134288.png" alt="image-20201106192200782"></p><h3 id="写入分区表"><a href="#写入分区表" class="headerlink" title="写入分区表"></a>写入分区表</h3><p>输入<code>w</code>，将刚刚的更改写入。然后执行<code>partprobe</code>重读分区表。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134435.png" alt="image-20201106192900952"></p><h3 id="扩容VG"><a href="#扩容VG" class="headerlink" title="扩容VG"></a>扩容VG</h3><p>输入<code>vgdisplay</code>查看当前VG信息。</p><p>输入下面的命令，其中<code>centos</code>是刚刚看到的<code>VG Name</code>，<code>/dev/vda3</code>是刚刚新建的分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgextend centos /dev/vda3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134753.png" alt="image-20201106193352723"></p><h3 id="扩容LV"><a href="#扩容LV" class="headerlink" title="扩容LV"></a>扩容LV</h3><p>输入<code>lvdisplay</code>来查看当前存在的LV信息，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134700.png" alt="image-20201106194122215"></p><p>确定我们要扩容的分区，可以通过刚才执行的<a href="#lsblk"><code>lsblk</code></a>命令查看，我们这里要扩容的<code>LV Path</code>是<code>/dev/centos/root</code>。</p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/centos/root</span><br><span class="line">xfs_growfs /dev/centos/root</span><br></pre></td></tr></table></figure><p>这时候我们执行下面命令查看，就能看到已经成功扩容了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134157.png" alt="image-20201106201915719"></p><hr><p>欢迎扫码关注，不定期更新各种经验。</p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202203310134385.jpeg" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> LVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LVM </tag>
            
            <tag> 磁盘扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo及GitHub在Windows下搭建个人博客</title>
      <link href="/2020/fa08f4c5/"/>
      <url>/2020/fa08f4c5/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Hexo及GitHub在Windows下搭建个人博客"><a href="#基于Hexo及GitHub在Windows下搭建个人博客" class="headerlink" title="基于Hexo及GitHub在Windows下搭建个人博客"></a>基于Hexo及GitHub在Windows下搭建个人博客</h1><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>Hexo<a href="https://hexo.io/zh-cn/">官网</a>提供了一些<a href="https://hexo.io/zh-cn/docs/">安装说明</a>，但是有些部分不够清晰，对新手不够友好。接下来我们在Windows环境下安装Hexo。</p><p>我会先介绍Hexo如何安装，然后在后文再介绍如何进行配置Hexo以及如何安装主题，如何设置图床等。</p><h3 id="Hexo安装前"><a href="#Hexo安装前" class="headerlink" title="Hexo安装前"></a>Hexo安装前</h3><p>在Hexo安装前需要安装下列环境：</p><ul><li><a href="https://nodejs.org/zh-cn/">Node.js</a></li><li><a href="https://git-scm.com/">GIt</a></li></ul><h4 id="Node-js安装及验证"><a href="#Node-js安装及验证" class="headerlink" title="Node.js安装及验证"></a>Node.js安装及验证</h4><ol><li><p>下载</p><p>当前Node.js官网<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a>所提供的下载版本为14.15.0，可直接<a href="https://nodejs.org/dist/v14.15.0/node-v14.15.0-x64.msi">点击下载</a>。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102312931.png"></p><ol start="2"><li><p>安装</p><p>下载完成后，直接使用默认设置一直<code>next</code>就可以，安装路径自行更改。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102312851.png"></p><ol start="3"><li><p>验证</p><p>使用<code>WIN+R</code>打开运行，输入<code>cmd</code>，然后输入<code>npm -v</code>验证是否安装成功。如下图所示则没有问题。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102312437.png"></p></li></ol><h4 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h4><ol><li><p>下载</p><p>Git下载页面为<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>，可直接<a href="https://github.com/git-for-windows/git/releases/download/v2.29.2.windows.1/Git-2.29.2-64-bit.exe">点击下载</a>，下载2.29.2 64位版本。</p></li><li><p>安装</p><p>如果有其他Git需求的用户可以搜索Git安装教程，如果没有其他需求直接默认配置安装。</p></li><li><p>验证</p><p>安装完成后，重新打开cmd，输入<code>git --version</code>，应该出现如下提示。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102312903.png"></p></li><li><p>初始化配置</p><p>首次安装git需要对git进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;halfcoke&quot;</span></span><br><span class="line">git config --global user.email halfcoke@163.com</span><br></pre></td></tr></table></figure><p>如果你后续想修改这个配置，可以重新执行一次，或者在<code>C:\Users\&lt;你的用户名&gt;\.gitconfig</code>文件中修改</p></li></ol><h3 id="Hexo安装-1"><a href="#Hexo安装-1" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>Hexo需要在本地有一个文件夹，来存放与自己博客有关的内容，这个文件夹不能删除，之后写博客也需要继续用到，后续会说明如何在云端保存这个文件夹，现在我们主要说明如何安装Hexo。</p><ol><li><p>在一个你喜欢的地方新建一个文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102312899.png"></p></li><li><p>安装Hexo</p><p>我们可以使用<code>git bash</code>在这个文件夹中打开命令行窗口，或者使用<code>cmd</code>进入当前路径。然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后输入来验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>应该输出：</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102312619.png"></p></li><li><p>初始化</p><p>使用如下命令对Hexo进行初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init your_blog_name</span><br><span class="line"><span class="built_in">cd</span> your_blog_name</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>验证安装</p><p>依次执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g  <span class="comment"># 生成页面</span></span><br><span class="line">hexo server <span class="comment"># 在本地测试</span></span><br></pre></td></tr></table></figure><p>最后应该会出现这样的提示：</p><p><img src="https://gitee.com/halfcoke/blog_img/raw/master/img/image-20201102142855559.png"></p><p>在你的浏览器中输入<code>localhost:4000</code>。</p><p>至此你的第一个页面应该生成完成了。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313441.png"></p><p>但是这页面也太简单了！！！</p><p>好吧，接下来我们看一下如何进行配置，以及如何部署到GitHub上。</p></li></ol><h2 id="Hexo部署到GitHub"><a href="#Hexo部署到GitHub" class="headerlink" title="Hexo部署到GitHub"></a>Hexo部署到GitHub</h2><p>为了连续性，我们先讲如何将Hexo部署到GitHub，这样后续配置完的页面你自己就会部署到GitHub上了。</p><p>Hexo部署到GitHub非常简单，但是需要先在GitHub上创建属于自己的仓库。</p><h3 id="GitHub相关"><a href="#GitHub相关" class="headerlink" title="GitHub相关"></a>GitHub相关</h3><p>如果你会GitHub相关的操作，那么直接创建一个你自己的公开仓库，然后跳到下一节，命名格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_repo.github.io   <span class="comment"># 对 仓库名叫这个，&lt;your_repo&gt;设置为你自己GitHub的用户名</span></span><br></pre></td></tr></table></figure><p>如果你不会GitHub，往下看：</p><ol><li><p>进入<a href="https://github.com/">GitHub</a>，注册属于自己的账号，或者直接点击到<a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">注册页面</a>。</p></li><li><p>然后登录进去，按下图点击创建一个仓库</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313452.png"></p></li><li><p>在下图红框的位置填入自己GitHub的名字，后续可以直接通过这个域名访问自己的博客(当然也可以通过其他方式自定义，这个后续再说)。</p><p>比如我的这个账号的就是<code>halfcokey</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313810.png"></p><p>关于GitHub就差不多这样了，接下来我们配置一下Hexo</p></li></ol><h3 id="Hexo相关"><a href="#Hexo相关" class="headerlink" title="Hexo相关"></a>Hexo相关</h3><p>在我们刚才初始化Hexo的文件夹中，找到<code>_config.yml</code>，不要用记事本打开，你可以下载个<a href="https://code.visualstudio.com/">VS Code</a>或者<a href="https://www.sublimetext.com/">Sublime</a>等一类的都行。</p><p>拉到最下面找到<code>deploy</code>，进行类似如下的配置，注意<code>yaml</code>文件依靠缩进，并且在<code>:</code>后有空格，一定要注意格式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/halfcokey/halfcokey.github.io.git</span> <span class="comment"># 你刚才新建的那个仓库的链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>更详细的说明及配置可以<a href="https://hexo.io/zh-cn/docs/one-command-deployment#Git">参考官网</a>。</p><p>然后，在这个路径下打开<code>cmd</code>，执行如下命令安装部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>这个时候你可以执行如下命令来进行部署你的个人网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>应该可以弹出让你输入账号或者授权的页面，点击授权即可。</p><p>这个时候，你就可以通过<code>&lt;your_repo&gt;.github.io</code>来访问你的页面了，比如我的就是<a href="https://halfcoke.github.io/">halfcoke.github.io</a></p><h2 id="Hexo安装及部署命令总结"><a href="#Hexo安装及部署命令总结" class="headerlink" title="Hexo安装及部署命令总结"></a>Hexo安装及部署命令总结</h2><p>如果你对上面执行的这些命令好奇，想查看具体说明的话，可以查看<a href="https://hexo.io/zh-cn/docs/commands">官网</a></p><p>这些命令在之后写文章可能也会用到，所以还是需要了解一下都是什么意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化你的博客</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 部署网站</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment">#################</span></span><br><span class="line"><span class="comment"># 这里是一些上面没有用到的命令，但之后可能会用到</span></span><br><span class="line"><span class="comment"># 新建一篇标题为title的文章，这默认放在source/_posts文件夹下</span></span><br><span class="line">hexo n <span class="string">&quot;title&quot;</span></span><br><span class="line"><span class="comment"># 清除缓存文件，如果更换主题等，建议执行一次</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>更详细的命令介绍请直接<a href="https://hexo.io/zh-cn/docs/commands">点击官网</a>查看。</p><h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>Hexo配置项有很多内容，详细的可以查看<a href="https://hexo.io/zh-cn/docs/configuration">官网</a>，下面我介绍一些我修改了的配置。在安装主题之后，还会再修改一些配置，我会在主题安装那里再介绍。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#x27;CCCCCoke&#x27;</span> <span class="comment"># 自己网站的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh_cn</span> <span class="comment"># 网站语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/ShangHai&#x27;</span> <span class="comment"># 时区</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://HalfCoke.github.io</span>  <span class="comment"># 改成自己的地址</span></span><br></pre></td></tr></table></figure><h2 id="Hexo本地文件夹上传"><a href="#Hexo本地文件夹上传" class="headerlink" title="Hexo本地文件夹上传"></a>Hexo本地文件夹上传</h2><p>我在部署Hexo的时候第一个问题就是如果我的Hexo文件夹丢失了怎么办。因为从GitHub上看到，通过<code>hexo d</code>上传的只有我们的静态页面，所以我们就需要将Hexo的文件夹上传到云端，这样我们换了一个环境后也能无差别的编辑自己的博客，而且最好方便管理而且别太麻烦。</p><p>在这里我参考了网上其他人的做法，就是在存放自己博客的GitHub仓库新建一个分支<code>hexo</code>来存放这些文件。</p><p>具体步骤如下：</p><p>首先建议先创建<code>.editorconfig</code>文件，方便你在使用各种IDE编辑的时候配置统一，这里不做过多介绍，文件内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br></pre></td></tr></table></figure><p>然后，在自己博客的目录(比如我的是<code>d:\Blog\blog_test</code>)，打开<code>cmd</code>或<code>git bash</code>，然后执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 初始化git仓库</span></span><br><span class="line">git add . <span class="comment"># 将当前文件添加进去</span></span><br><span class="line">git commit -m <span class="string">&quot;init&quot;</span> <span class="comment"># 在本地提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库，注意将halfcokey替换为自己的用户名</span></span><br><span class="line">git remote add origin https://github.com/halfcokey/halfcokey.github.io.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支，以后的文件直接在这个分支进行提交</span></span><br><span class="line">git checkout -b <span class="string">&quot;hexo&quot;</span> </span><br><span class="line"><span class="comment"># 将本地分支推送到远程仓库,并进行关联。</span></span><br><span class="line">git push -u origin hexo</span><br></pre></td></tr></table></figure><p>在之后修改文件，只需要执行如下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;修改...&quot;</span> <span class="comment"># 这里建议填写一些有意义的备注</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><h2 id="MarkDown文章图片自动上传GitHub"><a href="#MarkDown文章图片自动上传GitHub" class="headerlink" title="MarkDown文章图片自动上传GitHub"></a>MarkDown文章图片自动上传GitHub</h2><p>在使用MarkDown编辑的博客的时候，如果文章中的图片数量比较少，还可以手动的将图片传到图床上，然后再添加图片链接。但如果你想放很多图片，手动就麻烦的要死。</p><p>在这里我使用<a href="https://typora.io/">Typora</a>+<a href="https://molunerfinn.com/PicGo/">PicGo</a>的方式来管理文章的图片。</p><p>这两个软件的安装过程比较简单，下面主要说一下我进行配置的相关的内容。</p><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><p>PicGo的配置方式比较容易，我们选择<code>GitHub图床</code></p><p>看到我们需要填写<code>仓库名</code>、<code>分支名</code>、<code>Token</code>这些信息，下面我们分别介绍一下。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313065.png"></p><ol><li><p>仓库名</p><p>我们可以新建一个仓库专门用来存放图片，新建仓库的方式与之前相同，但是这是我们的仓库名就没有那么多限制了，可以随便起，我的创建的仓库名是<a href="https://github.com/HalfCoke/blog_img">blog_img</a>，然后在这个位置填入<code>&lt;用户名&gt;/&lt;仓库名&gt;</code></p></li><li><p>分支名</p><p>默认使用master就行</p></li><li><p>Token</p><p>在GitHub自己头像的位置点击<code>settings</code>，或者直接点击<a href="https://github.com/settings/profile">https://github.com/settings/profile</a></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313070.png"></p><p>然后点击<code>Developer settings-&gt;Personal access tokens</code>，或者直接点击<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313610.png"></p><p>然后点击<code>Generate new token</code></p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313413.png"></p><p>在Note的位置随便输入一个名字，下面的权限选第一个应该就行，如果前两个都选上。拉到最下面点击生成。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313481.png"></p><p>这时会有这样的提示，把这一串复制填写在PicGo的Token中，这样就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313863.png"></p></li></ol><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p><a href="https://typora.io/">Typora</a>直接支持使用<a href="https://molunerfinn.com/PicGo/">PicGo</a>。在<code>文件-&gt;偏好设置</code>中进行如下配置，主要是红框的位置</p><p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313229.png"></p><p>然后当你打开一个MarkDown文件的时候，点击Typora的<code>格式-&gt;图像-&gt;当插入本地图片时-&gt;上传图片</code>就可以了。这样你放进来的图片就会自动上传到你的仓库中，而且链接也会替换成在线链接。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h3><p>我所使用的主题是<a href="https://github.com/Mrminfive/hexo-theme-skapp">hexo-theme-skapp</a>，作者提供了比较详细的配置过程，大家可以直接参考。</p><h3 id="Hexo插件"><a href="#Hexo插件" class="headerlink" title="Hexo插件"></a>Hexo插件</h3><h4 id="中文标题链接处理"><a href="#中文标题链接处理" class="headerlink" title="中文标题链接处理"></a>中文标题链接处理</h4><p>使用Hexo的<code>abbrlink</code>插件，方法参考作者Shin的<a href="http://www.ideashin.com/post/2a09be9d/">博客</a></p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li><p>在Hexo站点配置文件<code>_config.yml</code>中修改</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:abbrlink/</span><br></pre></td></tr></table></figure></li><li><p>添加abbrlink配置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure></li></ol><hr><p>有任何问题欢迎一起探讨！<br>欢迎扫码关注，不定期更新各种经验。</p><img src="https://cdn.jsdelivr.net/gh/HalfCoke/blog_img@master/img/202204102313614.jpeg" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
          <category> WEB部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> Windows </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
